// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// CheckScope provides a mock function for the type MockCache
func (_mock *MockCache) CheckScope(ctx context.Context, userID string, patID string, optionalDomainID string, entityType auth.EntityType, operation auth.Operation, entityID string) bool {
	ret := _mock.Called(ctx, userID, patID, optionalDomainID, entityType, operation, entityID)

	if len(ret) == 0 {
		panic("no return value specified for CheckScope")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, auth.EntityType, auth.Operation, string) bool); ok {
		r0 = returnFunc(ctx, userID, patID, optionalDomainID, entityType, operation, entityID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCache_CheckScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckScope'
type MockCache_CheckScope_Call struct {
	*mock.Call
}

// CheckScope is a helper method to define mock.On call
//   - ctx
//   - userID
//   - patID
//   - optionalDomainID
//   - entityType
//   - operation
//   - entityID
func (_e *MockCache_Expecter) CheckScope(ctx interface{}, userID interface{}, patID interface{}, optionalDomainID interface{}, entityType interface{}, operation interface{}, entityID interface{}) *MockCache_CheckScope_Call {
	return &MockCache_CheckScope_Call{Call: _e.mock.On("CheckScope", ctx, userID, patID, optionalDomainID, entityType, operation, entityID)}
}

func (_c *MockCache_CheckScope_Call) Run(run func(ctx context.Context, userID string, patID string, optionalDomainID string, entityType auth.EntityType, operation auth.Operation, entityID string)) *MockCache_CheckScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(auth.EntityType), args[5].(auth.Operation), args[6].(string))
	})
	return _c
}

func (_c *MockCache_CheckScope_Call) Return(b bool) *MockCache_CheckScope_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCache_CheckScope_Call) RunAndReturn(run func(ctx context.Context, userID string, patID string, optionalDomainID string, entityType auth.EntityType, operation auth.Operation, entityID string) bool) *MockCache_CheckScope_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockCache
func (_mock *MockCache) Remove(ctx context.Context, userID string, scopesID []string) error {
	ret := _mock.Called(ctx, userID, scopesID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, userID, scopesID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockCache_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx
//   - userID
//   - scopesID
func (_e *MockCache_Expecter) Remove(ctx interface{}, userID interface{}, scopesID interface{}) *MockCache_Remove_Call {
	return &MockCache_Remove_Call{Call: _e.mock.On("Remove", ctx, userID, scopesID)}
}

func (_c *MockCache_Remove_Call) Run(run func(ctx context.Context, userID string, scopesID []string)) *MockCache_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockCache_Remove_Call) Return(err error) *MockCache_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Remove_Call) RunAndReturn(run func(ctx context.Context, userID string, scopesID []string) error) *MockCache_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllScope provides a mock function for the type MockCache
func (_mock *MockCache) RemoveAllScope(ctx context.Context, userID string, patID string) error {
	ret := _mock.Called(ctx, userID, patID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllScope")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, patID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_RemoveAllScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllScope'
type MockCache_RemoveAllScope_Call struct {
	*mock.Call
}

// RemoveAllScope is a helper method to define mock.On call
//   - ctx
//   - userID
//   - patID
func (_e *MockCache_Expecter) RemoveAllScope(ctx interface{}, userID interface{}, patID interface{}) *MockCache_RemoveAllScope_Call {
	return &MockCache_RemoveAllScope_Call{Call: _e.mock.On("RemoveAllScope", ctx, userID, patID)}
}

func (_c *MockCache_RemoveAllScope_Call) Run(run func(ctx context.Context, userID string, patID string)) *MockCache_RemoveAllScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCache_RemoveAllScope_Call) Return(err error) *MockCache_RemoveAllScope_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_RemoveAllScope_Call) RunAndReturn(run func(ctx context.Context, userID string, patID string) error) *MockCache_RemoveAllScope_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserAllScope provides a mock function for the type MockCache
func (_mock *MockCache) RemoveUserAllScope(ctx context.Context, userID string) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserAllScope")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_RemoveUserAllScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserAllScope'
type MockCache_RemoveUserAllScope_Call struct {
	*mock.Call
}

// RemoveUserAllScope is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockCache_Expecter) RemoveUserAllScope(ctx interface{}, userID interface{}) *MockCache_RemoveUserAllScope_Call {
	return &MockCache_RemoveUserAllScope_Call{Call: _e.mock.On("RemoveUserAllScope", ctx, userID)}
}

func (_c *MockCache_RemoveUserAllScope_Call) Run(run func(ctx context.Context, userID string)) *MockCache_RemoveUserAllScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCache_RemoveUserAllScope_Call) Return(err error) *MockCache_RemoveUserAllScope_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_RemoveUserAllScope_Call) RunAndReturn(run func(ctx context.Context, userID string) error) *MockCache_RemoveUserAllScope_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockCache
func (_mock *MockCache) Save(ctx context.Context, userID string, scopes []auth.Scope) error {
	ret := _mock.Called(ctx, userID, scopes)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []auth.Scope) error); ok {
		r0 = returnFunc(ctx, userID, scopes)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCache_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx
//   - userID
//   - scopes
func (_e *MockCache_Expecter) Save(ctx interface{}, userID interface{}, scopes interface{}) *MockCache_Save_Call {
	return &MockCache_Save_Call{Call: _e.mock.On("Save", ctx, userID, scopes)}
}

func (_c *MockCache_Save_Call) Run(run func(ctx context.Context, userID string, scopes []auth.Scope)) *MockCache_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]auth.Scope))
	})
	return _c
}

func (_c *MockCache_Save_Call) Return(err error) *MockCache_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Save_Call) RunAndReturn(run func(ctx context.Context, userID string, scopes []auth.Scope) error) *MockCache_Save_Call {
	_c.Call.Return(run)
	return _c
}
