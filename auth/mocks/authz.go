// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	policies "github.com/absmach/supermq/pkg/policies"
	mock "github.com/stretchr/testify/mock"
)

// Authz is an autogenerated mock type for the Authz type
type Authz struct {
	mock.Mock
}

type Authz_Expecter struct {
	mock *mock.Mock
}

func (_m *Authz) EXPECT() *Authz_Expecter {
	return &Authz_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: ctx, pr
func (_m *Authz) Authorize(ctx context.Context, pr policies.Policy) error {
	ret := _m.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, policies.Policy) error); ok {
		r0 = rf(ctx, pr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Authz_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type Authz_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
func (_e *Authz_Expecter) Authorize(ctx interface{}, pr interface{}) *Authz_Authorize_Call {
	return &Authz_Authorize_Call{Call: _e.mock.On("Authorize", ctx, pr)}
}

func (_c *Authz_Authorize_Call) Run(run func(ctx context.Context, pr policies.Policy)) *Authz_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(policies.Policy))
	})
	return _c
}

func (_c *Authz_Authorize_Call) Return(_a0 error) *Authz_Authorize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Authz_Authorize_Call) RunAndReturn(run func(context.Context, policies.Policy) error) *Authz_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthz creates a new instance of Authz. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthz(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authz {
	mock := &Authz{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
