// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/pkg/policies"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthz creates a new instance of MockAuthz. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthz(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthz {
	mock := &MockAuthz{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthz is an autogenerated mock type for the Authz type
type MockAuthz struct {
	mock.Mock
}

type MockAuthz_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthz) EXPECT() *MockAuthz_Expecter {
	return &MockAuthz_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockAuthz
func (_mock *MockAuthz) Authorize(ctx context.Context, pr policies.Policy) error {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) error); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthz_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthz_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx
//   - pr
func (_e *MockAuthz_Expecter) Authorize(ctx interface{}, pr interface{}) *MockAuthz_Authorize_Call {
	return &MockAuthz_Authorize_Call{Call: _e.mock.On("Authorize", ctx, pr)}
}

func (_c *MockAuthz_Authorize_Call) Run(run func(ctx context.Context, pr policies.Policy)) *MockAuthz_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(policies.Policy))
	})
	return _c
}

func (_c *MockAuthz_Authorize_Call) Return(err error) *MockAuthz_Authorize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthz_Authorize_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy) error) *MockAuthz_Authorize_Call {
	_c.Call.Return(run)
	return _c
}
