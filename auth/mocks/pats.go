// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	auth "github.com/absmach/supermq/auth"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PATS is an autogenerated mock type for the PATS type
type PATS struct {
	mock.Mock
}

// AddPATScopeEntry provides a mock function with given fields: ctx, token, patID, entityType, optionalDomainID, operation, entityIDs
func (_m *PATS) AddPATScopeEntry(ctx context.Context, token string, patID string, entityType auth.EntityType, optionalDomainID string, operation auth.Operation, entityIDs ...string) (auth.ScopesPage, error) {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, token, patID, entityType, optionalDomainID, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPATScopeEntry")
	}

	var r0 auth.ScopesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) (auth.ScopesPage, error)); ok {
		return rf(ctx, token, patID, entityType, optionalDomainID, operation, entityIDs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) auth.ScopesPage); ok {
		r0 = rf(ctx, token, patID, entityType, optionalDomainID, operation, entityIDs...)
	} else {
		r0 = ret.Get(0).(auth.ScopesPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) error); ok {
		r1 = rf(ctx, token, patID, entityType, optionalDomainID, operation, entityIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizePAT provides a mock function with given fields: ctx, userID, patID, entityType, optionalDomainID, operation, entityIDs
func (_m *PATS) AuthorizePAT(ctx context.Context, userID string, patID string, entityType auth.EntityType, optionalDomainID string, operation auth.Operation, entityIDs ...string) error {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID, patID, entityType, optionalDomainID, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizePAT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) error); ok {
		r0 = rf(ctx, userID, patID, entityType, optionalDomainID, operation, entityIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckPAT provides a mock function with given fields: ctx, userID, patID, entityType, optionalDomainID, operation, entityIDs
func (_m *PATS) CheckPAT(ctx context.Context, userID string, patID string, entityType auth.EntityType, optionalDomainID string, operation auth.Operation, entityIDs ...string) error {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID, patID, entityType, optionalDomainID, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckPAT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) error); ok {
		r0 = rf(ctx, userID, patID, entityType, optionalDomainID, operation, entityIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearPATAllScopeEntry provides a mock function with given fields: ctx, token, patID
func (_m *PATS) ClearPATAllScopeEntry(ctx context.Context, token string, patID string) error {
	ret := _m.Called(ctx, token, patID)

	if len(ret) == 0 {
		panic("no return value specified for ClearPATAllScopeEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, patID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePAT provides a mock function with given fields: ctx, token, name, description, duration, scope
func (_m *PATS) CreatePAT(ctx context.Context, token string, name string, description string, duration time.Duration, scope []auth.Scope) (auth.PAT, error) {
	ret := _m.Called(ctx, token, name, description, duration, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreatePAT")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, []auth.Scope) (auth.PAT, error)); ok {
		return rf(ctx, token, name, description, duration, scope)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, []auth.Scope) auth.PAT); ok {
		r0 = rf(ctx, token, name, description, duration, scope)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Duration, []auth.Scope) error); ok {
		r1 = rf(ctx, token, name, description, duration, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePAT provides a mock function with given fields: ctx, token, patID
func (_m *PATS) DeletePAT(ctx context.Context, token string, patID string) error {
	ret := _m.Called(ctx, token, patID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePAT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, patID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IdentifyPAT provides a mock function with given fields: ctx, paToken
func (_m *PATS) IdentifyPAT(ctx context.Context, paToken string) (auth.PAT, error) {
	ret := _m.Called(ctx, paToken)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyPAT")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (auth.PAT, error)); ok {
		return rf(ctx, paToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) auth.PAT); ok {
		r0 = rf(ctx, paToken)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPATS provides a mock function with given fields: ctx, token, pm
func (_m *PATS) ListPATS(ctx context.Context, token string, pm auth.PATSPageMeta) (auth.PATSPage, error) {
	ret := _m.Called(ctx, token, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListPATS")
	}

	var r0 auth.PATSPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.PATSPageMeta) (auth.PATSPage, error)); ok {
		return rf(ctx, token, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.PATSPageMeta) auth.PATSPage); ok {
		r0 = rf(ctx, token, pm)
	} else {
		r0 = ret.Get(0).(auth.PATSPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, auth.PATSPageMeta) error); ok {
		r1 = rf(ctx, token, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScopes provides a mock function with given fields: ctx, token, pm
func (_m *PATS) ListScopes(ctx context.Context, token string, pm auth.ScopesPageMeta) (auth.ScopesPage, error) {
	ret := _m.Called(ctx, token, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListScopes")
	}

	var r0 auth.ScopesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.ScopesPageMeta) (auth.ScopesPage, error)); ok {
		return rf(ctx, token, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.ScopesPageMeta) auth.ScopesPage); ok {
		r0 = rf(ctx, token, pm)
	} else {
		r0 = ret.Get(0).(auth.ScopesPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, auth.ScopesPageMeta) error); ok {
		r1 = rf(ctx, token, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePATScopeEntry provides a mock function with given fields: ctx, token, patID, entityType, optionalDomainID, operation, entityIDs
func (_m *PATS) RemovePATScopeEntry(ctx context.Context, token string, patID string, entityType auth.EntityType, optionalDomainID string, operation auth.Operation, entityIDs ...string) (auth.ScopesPage, error) {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, token, patID, entityType, optionalDomainID, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePATScopeEntry")
	}

	var r0 auth.ScopesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) (auth.ScopesPage, error)); ok {
		return rf(ctx, token, patID, entityType, optionalDomainID, operation, entityIDs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) auth.ScopesPage); ok {
		r0 = rf(ctx, token, patID, entityType, optionalDomainID, operation, entityIDs...)
	} else {
		r0 = ret.Get(0).(auth.ScopesPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, ...string) error); ok {
		r1 = rf(ctx, token, patID, entityType, optionalDomainID, operation, entityIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPATSecret provides a mock function with given fields: ctx, token, patID, duration
func (_m *PATS) ResetPATSecret(ctx context.Context, token string, patID string, duration time.Duration) (auth.PAT, error) {
	ret := _m.Called(ctx, token, patID, duration)

	if len(ret) == 0 {
		panic("no return value specified for ResetPATSecret")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (auth.PAT, error)); ok {
		return rf(ctx, token, patID, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) auth.PAT); ok {
		r0 = rf(ctx, token, patID, duration)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = rf(ctx, token, patID, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrievePAT provides a mock function with given fields: ctx, userID, patID
func (_m *PATS) RetrievePAT(ctx context.Context, userID string, patID string) (auth.PAT, error) {
	ret := _m.Called(ctx, userID, patID)

	if len(ret) == 0 {
		panic("no return value specified for RetrievePAT")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (auth.PAT, error)); ok {
		return rf(ctx, userID, patID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) auth.PAT); ok {
		r0 = rf(ctx, userID, patID)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, patID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokePATSecret provides a mock function with given fields: ctx, token, patID
func (_m *PATS) RevokePATSecret(ctx context.Context, token string, patID string) error {
	ret := _m.Called(ctx, token, patID)

	if len(ret) == 0 {
		panic("no return value specified for RevokePATSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, patID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePATDescription provides a mock function with given fields: ctx, token, patID, description
func (_m *PATS) UpdatePATDescription(ctx context.Context, token string, patID string, description string) (auth.PAT, error) {
	ret := _m.Called(ctx, token, patID, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePATDescription")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (auth.PAT, error)); ok {
		return rf(ctx, token, patID, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) auth.PAT); ok {
		r0 = rf(ctx, token, patID, description)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, patID, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePATName provides a mock function with given fields: ctx, token, patID, name
func (_m *PATS) UpdatePATName(ctx context.Context, token string, patID string, name string) (auth.PAT, error) {
	ret := _m.Called(ctx, token, patID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePATName")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (auth.PAT, error)); ok {
		return rf(ctx, token, patID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) auth.PAT); ok {
		r0 = rf(ctx, token, patID, name)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, patID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPATS creates a new instance of PATS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPATS(t interface {
	mock.TestingT
	Cleanup(func())
}) *PATS {
	mock := &PATS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
