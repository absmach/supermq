// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewCallback creates a new instance of Callback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *Callback {
	mock := &Callback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Callback is an autogenerated mock type for the Callback type
type Callback struct {
	mock.Mock
}

type Callback_Expecter struct {
	mock *mock.Mock
}

func (_m *Callback) EXPECT() *Callback_Expecter {
	return &Callback_Expecter{mock: &_m.Mock}
}

// Callback provides a mock function for the type Callback
func (_mock *Callback) Callback(ctx context.Context, pl map[string]interface{}) error {
	ret := _mock.Called(ctx, pl)

	if len(ret) == 0 {
		panic("no return value specified for Callback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = returnFunc(ctx, pl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Callback_Callback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Callback'
type Callback_Callback_Call struct {
	*mock.Call
}

// Callback is a helper method to define mock.On call
//   - ctx
//   - pl
func (_e *Callback_Expecter) Callback(ctx interface{}, pl interface{}) *Callback_Callback_Call {
	return &Callback_Callback_Call{Call: _e.mock.On("Callback", ctx, pl)}
}

func (_c *Callback_Callback_Call) Run(run func(ctx context.Context, pl map[string]interface{})) *Callback_Callback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Callback_Callback_Call) Return(err error) *Callback_Callback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Callback_Callback_Call) RunAndReturn(run func(ctx context.Context, pl map[string]interface{}) error) *Callback_Callback_Call {
	_c.Call.Return(run)
	return _c
}
