// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/pkg/authn"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthentication creates a new instance of MockAuthentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthentication(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthentication {
	mock := &MockAuthentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthentication is an autogenerated mock type for the Authentication type
type MockAuthentication struct {
	mock.Mock
}

type MockAuthentication_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthentication) EXPECT() *MockAuthentication_Expecter {
	return &MockAuthentication_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthentication
func (_mock *MockAuthentication) Authenticate(ctx context.Context, token string) (authn.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 authn.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (authn.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) authn.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(authn.Session)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthentication_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthentication_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockAuthentication_Expecter) Authenticate(ctx interface{}, token interface{}) *MockAuthentication_Authenticate_Call {
	return &MockAuthentication_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, token)}
}

func (_c *MockAuthentication_Authenticate_Call) Run(run func(ctx context.Context, token string)) *MockAuthentication_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthentication_Authenticate_Call) Return(session authn.Session, err error) *MockAuthentication_Authenticate_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockAuthentication_Authenticate_Call) RunAndReturn(run func(ctx context.Context, token string) (authn.Session, error)) *MockAuthentication_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}
