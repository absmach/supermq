// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	users "github.com/absmach/supermq/users"

	xoauth2 "golang.org/x/oauth2"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// ErrorURL provides a mock function with no fields
func (_m *Provider) ErrorURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ErrorURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_ErrorURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorURL'
type Provider_ErrorURL_Call struct {
	*mock.Call
}

// ErrorURL is a helper method to define mock.On call
func (_e *Provider_Expecter) ErrorURL() *Provider_ErrorURL_Call {
	return &Provider_ErrorURL_Call{Call: _e.mock.On("ErrorURL")}
}

func (_c *Provider_ErrorURL_Call) Run(run func()) *Provider_ErrorURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_ErrorURL_Call) Return(_a0 string) *Provider_ErrorURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_ErrorURL_Call) RunAndReturn(run func() string) *Provider_ErrorURL_Call {
	_c.Call.Return(run)
	return _c
}

// Exchange provides a mock function with given fields: ctx, code
func (_m *Provider) Exchange(ctx context.Context, code string) (xoauth2.Token, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 xoauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (xoauth2.Token, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) xoauth2.Token); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(xoauth2.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type Provider_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *Provider_Expecter) Exchange(ctx interface{}, code interface{}) *Provider_Exchange_Call {
	return &Provider_Exchange_Call{Call: _e.mock.On("Exchange", ctx, code)}
}

func (_c *Provider_Exchange_Call) Run(run func(ctx context.Context, code string)) *Provider_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Provider_Exchange_Call) Return(_a0 xoauth2.Token, _a1 error) *Provider_Exchange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_Exchange_Call) RunAndReturn(run func(context.Context, string) (xoauth2.Token, error)) *Provider_Exchange_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with no fields
func (_m *Provider) IsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Provider_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type Provider_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *Provider_Expecter) IsEnabled() *Provider_IsEnabled_Call {
	return &Provider_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *Provider_IsEnabled_Call) Run(run func()) *Provider_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_IsEnabled_Call) Return(_a0 bool) *Provider_IsEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_IsEnabled_Call) RunAndReturn(run func() bool) *Provider_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Provider) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Provider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Provider_Expecter) Name() *Provider_Name_Call {
	return &Provider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Provider_Name_Call) Run(run func()) *Provider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Name_Call) Return(_a0 string) *Provider_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Name_Call) RunAndReturn(run func() string) *Provider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RedirectURL provides a mock function with no fields
func (_m *Provider) RedirectURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RedirectURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_RedirectURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectURL'
type Provider_RedirectURL_Call struct {
	*mock.Call
}

// RedirectURL is a helper method to define mock.On call
func (_e *Provider_Expecter) RedirectURL() *Provider_RedirectURL_Call {
	return &Provider_RedirectURL_Call{Call: _e.mock.On("RedirectURL")}
}

func (_c *Provider_RedirectURL_Call) Run(run func()) *Provider_RedirectURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_RedirectURL_Call) Return(_a0 string) *Provider_RedirectURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_RedirectURL_Call) RunAndReturn(run func() string) *Provider_RedirectURL_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with no fields
func (_m *Provider) State() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type Provider_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *Provider_Expecter) State() *Provider_State_Call {
	return &Provider_State_Call{Call: _e.mock.On("State")}
}

func (_c *Provider_State_Call) Run(run func()) *Provider_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_State_Call) Return(_a0 string) *Provider_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_State_Call) RunAndReturn(run func() string) *Provider_State_Call {
	_c.Call.Return(run)
	return _c
}

// UserInfo provides a mock function with given fields: accessToken
func (_m *Provider) UserInfo(accessToken string) (users.User, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for UserInfo")
	}

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.User, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) users.User); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_UserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserInfo'
type Provider_UserInfo_Call struct {
	*mock.Call
}

// UserInfo is a helper method to define mock.On call
//   - accessToken string
func (_e *Provider_Expecter) UserInfo(accessToken interface{}) *Provider_UserInfo_Call {
	return &Provider_UserInfo_Call{Call: _e.mock.On("UserInfo", accessToken)}
}

func (_c *Provider_UserInfo_Call) Run(run func(accessToken string)) *Provider_UserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Provider_UserInfo_Call) Return(_a0 users.User, _a1 error) *Provider_UserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_UserInfo_Call) RunAndReturn(run func(string) (users.User, error)) *Provider_UserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
