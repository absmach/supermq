// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/pkg/events"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

type MockSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriber) EXPECT() *MockSubscriber_Expecter {
	return &MockSubscriber_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockSubscriber
func (_mock *MockSubscriber) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriber_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSubscriber_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSubscriber_Expecter) Close() *MockSubscriber_Close_Call {
	return &MockSubscriber_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSubscriber_Close_Call) Run(run func()) *MockSubscriber_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriber_Close_Call) Return(err error) *MockSubscriber_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriber_Close_Call) RunAndReturn(run func() error) *MockSubscriber_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockSubscriber
func (_mock *MockSubscriber) Subscribe(ctx context.Context, cfg events.SubscriberConfig) error {
	ret := _mock.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, events.SubscriberConfig) error); ok {
		r0 = returnFunc(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockSubscriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx
//   - cfg
func (_e *MockSubscriber_Expecter) Subscribe(ctx interface{}, cfg interface{}) *MockSubscriber_Subscribe_Call {
	return &MockSubscriber_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, cfg)}
}

func (_c *MockSubscriber_Subscribe_Call) Run(run func(ctx context.Context, cfg events.SubscriberConfig)) *MockSubscriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(events.SubscriberConfig))
	})
	return _c
}

func (_c *MockSubscriber_Subscribe_Call) Return(err error) *MockSubscriber_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriber_Subscribe_Call) RunAndReturn(run func(ctx context.Context, cfg events.SubscriberConfig) error) *MockSubscriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
