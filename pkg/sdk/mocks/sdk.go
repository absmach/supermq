// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"
	"time"

	"github.com/absmach/supermq/pkg/errors"
	"github.com/absmach/supermq/pkg/sdk"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSDK creates a new instance of MockSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSDK {
	mock := &MockSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSDK is an autogenerated mock type for the SDK type
type MockSDK struct {
	mock.Mock
}

type MockSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSDK) EXPECT() *MockSDK_Expecter {
	return &MockSDK_Expecter{mock: &_m.Mock}
}

// AcceptInvitation provides a mock function for the type MockSDK
func (_mock *MockSDK) AcceptInvitation(ctx context.Context, domainID string, token string) error {
	ret := _mock.Called(ctx, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, domainID, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSDK_AcceptInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptInvitation'
type MockSDK_AcceptInvitation_Call struct {
	*mock.Call
}

// AcceptInvitation is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - token
func (_e *MockSDK_Expecter) AcceptInvitation(ctx interface{}, domainID interface{}, token interface{}) *MockSDK_AcceptInvitation_Call {
	return &MockSDK_AcceptInvitation_Call{Call: _e.mock.On("AcceptInvitation", ctx, domainID, token)}
}

func (_c *MockSDK_AcceptInvitation_Call) Run(run func(ctx context.Context, domainID string, token string)) *MockSDK_AcceptInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_AcceptInvitation_Call) Return(err error) *MockSDK_AcceptInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSDK_AcceptInvitation_Call) RunAndReturn(run func(ctx context.Context, domainID string, token string) error) *MockSDK_AcceptInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// AddChildren provides a mock function for the type MockSDK
func (_mock *MockSDK) AddChildren(ctx context.Context, id string, domainID string, groupIDs []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupIDs, token)

	if len(ret) == 0 {
		panic("no return value specified for AddChildren")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupIDs, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_AddChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChildren'
type MockSDK_AddChildren_Call struct {
	*mock.Call
}

// AddChildren is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupIDs
//   - token
func (_e *MockSDK_Expecter) AddChildren(ctx interface{}, id interface{}, domainID interface{}, groupIDs interface{}, token interface{}) *MockSDK_AddChildren_Call {
	return &MockSDK_AddChildren_Call{Call: _e.mock.On("AddChildren", ctx, id, domainID, groupIDs, token)}
}

func (_c *MockSDK_AddChildren_Call) Run(run func(ctx context.Context, id string, domainID string, groupIDs []string, token string)) *MockSDK_AddChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_AddChildren_Call) Return(sDKError errors.SDKError) *MockSDK_AddChildren_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_AddChildren_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupIDs []string, token string) errors.SDKError) *MockSDK_AddChildren_Call {
	_c.Call.Return(run)
	return _c
}

// AddClientRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) AddClientRoleActions(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for AddClientRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, actions, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, actions, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AddClientRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientRoleActions'
type MockSDK_AddClientRoleActions_Call struct {
	*mock.Call
}

// AddClientRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - actions
//   - token
func (_e *MockSDK_Expecter) AddClientRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, actions interface{}, token interface{}) *MockSDK_AddClientRoleActions_Call {
	return &MockSDK_AddClientRoleActions_Call{Call: _e.mock.On("AddClientRoleActions", ctx, id, roleID, domainID, actions, token)}
}

func (_c *MockSDK_AddClientRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string)) *MockSDK_AddClientRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_AddClientRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AddClientRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AddClientRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) ([]string, errors.SDKError)) *MockSDK_AddClientRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// AddClientRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) AddClientRoleMembers(ctx context.Context, id string, roleID string, domainID string, members []string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for AddClientRoleMembers")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, members, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, members, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AddClientRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientRoleMembers'
type MockSDK_AddClientRoleMembers_Call struct {
	*mock.Call
}

// AddClientRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - members
//   - token
func (_e *MockSDK_Expecter) AddClientRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, members interface{}, token interface{}) *MockSDK_AddClientRoleMembers_Call {
	return &MockSDK_AddClientRoleMembers_Call{Call: _e.mock.On("AddClientRoleMembers", ctx, id, roleID, domainID, members, token)}
}

func (_c *MockSDK_AddClientRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string)) *MockSDK_AddClientRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_AddClientRoleMembers_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AddClientRoleMembers_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AddClientRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string) ([]string, errors.SDKError)) *MockSDK_AddClientRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// AddDomainRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) AddDomainRoleActions(ctx context.Context, id string, roleID string, actions []string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for AddDomainRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, actions, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, []string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, actions, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AddDomainRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDomainRoleActions'
type MockSDK_AddDomainRoleActions_Call struct {
	*mock.Call
}

// AddDomainRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - actions
//   - token
func (_e *MockSDK_Expecter) AddDomainRoleActions(ctx interface{}, id interface{}, roleID interface{}, actions interface{}, token interface{}) *MockSDK_AddDomainRoleActions_Call {
	return &MockSDK_AddDomainRoleActions_Call{Call: _e.mock.On("AddDomainRoleActions", ctx, id, roleID, actions, token)}
}

func (_c *MockSDK_AddDomainRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, actions []string, token string)) *MockSDK_AddDomainRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_AddDomainRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AddDomainRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AddDomainRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, actions []string, token string) ([]string, errors.SDKError)) *MockSDK_AddDomainRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// AddDomainRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) AddDomainRoleMembers(ctx context.Context, id string, roleID string, members []string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for AddDomainRoleMembers")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, members, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, []string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, members, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AddDomainRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDomainRoleMembers'
type MockSDK_AddDomainRoleMembers_Call struct {
	*mock.Call
}

// AddDomainRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - members
//   - token
func (_e *MockSDK_Expecter) AddDomainRoleMembers(ctx interface{}, id interface{}, roleID interface{}, members interface{}, token interface{}) *MockSDK_AddDomainRoleMembers_Call {
	return &MockSDK_AddDomainRoleMembers_Call{Call: _e.mock.On("AddDomainRoleMembers", ctx, id, roleID, members, token)}
}

func (_c *MockSDK_AddDomainRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, members []string, token string)) *MockSDK_AddDomainRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_AddDomainRoleMembers_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AddDomainRoleMembers_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AddDomainRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, members []string, token string) ([]string, errors.SDKError)) *MockSDK_AddDomainRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) AddGroupRoleActions(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, actions, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, actions, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AddGroupRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupRoleActions'
type MockSDK_AddGroupRoleActions_Call struct {
	*mock.Call
}

// AddGroupRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - actions
//   - token
func (_e *MockSDK_Expecter) AddGroupRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, actions interface{}, token interface{}) *MockSDK_AddGroupRoleActions_Call {
	return &MockSDK_AddGroupRoleActions_Call{Call: _e.mock.On("AddGroupRoleActions", ctx, id, roleID, domainID, actions, token)}
}

func (_c *MockSDK_AddGroupRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string)) *MockSDK_AddGroupRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_AddGroupRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AddGroupRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AddGroupRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) ([]string, errors.SDKError)) *MockSDK_AddGroupRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) AddGroupRoleMembers(ctx context.Context, id string, roleID string, domainID string, members []string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupRoleMembers")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, members, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, members, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AddGroupRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupRoleMembers'
type MockSDK_AddGroupRoleMembers_Call struct {
	*mock.Call
}

// AddGroupRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - members
//   - token
func (_e *MockSDK_Expecter) AddGroupRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, members interface{}, token interface{}) *MockSDK_AddGroupRoleMembers_Call {
	return &MockSDK_AddGroupRoleMembers_Call{Call: _e.mock.On("AddGroupRoleMembers", ctx, id, roleID, domainID, members, token)}
}

func (_c *MockSDK_AddGroupRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string)) *MockSDK_AddGroupRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_AddGroupRoleMembers_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AddGroupRoleMembers_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AddGroupRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string) ([]string, errors.SDKError)) *MockSDK_AddGroupRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// AvailableClientRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) AvailableClientRoleActions(ctx context.Context, domainID string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AvailableClientRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = returnFunc(ctx, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AvailableClientRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableClientRoleActions'
type MockSDK_AvailableClientRoleActions_Call struct {
	*mock.Call
}

// AvailableClientRoleActions is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - token
func (_e *MockSDK_Expecter) AvailableClientRoleActions(ctx interface{}, domainID interface{}, token interface{}) *MockSDK_AvailableClientRoleActions_Call {
	return &MockSDK_AvailableClientRoleActions_Call{Call: _e.mock.On("AvailableClientRoleActions", ctx, domainID, token)}
}

func (_c *MockSDK_AvailableClientRoleActions_Call) Run(run func(ctx context.Context, domainID string, token string)) *MockSDK_AvailableClientRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_AvailableClientRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AvailableClientRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AvailableClientRoleActions_Call) RunAndReturn(run func(ctx context.Context, domainID string, token string) ([]string, errors.SDKError)) *MockSDK_AvailableClientRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// AvailableDomainRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) AvailableDomainRoleActions(ctx context.Context, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for AvailableDomainRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AvailableDomainRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableDomainRoleActions'
type MockSDK_AvailableDomainRoleActions_Call struct {
	*mock.Call
}

// AvailableDomainRoleActions is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockSDK_Expecter) AvailableDomainRoleActions(ctx interface{}, token interface{}) *MockSDK_AvailableDomainRoleActions_Call {
	return &MockSDK_AvailableDomainRoleActions_Call{Call: _e.mock.On("AvailableDomainRoleActions", ctx, token)}
}

func (_c *MockSDK_AvailableDomainRoleActions_Call) Run(run func(ctx context.Context, token string)) *MockSDK_AvailableDomainRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSDK_AvailableDomainRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AvailableDomainRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AvailableDomainRoleActions_Call) RunAndReturn(run func(ctx context.Context, token string) ([]string, errors.SDKError)) *MockSDK_AvailableDomainRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// AvailableGroupRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) AvailableGroupRoleActions(ctx context.Context, id string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, token)

	if len(ret) == 0 {
		panic("no return value specified for AvailableGroupRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = returnFunc(ctx, id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_AvailableGroupRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableGroupRoleActions'
type MockSDK_AvailableGroupRoleActions_Call struct {
	*mock.Call
}

// AvailableGroupRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - token
func (_e *MockSDK_Expecter) AvailableGroupRoleActions(ctx interface{}, id interface{}, token interface{}) *MockSDK_AvailableGroupRoleActions_Call {
	return &MockSDK_AvailableGroupRoleActions_Call{Call: _e.mock.On("AvailableGroupRoleActions", ctx, id, token)}
}

func (_c *MockSDK_AvailableGroupRoleActions_Call) Run(run func(ctx context.Context, id string, token string)) *MockSDK_AvailableGroupRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_AvailableGroupRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_AvailableGroupRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_AvailableGroupRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, token string) ([]string, errors.SDKError)) *MockSDK_AvailableGroupRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// Channel provides a mock function for the type MockSDK
func (_mock *MockSDK) Channel(ctx context.Context, id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Channel); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type MockSDK_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Channel(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_Channel_Call {
	return &MockSDK_Channel_Call{Call: _e.mock.On("Channel", ctx, id, domainID, token)}
}

func (_c *MockSDK_Channel_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Channel_Call) Return(channel sdk.Channel, sDKError errors.SDKError) *MockSDK_Channel_Call {
	_c.Call.Return(channel, sDKError)
	return _c
}

func (_c *MockSDK_Channel_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Channel, errors.SDKError)) *MockSDK_Channel_Call {
	_c.Call.Return(run)
	return _c
}

// Channels provides a mock function for the type MockSDK
func (_mock *MockSDK) Channels(ctx context.Context, pm sdk.PageMetadata, domainID string, token string) (sdk.ChannelsPage, errors.SDKError) {
	ret := _mock.Called(ctx, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Channels")
	}

	var r0 sdk.ChannelsPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string, string) (sdk.ChannelsPage, errors.SDKError)); ok {
		return returnFunc(ctx, pm, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string, string) sdk.ChannelsPage); ok {
		r0 = returnFunc(ctx, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Channels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channels'
type MockSDK_Channels_Call struct {
	*mock.Call
}

// Channels is a helper method to define mock.On call
//   - ctx
//   - pm
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Channels(ctx interface{}, pm interface{}, domainID interface{}, token interface{}) *MockSDK_Channels_Call {
	return &MockSDK_Channels_Call{Call: _e.mock.On("Channels", ctx, pm, domainID, token)}
}

func (_c *MockSDK_Channels_Call) Run(run func(ctx context.Context, pm sdk.PageMetadata, domainID string, token string)) *MockSDK_Channels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.PageMetadata), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Channels_Call) Return(channelsPage sdk.ChannelsPage, sDKError errors.SDKError) *MockSDK_Channels_Call {
	_c.Call.Return(channelsPage, sDKError)
	return _c
}

func (_c *MockSDK_Channels_Call) RunAndReturn(run func(ctx context.Context, pm sdk.PageMetadata, domainID string, token string) (sdk.ChannelsPage, errors.SDKError)) *MockSDK_Channels_Call {
	_c.Call.Return(run)
	return _c
}

// Children provides a mock function for the type MockSDK
func (_mock *MockSDK) Children(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Children")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.GroupsPage); ok {
		r0 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Children_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Children'
type MockSDK_Children_Call struct {
	*mock.Call
}

// Children is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) Children(ctx interface{}, id interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_Children_Call {
	return &MockSDK_Children_Call{Call: _e.mock.On("Children", ctx, id, domainID, pm, token)}
}

func (_c *MockSDK_Children_Call) Run(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_Children_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_Children_Call) Return(groupsPage sdk.GroupsPage, sDKError errors.SDKError) *MockSDK_Children_Call {
	_c.Call.Return(groupsPage, sDKError)
	return _c
}

func (_c *MockSDK_Children_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.GroupsPage, errors.SDKError)) *MockSDK_Children_Call {
	_c.Call.Return(run)
	return _c
}

// Client provides a mock function for the type MockSDK
func (_mock *MockSDK) Client(ctx context.Context, id string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Client); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockSDK_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Client(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_Client_Call {
	return &MockSDK_Client_Call{Call: _e.mock.On("Client", ctx, id, domainID, token)}
}

func (_c *MockSDK_Client_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Client_Call) Return(client sdk.Client, sDKError errors.SDKError) *MockSDK_Client_Call {
	_c.Call.Return(client, sDKError)
	return _c
}

func (_c *MockSDK_Client_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Client, errors.SDKError)) *MockSDK_Client_Call {
	_c.Call.Return(run)
	return _c
}

// ClientRole provides a mock function for the type MockSDK
func (_mock *MockSDK) ClientRole(ctx context.Context, id string, roleID string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ClientRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientRole'
type MockSDK_ClientRole_Call struct {
	*mock.Call
}

// ClientRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) ClientRole(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_ClientRole_Call {
	return &MockSDK_ClientRole_Call{Call: _e.mock.On("ClientRole", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_ClientRole_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_ClientRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_ClientRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_ClientRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_ClientRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) (sdk.Role, errors.SDKError)) *MockSDK_ClientRole_Call {
	_c.Call.Return(run)
	return _c
}

// ClientRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) ClientRoleActions(ctx context.Context, id string, roleID string, domainID string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ClientRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientRoleActions'
type MockSDK_ClientRoleActions_Call struct {
	*mock.Call
}

// ClientRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) ClientRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_ClientRoleActions_Call {
	return &MockSDK_ClientRoleActions_Call{Call: _e.mock.On("ClientRoleActions", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_ClientRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_ClientRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_ClientRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_ClientRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_ClientRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) ([]string, errors.SDKError)) *MockSDK_ClientRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// ClientRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) ClientRoleMembers(ctx context.Context, id string, roleID string, domainID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRoleMembers")
	}

	var r0 sdk.RoleMembersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, sdk.PageMetadata, string) (sdk.RoleMembersPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, sdk.PageMetadata, string) sdk.RoleMembersPage); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RoleMembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ClientRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientRoleMembers'
type MockSDK_ClientRoleMembers_Call struct {
	*mock.Call
}

// ClientRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) ClientRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_ClientRoleMembers_Call {
	return &MockSDK_ClientRoleMembers_Call{Call: _e.mock.On("ClientRoleMembers", ctx, id, roleID, domainID, pm, token)}
}

func (_c *MockSDK_ClientRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_ClientRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(sdk.PageMetadata), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_ClientRoleMembers_Call) Return(roleMembersPage sdk.RoleMembersPage, sDKError errors.SDKError) *MockSDK_ClientRoleMembers_Call {
	_c.Call.Return(roleMembersPage, sDKError)
	return _c
}

func (_c *MockSDK_ClientRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError)) *MockSDK_ClientRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ClientRoles provides a mock function for the type MockSDK
func (_mock *MockSDK) ClientRoles(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRoles")
	}

	var r0 sdk.RolesPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.RolesPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.RolesPage); ok {
		r0 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RolesPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ClientRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientRoles'
type MockSDK_ClientRoles_Call struct {
	*mock.Call
}

// ClientRoles is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) ClientRoles(ctx interface{}, id interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_ClientRoles_Call {
	return &MockSDK_ClientRoles_Call{Call: _e.mock.On("ClientRoles", ctx, id, domainID, pm, token)}
}

func (_c *MockSDK_ClientRoles_Call) Run(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_ClientRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_ClientRoles_Call) Return(rolesPage sdk.RolesPage, sDKError errors.SDKError) *MockSDK_ClientRoles_Call {
	_c.Call.Return(rolesPage, sDKError)
	return _c
}

func (_c *MockSDK_ClientRoles_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError)) *MockSDK_ClientRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Clients provides a mock function for the type MockSDK
func (_mock *MockSDK) Clients(ctx context.Context, pm sdk.PageMetadata, domainID string, token string) (sdk.ClientsPage, errors.SDKError) {
	ret := _mock.Called(ctx, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Clients")
	}

	var r0 sdk.ClientsPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string, string) (sdk.ClientsPage, errors.SDKError)); ok {
		return returnFunc(ctx, pm, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string, string) sdk.ClientsPage); ok {
		r0 = returnFunc(ctx, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ClientsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Clients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clients'
type MockSDK_Clients_Call struct {
	*mock.Call
}

// Clients is a helper method to define mock.On call
//   - ctx
//   - pm
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Clients(ctx interface{}, pm interface{}, domainID interface{}, token interface{}) *MockSDK_Clients_Call {
	return &MockSDK_Clients_Call{Call: _e.mock.On("Clients", ctx, pm, domainID, token)}
}

func (_c *MockSDK_Clients_Call) Run(run func(ctx context.Context, pm sdk.PageMetadata, domainID string, token string)) *MockSDK_Clients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.PageMetadata), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Clients_Call) Return(clientsPage sdk.ClientsPage, sDKError errors.SDKError) *MockSDK_Clients_Call {
	_c.Call.Return(clientsPage, sDKError)
	return _c
}

func (_c *MockSDK_Clients_Call) RunAndReturn(run func(ctx context.Context, pm sdk.PageMetadata, domainID string, token string) (sdk.ClientsPage, errors.SDKError)) *MockSDK_Clients_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function for the type MockSDK
func (_mock *MockSDK) Connect(ctx context.Context, conn sdk.Connection, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, conn, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Connection, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, conn, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockSDK_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx
//   - conn
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Connect(ctx interface{}, conn interface{}, domainID interface{}, token interface{}) *MockSDK_Connect_Call {
	return &MockSDK_Connect_Call{Call: _e.mock.On("Connect", ctx, conn, domainID, token)}
}

func (_c *MockSDK_Connect_Call) Run(run func(ctx context.Context, conn sdk.Connection, domainID string, token string)) *MockSDK_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Connection), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Connect_Call) Return(sDKError errors.SDKError) *MockSDK_Connect_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_Connect_Call) RunAndReturn(run func(ctx context.Context, conn sdk.Connection, domainID string, token string) errors.SDKError) *MockSDK_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectClients provides a mock function for the type MockSDK
func (_mock *MockSDK) ConnectClients(ctx context.Context, channelID string, clientIDs []string, connTypes []string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, channelID, clientIDs, connTypes, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ConnectClients")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, channelID, clientIDs, connTypes, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_ConnectClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectClients'
type MockSDK_ConnectClients_Call struct {
	*mock.Call
}

// ConnectClients is a helper method to define mock.On call
//   - ctx
//   - channelID
//   - clientIDs
//   - connTypes
//   - domainID
//   - token
func (_e *MockSDK_Expecter) ConnectClients(ctx interface{}, channelID interface{}, clientIDs interface{}, connTypes interface{}, domainID interface{}, token interface{}) *MockSDK_ConnectClients_Call {
	return &MockSDK_ConnectClients_Call{Call: _e.mock.On("ConnectClients", ctx, channelID, clientIDs, connTypes, domainID, token)}
}

func (_c *MockSDK_ConnectClients_Call) Run(run func(ctx context.Context, channelID string, clientIDs []string, connTypes []string, domainID string, token string)) *MockSDK_ConnectClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].([]string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_ConnectClients_Call) Return(sDKError errors.SDKError) *MockSDK_ConnectClients_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_ConnectClients_Call) RunAndReturn(run func(ctx context.Context, channelID string, clientIDs []string, connTypes []string, domainID string, token string) errors.SDKError) *MockSDK_ConnectClients_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChannel provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateChannel(ctx context.Context, channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _mock.Called(ctx, channel, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return returnFunc(ctx, channel, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Channel, string, string) sdk.Channel); ok {
		r0 = returnFunc(ctx, channel, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Channel, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, channel, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannel'
type MockSDK_CreateChannel_Call struct {
	*mock.Call
}

// CreateChannel is a helper method to define mock.On call
//   - ctx
//   - channel
//   - domainID
//   - token
func (_e *MockSDK_Expecter) CreateChannel(ctx interface{}, channel interface{}, domainID interface{}, token interface{}) *MockSDK_CreateChannel_Call {
	return &MockSDK_CreateChannel_Call{Call: _e.mock.On("CreateChannel", ctx, channel, domainID, token)}
}

func (_c *MockSDK_CreateChannel_Call) Run(run func(ctx context.Context, channel sdk.Channel, domainID string, token string)) *MockSDK_CreateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Channel), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_CreateChannel_Call) Return(channel1 sdk.Channel, sDKError errors.SDKError) *MockSDK_CreateChannel_Call {
	_c.Call.Return(channel1, sDKError)
	return _c
}

func (_c *MockSDK_CreateChannel_Call) RunAndReturn(run func(ctx context.Context, channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError)) *MockSDK_CreateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChannels provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateChannels(ctx context.Context, channels []sdk.Channel, domainID string, token string) ([]sdk.Channel, errors.SDKError) {
	ret := _mock.Called(ctx, channels, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannels")
	}

	var r0 []sdk.Channel
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, []sdk.Channel, string, string) ([]sdk.Channel, errors.SDKError)); ok {
		return returnFunc(ctx, channels, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []sdk.Channel, string, string) []sdk.Channel); ok {
		r0 = returnFunc(ctx, channels, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sdk.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []sdk.Channel, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, channels, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannels'
type MockSDK_CreateChannels_Call struct {
	*mock.Call
}

// CreateChannels is a helper method to define mock.On call
//   - ctx
//   - channels
//   - domainID
//   - token
func (_e *MockSDK_Expecter) CreateChannels(ctx interface{}, channels interface{}, domainID interface{}, token interface{}) *MockSDK_CreateChannels_Call {
	return &MockSDK_CreateChannels_Call{Call: _e.mock.On("CreateChannels", ctx, channels, domainID, token)}
}

func (_c *MockSDK_CreateChannels_Call) Run(run func(ctx context.Context, channels []sdk.Channel, domainID string, token string)) *MockSDK_CreateChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sdk.Channel), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_CreateChannels_Call) Return(channels1 []sdk.Channel, sDKError errors.SDKError) *MockSDK_CreateChannels_Call {
	_c.Call.Return(channels1, sDKError)
	return _c
}

func (_c *MockSDK_CreateChannels_Call) RunAndReturn(run func(ctx context.Context, channels []sdk.Channel, domainID string, token string) ([]sdk.Channel, errors.SDKError)) *MockSDK_CreateChannels_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClient provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateClient(ctx context.Context, client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Client, string, string) (sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, client, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Client, string, string) sdk.Client); ok {
		r0 = returnFunc(ctx, client, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Client, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type MockSDK_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - ctx
//   - client
//   - domainID
//   - token
func (_e *MockSDK_Expecter) CreateClient(ctx interface{}, client interface{}, domainID interface{}, token interface{}) *MockSDK_CreateClient_Call {
	return &MockSDK_CreateClient_Call{Call: _e.mock.On("CreateClient", ctx, client, domainID, token)}
}

func (_c *MockSDK_CreateClient_Call) Run(run func(ctx context.Context, client sdk.Client, domainID string, token string)) *MockSDK_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Client), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_CreateClient_Call) Return(client1 sdk.Client, sDKError errors.SDKError) *MockSDK_CreateClient_Call {
	_c.Call.Return(client1, sDKError)
	return _c
}

func (_c *MockSDK_CreateClient_Call) RunAndReturn(run func(ctx context.Context, client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError)) *MockSDK_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClientRole provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateClientRole(ctx context.Context, id string, domainID string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, rq, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.RoleReq, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, rq, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.RoleReq, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, domainID, rq, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.RoleReq, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, rq, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateClientRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClientRole'
type MockSDK_CreateClientRole_Call struct {
	*mock.Call
}

// CreateClientRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - rq
//   - token
func (_e *MockSDK_Expecter) CreateClientRole(ctx interface{}, id interface{}, domainID interface{}, rq interface{}, token interface{}) *MockSDK_CreateClientRole_Call {
	return &MockSDK_CreateClientRole_Call{Call: _e.mock.On("CreateClientRole", ctx, id, domainID, rq, token)}
}

func (_c *MockSDK_CreateClientRole_Call) Run(run func(ctx context.Context, id string, domainID string, rq sdk.RoleReq, token string)) *MockSDK_CreateClientRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.RoleReq), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_CreateClientRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_CreateClientRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_CreateClientRole_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError)) *MockSDK_CreateClientRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClients provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateClients(ctx context.Context, client []sdk.Client, domainID string, token string) ([]sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateClients")
	}

	var r0 []sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, []sdk.Client, string, string) ([]sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, client, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []sdk.Client, string, string) []sdk.Client); ok {
		r0 = returnFunc(ctx, client, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sdk.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []sdk.Client, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClients'
type MockSDK_CreateClients_Call struct {
	*mock.Call
}

// CreateClients is a helper method to define mock.On call
//   - ctx
//   - client
//   - domainID
//   - token
func (_e *MockSDK_Expecter) CreateClients(ctx interface{}, client interface{}, domainID interface{}, token interface{}) *MockSDK_CreateClients_Call {
	return &MockSDK_CreateClients_Call{Call: _e.mock.On("CreateClients", ctx, client, domainID, token)}
}

func (_c *MockSDK_CreateClients_Call) Run(run func(ctx context.Context, client []sdk.Client, domainID string, token string)) *MockSDK_CreateClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sdk.Client), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_CreateClients_Call) Return(clients []sdk.Client, sDKError errors.SDKError) *MockSDK_CreateClients_Call {
	_c.Call.Return(clients, sDKError)
	return _c
}

func (_c *MockSDK_CreateClients_Call) RunAndReturn(run func(ctx context.Context, client []sdk.Client, domainID string, token string) ([]sdk.Client, errors.SDKError)) *MockSDK_CreateClients_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDomain provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateDomain(ctx context.Context, d sdk.Domain, token string) (sdk.Domain, errors.SDKError) {
	ret := _mock.Called(ctx, d, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Domain, string) (sdk.Domain, errors.SDKError)); ok {
		return returnFunc(ctx, d, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Domain, string) sdk.Domain); ok {
		r0 = returnFunc(ctx, d, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Domain, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDomain'
type MockSDK_CreateDomain_Call struct {
	*mock.Call
}

// CreateDomain is a helper method to define mock.On call
//   - ctx
//   - d
//   - token
func (_e *MockSDK_Expecter) CreateDomain(ctx interface{}, d interface{}, token interface{}) *MockSDK_CreateDomain_Call {
	return &MockSDK_CreateDomain_Call{Call: _e.mock.On("CreateDomain", ctx, d, token)}
}

func (_c *MockSDK_CreateDomain_Call) Run(run func(ctx context.Context, d sdk.Domain, token string)) *MockSDK_CreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Domain), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_CreateDomain_Call) Return(domain sdk.Domain, sDKError errors.SDKError) *MockSDK_CreateDomain_Call {
	_c.Call.Return(domain, sDKError)
	return _c
}

func (_c *MockSDK_CreateDomain_Call) RunAndReturn(run func(ctx context.Context, d sdk.Domain, token string) (sdk.Domain, errors.SDKError)) *MockSDK_CreateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDomainRole provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateDomainRole(ctx context.Context, id string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, rq, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, sdk.RoleReq, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, rq, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, sdk.RoleReq, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, rq, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, sdk.RoleReq, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, rq, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateDomainRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDomainRole'
type MockSDK_CreateDomainRole_Call struct {
	*mock.Call
}

// CreateDomainRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - rq
//   - token
func (_e *MockSDK_Expecter) CreateDomainRole(ctx interface{}, id interface{}, rq interface{}, token interface{}) *MockSDK_CreateDomainRole_Call {
	return &MockSDK_CreateDomainRole_Call{Call: _e.mock.On("CreateDomainRole", ctx, id, rq, token)}
}

func (_c *MockSDK_CreateDomainRole_Call) Run(run func(ctx context.Context, id string, rq sdk.RoleReq, token string)) *MockSDK_CreateDomainRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sdk.RoleReq), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_CreateDomainRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_CreateDomainRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_CreateDomainRole_Call) RunAndReturn(run func(ctx context.Context, id string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError)) *MockSDK_CreateDomainRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateGroup(ctx context.Context, group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _mock.Called(ctx, group, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Group, string, string) (sdk.Group, errors.SDKError)); ok {
		return returnFunc(ctx, group, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Group, string, string) sdk.Group); ok {
		r0 = returnFunc(ctx, group, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Group, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, group, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockSDK_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx
//   - group
//   - domainID
//   - token
func (_e *MockSDK_Expecter) CreateGroup(ctx interface{}, group interface{}, domainID interface{}, token interface{}) *MockSDK_CreateGroup_Call {
	return &MockSDK_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx, group, domainID, token)}
}

func (_c *MockSDK_CreateGroup_Call) Run(run func(ctx context.Context, group sdk.Group, domainID string, token string)) *MockSDK_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Group), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_CreateGroup_Call) Return(group1 sdk.Group, sDKError errors.SDKError) *MockSDK_CreateGroup_Call {
	_c.Call.Return(group1, sDKError)
	return _c
}

func (_c *MockSDK_CreateGroup_Call) RunAndReturn(run func(ctx context.Context, group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError)) *MockSDK_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupRole provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateGroupRole(ctx context.Context, id string, domainID string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, rq, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.RoleReq, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, rq, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.RoleReq, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, domainID, rq, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.RoleReq, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, rq, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateGroupRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupRole'
type MockSDK_CreateGroupRole_Call struct {
	*mock.Call
}

// CreateGroupRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - rq
//   - token
func (_e *MockSDK_Expecter) CreateGroupRole(ctx interface{}, id interface{}, domainID interface{}, rq interface{}, token interface{}) *MockSDK_CreateGroupRole_Call {
	return &MockSDK_CreateGroupRole_Call{Call: _e.mock.On("CreateGroupRole", ctx, id, domainID, rq, token)}
}

func (_c *MockSDK_CreateGroupRole_Call) Run(run func(ctx context.Context, id string, domainID string, rq sdk.RoleReq, token string)) *MockSDK_CreateGroupRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.RoleReq), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_CreateGroupRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_CreateGroupRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_CreateGroupRole_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError)) *MockSDK_CreateGroupRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateToken provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateToken(ctx context.Context, lt sdk.Login) (sdk.Token, errors.SDKError) {
	ret := _mock.Called(ctx, lt)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Login) (sdk.Token, errors.SDKError)); ok {
		return returnFunc(ctx, lt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Login) sdk.Token); ok {
		r0 = returnFunc(ctx, lt)
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Login) errors.SDKError); ok {
		r1 = returnFunc(ctx, lt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockSDK_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx
//   - lt
func (_e *MockSDK_Expecter) CreateToken(ctx interface{}, lt interface{}) *MockSDK_CreateToken_Call {
	return &MockSDK_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, lt)}
}

func (_c *MockSDK_CreateToken_Call) Run(run func(ctx context.Context, lt sdk.Login)) *MockSDK_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Login))
	})
	return _c
}

func (_c *MockSDK_CreateToken_Call) Return(token sdk.Token, sDKError errors.SDKError) *MockSDK_CreateToken_Call {
	_c.Call.Return(token, sDKError)
	return _c
}

func (_c *MockSDK_CreateToken_Call) RunAndReturn(run func(ctx context.Context, lt sdk.Login) (sdk.Token, errors.SDKError)) *MockSDK_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockSDK
func (_mock *MockSDK) CreateUser(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, user, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, user, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) sdk.User); ok {
		r0 = returnFunc(ctx, user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.User, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockSDK_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - user
//   - token
func (_e *MockSDK_Expecter) CreateUser(ctx interface{}, user interface{}, token interface{}) *MockSDK_CreateUser_Call {
	return &MockSDK_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user, token)}
}

func (_c *MockSDK_CreateUser_Call) Run(run func(ctx context.Context, user sdk.User, token string)) *MockSDK_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.User), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_CreateUser_Call) Return(user1 sdk.User, sDKError errors.SDKError) *MockSDK_CreateUser_Call {
	_c.Call.Return(user1, sDKError)
	return _c
}

func (_c *MockSDK_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError)) *MockSDK_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChannel provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteChannel(ctx context.Context, id string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DeleteChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChannel'
type MockSDK_DeleteChannel_Call struct {
	*mock.Call
}

// DeleteChannel is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DeleteChannel(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_DeleteChannel_Call {
	return &MockSDK_DeleteChannel_Call{Call: _e.mock.On("DeleteChannel", ctx, id, domainID, token)}
}

func (_c *MockSDK_DeleteChannel_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_DeleteChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteChannel_Call) Return(sDKError errors.SDKError) *MockSDK_DeleteChannel_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DeleteChannel_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) errors.SDKError) *MockSDK_DeleteChannel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClient provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteClient(ctx context.Context, id string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DeleteClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClient'
type MockSDK_DeleteClient_Call struct {
	*mock.Call
}

// DeleteClient is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DeleteClient(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_DeleteClient_Call {
	return &MockSDK_DeleteClient_Call{Call: _e.mock.On("DeleteClient", ctx, id, domainID, token)}
}

func (_c *MockSDK_DeleteClient_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_DeleteClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteClient_Call) Return(sDKError errors.SDKError) *MockSDK_DeleteClient_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DeleteClient_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) errors.SDKError) *MockSDK_DeleteClient_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientRole provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteClientRole(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientRole")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DeleteClientRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientRole'
type MockSDK_DeleteClientRole_Call struct {
	*mock.Call
}

// DeleteClientRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DeleteClientRole(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_DeleteClientRole_Call {
	return &MockSDK_DeleteClientRole_Call{Call: _e.mock.On("DeleteClientRole", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_DeleteClientRole_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_DeleteClientRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteClientRole_Call) Return(sDKError errors.SDKError) *MockSDK_DeleteClientRole_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DeleteClientRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError) *MockSDK_DeleteClientRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDomainRole provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteDomainRole(ctx context.Context, id string, roleID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainRole")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DeleteDomainRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDomainRole'
type MockSDK_DeleteDomainRole_Call struct {
	*mock.Call
}

// DeleteDomainRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - token
func (_e *MockSDK_Expecter) DeleteDomainRole(ctx interface{}, id interface{}, roleID interface{}, token interface{}) *MockSDK_DeleteDomainRole_Call {
	return &MockSDK_DeleteDomainRole_Call{Call: _e.mock.On("DeleteDomainRole", ctx, id, roleID, token)}
}

func (_c *MockSDK_DeleteDomainRole_Call) Run(run func(ctx context.Context, id string, roleID string, token string)) *MockSDK_DeleteDomainRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteDomainRole_Call) Return(sDKError errors.SDKError) *MockSDK_DeleteDomainRole_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DeleteDomainRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, token string) errors.SDKError) *MockSDK_DeleteDomainRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteGroup(ctx context.Context, id string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockSDK_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DeleteGroup(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_DeleteGroup_Call {
	return &MockSDK_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, id, domainID, token)}
}

func (_c *MockSDK_DeleteGroup_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteGroup_Call) Return(sDKError errors.SDKError) *MockSDK_DeleteGroup_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DeleteGroup_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) errors.SDKError) *MockSDK_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupRole provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteGroupRole(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupRole")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DeleteGroupRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupRole'
type MockSDK_DeleteGroupRole_Call struct {
	*mock.Call
}

// DeleteGroupRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DeleteGroupRole(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_DeleteGroupRole_Call {
	return &MockSDK_DeleteGroupRole_Call{Call: _e.mock.On("DeleteGroupRole", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_DeleteGroupRole_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_DeleteGroupRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteGroupRole_Call) Return(sDKError errors.SDKError) *MockSDK_DeleteGroupRole_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DeleteGroupRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError) *MockSDK_DeleteGroupRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvitation provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteInvitation(ctx context.Context, userID string, domainID string, token string) error {
	ret := _mock.Called(ctx, userID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, userID, domainID, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSDK_DeleteInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvitation'
type MockSDK_DeleteInvitation_Call struct {
	*mock.Call
}

// DeleteInvitation is a helper method to define mock.On call
//   - ctx
//   - userID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DeleteInvitation(ctx interface{}, userID interface{}, domainID interface{}, token interface{}) *MockSDK_DeleteInvitation_Call {
	return &MockSDK_DeleteInvitation_Call{Call: _e.mock.On("DeleteInvitation", ctx, userID, domainID, token)}
}

func (_c *MockSDK_DeleteInvitation_Call) Run(run func(ctx context.Context, userID string, domainID string, token string)) *MockSDK_DeleteInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteInvitation_Call) Return(err error) *MockSDK_DeleteInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSDK_DeleteInvitation_Call) RunAndReturn(run func(ctx context.Context, userID string, domainID string, token string) error) *MockSDK_DeleteInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockSDK
func (_mock *MockSDK) DeleteUser(ctx context.Context, id string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockSDK_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - token
func (_e *MockSDK_Expecter) DeleteUser(ctx interface{}, id interface{}, token interface{}) *MockSDK_DeleteUser_Call {
	return &MockSDK_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id, token)}
}

func (_c *MockSDK_DeleteUser_Call) Run(run func(ctx context.Context, id string, token string)) *MockSDK_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_DeleteUser_Call) Return(sDKError errors.SDKError) *MockSDK_DeleteUser_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id string, token string) errors.SDKError) *MockSDK_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DisableChannel provides a mock function for the type MockSDK
func (_mock *MockSDK) DisableChannel(ctx context.Context, id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Channel); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DisableChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableChannel'
type MockSDK_DisableChannel_Call struct {
	*mock.Call
}

// DisableChannel is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DisableChannel(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_DisableChannel_Call {
	return &MockSDK_DisableChannel_Call{Call: _e.mock.On("DisableChannel", ctx, id, domainID, token)}
}

func (_c *MockSDK_DisableChannel_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_DisableChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DisableChannel_Call) Return(channel sdk.Channel, sDKError errors.SDKError) *MockSDK_DisableChannel_Call {
	_c.Call.Return(channel, sDKError)
	return _c
}

func (_c *MockSDK_DisableChannel_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Channel, errors.SDKError)) *MockSDK_DisableChannel_Call {
	_c.Call.Return(run)
	return _c
}

// DisableClient provides a mock function for the type MockSDK
func (_mock *MockSDK) DisableClient(ctx context.Context, id string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Client); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DisableClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableClient'
type MockSDK_DisableClient_Call struct {
	*mock.Call
}

// DisableClient is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DisableClient(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_DisableClient_Call {
	return &MockSDK_DisableClient_Call{Call: _e.mock.On("DisableClient", ctx, id, domainID, token)}
}

func (_c *MockSDK_DisableClient_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_DisableClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DisableClient_Call) Return(client sdk.Client, sDKError errors.SDKError) *MockSDK_DisableClient_Call {
	_c.Call.Return(client, sDKError)
	return _c
}

func (_c *MockSDK_DisableClient_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Client, errors.SDKError)) *MockSDK_DisableClient_Call {
	_c.Call.Return(run)
	return _c
}

// DisableDomain provides a mock function for the type MockSDK
func (_mock *MockSDK) DisableDomain(ctx context.Context, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableDomain")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DisableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableDomain'
type MockSDK_DisableDomain_Call struct {
	*mock.Call
}

// DisableDomain is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DisableDomain(ctx interface{}, domainID interface{}, token interface{}) *MockSDK_DisableDomain_Call {
	return &MockSDK_DisableDomain_Call{Call: _e.mock.On("DisableDomain", ctx, domainID, token)}
}

func (_c *MockSDK_DisableDomain_Call) Run(run func(ctx context.Context, domainID string, token string)) *MockSDK_DisableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_DisableDomain_Call) Return(sDKError errors.SDKError) *MockSDK_DisableDomain_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DisableDomain_Call) RunAndReturn(run func(ctx context.Context, domainID string, token string) errors.SDKError) *MockSDK_DisableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DisableGroup provides a mock function for the type MockSDK
func (_mock *MockSDK) DisableGroup(ctx context.Context, id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Group, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Group); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DisableGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableGroup'
type MockSDK_DisableGroup_Call struct {
	*mock.Call
}

// DisableGroup is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DisableGroup(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_DisableGroup_Call {
	return &MockSDK_DisableGroup_Call{Call: _e.mock.On("DisableGroup", ctx, id, domainID, token)}
}

func (_c *MockSDK_DisableGroup_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_DisableGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DisableGroup_Call) Return(group sdk.Group, sDKError errors.SDKError) *MockSDK_DisableGroup_Call {
	_c.Call.Return(group, sDKError)
	return _c
}

func (_c *MockSDK_DisableGroup_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Group, errors.SDKError)) *MockSDK_DisableGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DisableUser provides a mock function for the type MockSDK
func (_mock *MockSDK) DisableUser(ctx context.Context, id string, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, id, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, id, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) sdk.User); ok {
		r0 = returnFunc(ctx, id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DisableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableUser'
type MockSDK_DisableUser_Call struct {
	*mock.Call
}

// DisableUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - token
func (_e *MockSDK_Expecter) DisableUser(ctx interface{}, id interface{}, token interface{}) *MockSDK_DisableUser_Call {
	return &MockSDK_DisableUser_Call{Call: _e.mock.On("DisableUser", ctx, id, token)}
}

func (_c *MockSDK_DisableUser_Call) Run(run func(ctx context.Context, id string, token string)) *MockSDK_DisableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_DisableUser_Call) Return(user sdk.User, sDKError errors.SDKError) *MockSDK_DisableUser_Call {
	_c.Call.Return(user, sDKError)
	return _c
}

func (_c *MockSDK_DisableUser_Call) RunAndReturn(run func(ctx context.Context, id string, token string) (sdk.User, errors.SDKError)) *MockSDK_DisableUser_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockSDK
func (_mock *MockSDK) Disconnect(ctx context.Context, conn sdk.Connection, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, conn, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Connection, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, conn, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockSDK_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx
//   - conn
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Disconnect(ctx interface{}, conn interface{}, domainID interface{}, token interface{}) *MockSDK_Disconnect_Call {
	return &MockSDK_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx, conn, domainID, token)}
}

func (_c *MockSDK_Disconnect_Call) Run(run func(ctx context.Context, conn sdk.Connection, domainID string, token string)) *MockSDK_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Connection), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Disconnect_Call) Return(sDKError errors.SDKError) *MockSDK_Disconnect_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_Disconnect_Call) RunAndReturn(run func(ctx context.Context, conn sdk.Connection, domainID string, token string) errors.SDKError) *MockSDK_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectClients provides a mock function for the type MockSDK
func (_mock *MockSDK) DisconnectClients(ctx context.Context, channelID string, clientIDs []string, connTypes []string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, channelID, clientIDs, connTypes, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectClients")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, channelID, clientIDs, connTypes, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_DisconnectClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectClients'
type MockSDK_DisconnectClients_Call struct {
	*mock.Call
}

// DisconnectClients is a helper method to define mock.On call
//   - ctx
//   - channelID
//   - clientIDs
//   - connTypes
//   - domainID
//   - token
func (_e *MockSDK_Expecter) DisconnectClients(ctx interface{}, channelID interface{}, clientIDs interface{}, connTypes interface{}, domainID interface{}, token interface{}) *MockSDK_DisconnectClients_Call {
	return &MockSDK_DisconnectClients_Call{Call: _e.mock.On("DisconnectClients", ctx, channelID, clientIDs, connTypes, domainID, token)}
}

func (_c *MockSDK_DisconnectClients_Call) Run(run func(ctx context.Context, channelID string, clientIDs []string, connTypes []string, domainID string, token string)) *MockSDK_DisconnectClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].([]string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_DisconnectClients_Call) Return(sDKError errors.SDKError) *MockSDK_DisconnectClients_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_DisconnectClients_Call) RunAndReturn(run func(ctx context.Context, channelID string, clientIDs []string, connTypes []string, domainID string, token string) errors.SDKError) *MockSDK_DisconnectClients_Call {
	_c.Call.Return(run)
	return _c
}

// Domain provides a mock function for the type MockSDK
func (_mock *MockSDK) Domain(ctx context.Context, domainID string, token string) (sdk.Domain, errors.SDKError) {
	ret := _mock.Called(ctx, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Domain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (sdk.Domain, errors.SDKError)); ok {
		return returnFunc(ctx, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) sdk.Domain); ok {
		r0 = returnFunc(ctx, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Domain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Domain'
type MockSDK_Domain_Call struct {
	*mock.Call
}

// Domain is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Domain(ctx interface{}, domainID interface{}, token interface{}) *MockSDK_Domain_Call {
	return &MockSDK_Domain_Call{Call: _e.mock.On("Domain", ctx, domainID, token)}
}

func (_c *MockSDK_Domain_Call) Run(run func(ctx context.Context, domainID string, token string)) *MockSDK_Domain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_Domain_Call) Return(domain sdk.Domain, sDKError errors.SDKError) *MockSDK_Domain_Call {
	_c.Call.Return(domain, sDKError)
	return _c
}

func (_c *MockSDK_Domain_Call) RunAndReturn(run func(ctx context.Context, domainID string, token string) (sdk.Domain, errors.SDKError)) *MockSDK_Domain_Call {
	_c.Call.Return(run)
	return _c
}

// DomainRole provides a mock function for the type MockSDK
func (_mock *MockSDK) DomainRole(ctx context.Context, id string, roleID string, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, roleID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DomainRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainRole'
type MockSDK_DomainRole_Call struct {
	*mock.Call
}

// DomainRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - token
func (_e *MockSDK_Expecter) DomainRole(ctx interface{}, id interface{}, roleID interface{}, token interface{}) *MockSDK_DomainRole_Call {
	return &MockSDK_DomainRole_Call{Call: _e.mock.On("DomainRole", ctx, id, roleID, token)}
}

func (_c *MockSDK_DomainRole_Call) Run(run func(ctx context.Context, id string, roleID string, token string)) *MockSDK_DomainRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DomainRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_DomainRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_DomainRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, token string) (sdk.Role, errors.SDKError)) *MockSDK_DomainRole_Call {
	_c.Call.Return(run)
	return _c
}

// DomainRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) DomainRoleActions(ctx context.Context, id string, roleID string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DomainRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainRoleActions'
type MockSDK_DomainRoleActions_Call struct {
	*mock.Call
}

// DomainRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - token
func (_e *MockSDK_Expecter) DomainRoleActions(ctx interface{}, id interface{}, roleID interface{}, token interface{}) *MockSDK_DomainRoleActions_Call {
	return &MockSDK_DomainRoleActions_Call{Call: _e.mock.On("DomainRoleActions", ctx, id, roleID, token)}
}

func (_c *MockSDK_DomainRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, token string)) *MockSDK_DomainRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DomainRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_DomainRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_DomainRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, token string) ([]string, errors.SDKError)) *MockSDK_DomainRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// DomainRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) DomainRoleMembers(ctx context.Context, id string, roleID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRoleMembers")
	}

	var r0 sdk.RoleMembersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.RoleMembersPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.RoleMembersPage); ok {
		r0 = returnFunc(ctx, id, roleID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RoleMembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DomainRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainRoleMembers'
type MockSDK_DomainRoleMembers_Call struct {
	*mock.Call
}

// DomainRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - pm
//   - token
func (_e *MockSDK_Expecter) DomainRoleMembers(ctx interface{}, id interface{}, roleID interface{}, pm interface{}, token interface{}) *MockSDK_DomainRoleMembers_Call {
	return &MockSDK_DomainRoleMembers_Call{Call: _e.mock.On("DomainRoleMembers", ctx, id, roleID, pm, token)}
}

func (_c *MockSDK_DomainRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, pm sdk.PageMetadata, token string)) *MockSDK_DomainRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_DomainRoleMembers_Call) Return(roleMembersPage sdk.RoleMembersPage, sDKError errors.SDKError) *MockSDK_DomainRoleMembers_Call {
	_c.Call.Return(roleMembersPage, sDKError)
	return _c
}

func (_c *MockSDK_DomainRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError)) *MockSDK_DomainRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// DomainRoles provides a mock function for the type MockSDK
func (_mock *MockSDK) DomainRoles(ctx context.Context, id string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRoles")
	}

	var r0 sdk.RolesPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, sdk.PageMetadata, string) (sdk.RolesPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, sdk.PageMetadata, string) sdk.RolesPage); ok {
		r0 = returnFunc(ctx, id, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RolesPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_DomainRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainRoles'
type MockSDK_DomainRoles_Call struct {
	*mock.Call
}

// DomainRoles is a helper method to define mock.On call
//   - ctx
//   - id
//   - pm
//   - token
func (_e *MockSDK_Expecter) DomainRoles(ctx interface{}, id interface{}, pm interface{}, token interface{}) *MockSDK_DomainRoles_Call {
	return &MockSDK_DomainRoles_Call{Call: _e.mock.On("DomainRoles", ctx, id, pm, token)}
}

func (_c *MockSDK_DomainRoles_Call) Run(run func(ctx context.Context, id string, pm sdk.PageMetadata, token string)) *MockSDK_DomainRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sdk.PageMetadata), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_DomainRoles_Call) Return(rolesPage sdk.RolesPage, sDKError errors.SDKError) *MockSDK_DomainRoles_Call {
	_c.Call.Return(rolesPage, sDKError)
	return _c
}

func (_c *MockSDK_DomainRoles_Call) RunAndReturn(run func(ctx context.Context, id string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError)) *MockSDK_DomainRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Domains provides a mock function for the type MockSDK
func (_mock *MockSDK) Domains(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.DomainsPage, errors.SDKError) {
	ret := _mock.Called(ctx, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Domains")
	}

	var r0 sdk.DomainsPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) (sdk.DomainsPage, errors.SDKError)); ok {
		return returnFunc(ctx, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) sdk.DomainsPage); ok {
		r0 = returnFunc(ctx, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.DomainsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Domains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Domains'
type MockSDK_Domains_Call struct {
	*mock.Call
}

// Domains is a helper method to define mock.On call
//   - ctx
//   - pm
//   - token
func (_e *MockSDK_Expecter) Domains(ctx interface{}, pm interface{}, token interface{}) *MockSDK_Domains_Call {
	return &MockSDK_Domains_Call{Call: _e.mock.On("Domains", ctx, pm, token)}
}

func (_c *MockSDK_Domains_Call) Run(run func(ctx context.Context, pm sdk.PageMetadata, token string)) *MockSDK_Domains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.PageMetadata), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_Domains_Call) Return(domainsPage sdk.DomainsPage, sDKError errors.SDKError) *MockSDK_Domains_Call {
	_c.Call.Return(domainsPage, sDKError)
	return _c
}

func (_c *MockSDK_Domains_Call) RunAndReturn(run func(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.DomainsPage, errors.SDKError)) *MockSDK_Domains_Call {
	_c.Call.Return(run)
	return _c
}

// EnableChannel provides a mock function for the type MockSDK
func (_mock *MockSDK) EnableChannel(ctx context.Context, id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Channel); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_EnableChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableChannel'
type MockSDK_EnableChannel_Call struct {
	*mock.Call
}

// EnableChannel is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) EnableChannel(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_EnableChannel_Call {
	return &MockSDK_EnableChannel_Call{Call: _e.mock.On("EnableChannel", ctx, id, domainID, token)}
}

func (_c *MockSDK_EnableChannel_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_EnableChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_EnableChannel_Call) Return(channel sdk.Channel, sDKError errors.SDKError) *MockSDK_EnableChannel_Call {
	_c.Call.Return(channel, sDKError)
	return _c
}

func (_c *MockSDK_EnableChannel_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Channel, errors.SDKError)) *MockSDK_EnableChannel_Call {
	_c.Call.Return(run)
	return _c
}

// EnableClient provides a mock function for the type MockSDK
func (_mock *MockSDK) EnableClient(ctx context.Context, id string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Client); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_EnableClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableClient'
type MockSDK_EnableClient_Call struct {
	*mock.Call
}

// EnableClient is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) EnableClient(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_EnableClient_Call {
	return &MockSDK_EnableClient_Call{Call: _e.mock.On("EnableClient", ctx, id, domainID, token)}
}

func (_c *MockSDK_EnableClient_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_EnableClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_EnableClient_Call) Return(client sdk.Client, sDKError errors.SDKError) *MockSDK_EnableClient_Call {
	_c.Call.Return(client, sDKError)
	return _c
}

func (_c *MockSDK_EnableClient_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Client, errors.SDKError)) *MockSDK_EnableClient_Call {
	_c.Call.Return(run)
	return _c
}

// EnableDomain provides a mock function for the type MockSDK
func (_mock *MockSDK) EnableDomain(ctx context.Context, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableDomain")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_EnableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableDomain'
type MockSDK_EnableDomain_Call struct {
	*mock.Call
}

// EnableDomain is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - token
func (_e *MockSDK_Expecter) EnableDomain(ctx interface{}, domainID interface{}, token interface{}) *MockSDK_EnableDomain_Call {
	return &MockSDK_EnableDomain_Call{Call: _e.mock.On("EnableDomain", ctx, domainID, token)}
}

func (_c *MockSDK_EnableDomain_Call) Run(run func(ctx context.Context, domainID string, token string)) *MockSDK_EnableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_EnableDomain_Call) Return(sDKError errors.SDKError) *MockSDK_EnableDomain_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_EnableDomain_Call) RunAndReturn(run func(ctx context.Context, domainID string, token string) errors.SDKError) *MockSDK_EnableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// EnableGroup provides a mock function for the type MockSDK
func (_mock *MockSDK) EnableGroup(ctx context.Context, id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Group, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Group); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_EnableGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableGroup'
type MockSDK_EnableGroup_Call struct {
	*mock.Call
}

// EnableGroup is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) EnableGroup(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_EnableGroup_Call {
	return &MockSDK_EnableGroup_Call{Call: _e.mock.On("EnableGroup", ctx, id, domainID, token)}
}

func (_c *MockSDK_EnableGroup_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_EnableGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_EnableGroup_Call) Return(group sdk.Group, sDKError errors.SDKError) *MockSDK_EnableGroup_Call {
	_c.Call.Return(group, sDKError)
	return _c
}

func (_c *MockSDK_EnableGroup_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Group, errors.SDKError)) *MockSDK_EnableGroup_Call {
	_c.Call.Return(run)
	return _c
}

// EnableUser provides a mock function for the type MockSDK
func (_mock *MockSDK) EnableUser(ctx context.Context, id string, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, id, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, id, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) sdk.User); ok {
		r0 = returnFunc(ctx, id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_EnableUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableUser'
type MockSDK_EnableUser_Call struct {
	*mock.Call
}

// EnableUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - token
func (_e *MockSDK_Expecter) EnableUser(ctx interface{}, id interface{}, token interface{}) *MockSDK_EnableUser_Call {
	return &MockSDK_EnableUser_Call{Call: _e.mock.On("EnableUser", ctx, id, token)}
}

func (_c *MockSDK_EnableUser_Call) Run(run func(ctx context.Context, id string, token string)) *MockSDK_EnableUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_EnableUser_Call) Return(user sdk.User, sDKError errors.SDKError) *MockSDK_EnableUser_Call {
	_c.Call.Return(user, sDKError)
	return _c
}

func (_c *MockSDK_EnableUser_Call) RunAndReturn(run func(ctx context.Context, id string, token string) (sdk.User, errors.SDKError)) *MockSDK_EnableUser_Call {
	_c.Call.Return(run)
	return _c
}

// FreezeDomain provides a mock function for the type MockSDK
func (_mock *MockSDK) FreezeDomain(ctx context.Context, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for FreezeDomain")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_FreezeDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FreezeDomain'
type MockSDK_FreezeDomain_Call struct {
	*mock.Call
}

// FreezeDomain is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - token
func (_e *MockSDK_Expecter) FreezeDomain(ctx interface{}, domainID interface{}, token interface{}) *MockSDK_FreezeDomain_Call {
	return &MockSDK_FreezeDomain_Call{Call: _e.mock.On("FreezeDomain", ctx, domainID, token)}
}

func (_c *MockSDK_FreezeDomain_Call) Run(run func(ctx context.Context, domainID string, token string)) *MockSDK_FreezeDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_FreezeDomain_Call) Return(sDKError errors.SDKError) *MockSDK_FreezeDomain_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_FreezeDomain_Call) RunAndReturn(run func(ctx context.Context, domainID string, token string) errors.SDKError) *MockSDK_FreezeDomain_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function for the type MockSDK
func (_mock *MockSDK) Group(ctx context.Context, id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Group, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Group); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockSDK_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Group(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_Group_Call {
	return &MockSDK_Group_Call{Call: _e.mock.On("Group", ctx, id, domainID, token)}
}

func (_c *MockSDK_Group_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Group_Call) Return(group sdk.Group, sDKError errors.SDKError) *MockSDK_Group_Call {
	_c.Call.Return(group, sDKError)
	return _c
}

func (_c *MockSDK_Group_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) (sdk.Group, errors.SDKError)) *MockSDK_Group_Call {
	_c.Call.Return(run)
	return _c
}

// GroupRole provides a mock function for the type MockSDK
func (_mock *MockSDK) GroupRole(ctx context.Context, id string, roleID string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_GroupRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupRole'
type MockSDK_GroupRole_Call struct {
	*mock.Call
}

// GroupRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) GroupRole(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_GroupRole_Call {
	return &MockSDK_GroupRole_Call{Call: _e.mock.On("GroupRole", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_GroupRole_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_GroupRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_GroupRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_GroupRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_GroupRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) (sdk.Role, errors.SDKError)) *MockSDK_GroupRole_Call {
	_c.Call.Return(run)
	return _c
}

// GroupRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) GroupRoleActions(ctx context.Context, id string, roleID string, domainID string, token string) ([]string, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) ([]string, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) []string); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_GroupRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupRoleActions'
type MockSDK_GroupRoleActions_Call struct {
	*mock.Call
}

// GroupRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) GroupRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_GroupRoleActions_Call {
	return &MockSDK_GroupRoleActions_Call{Call: _e.mock.On("GroupRoleActions", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_GroupRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_GroupRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_GroupRoleActions_Call) Return(strings []string, sDKError errors.SDKError) *MockSDK_GroupRoleActions_Call {
	_c.Call.Return(strings, sDKError)
	return _c
}

func (_c *MockSDK_GroupRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) ([]string, errors.SDKError)) *MockSDK_GroupRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// GroupRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) GroupRoleMembers(ctx context.Context, id string, roleID string, domainID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRoleMembers")
	}

	var r0 sdk.RoleMembersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, sdk.PageMetadata, string) (sdk.RoleMembersPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, sdk.PageMetadata, string) sdk.RoleMembersPage); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RoleMembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_GroupRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupRoleMembers'
type MockSDK_GroupRoleMembers_Call struct {
	*mock.Call
}

// GroupRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) GroupRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_GroupRoleMembers_Call {
	return &MockSDK_GroupRoleMembers_Call{Call: _e.mock.On("GroupRoleMembers", ctx, id, roleID, domainID, pm, token)}
}

func (_c *MockSDK_GroupRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_GroupRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(sdk.PageMetadata), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_GroupRoleMembers_Call) Return(roleMembersPage sdk.RoleMembersPage, sDKError errors.SDKError) *MockSDK_GroupRoleMembers_Call {
	_c.Call.Return(roleMembersPage, sDKError)
	return _c
}

func (_c *MockSDK_GroupRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError)) *MockSDK_GroupRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GroupRoles provides a mock function for the type MockSDK
func (_mock *MockSDK) GroupRoles(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRoles")
	}

	var r0 sdk.RolesPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.RolesPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.RolesPage); ok {
		r0 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RolesPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_GroupRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupRoles'
type MockSDK_GroupRoles_Call struct {
	*mock.Call
}

// GroupRoles is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) GroupRoles(ctx interface{}, id interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_GroupRoles_Call {
	return &MockSDK_GroupRoles_Call{Call: _e.mock.On("GroupRoles", ctx, id, domainID, pm, token)}
}

func (_c *MockSDK_GroupRoles_Call) Run(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_GroupRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_GroupRoles_Call) Return(rolesPage sdk.RolesPage, sDKError errors.SDKError) *MockSDK_GroupRoles_Call {
	_c.Call.Return(rolesPage, sDKError)
	return _c
}

func (_c *MockSDK_GroupRoles_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError)) *MockSDK_GroupRoles_Call {
	_c.Call.Return(run)
	return _c
}

// Groups provides a mock function for the type MockSDK
func (_mock *MockSDK) Groups(ctx context.Context, pm sdk.PageMetadata, domainID string, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _mock.Called(ctx, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Groups")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return returnFunc(ctx, pm, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string, string) sdk.GroupsPage); ok {
		r0 = returnFunc(ctx, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Groups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Groups'
type MockSDK_Groups_Call struct {
	*mock.Call
}

// Groups is a helper method to define mock.On call
//   - ctx
//   - pm
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Groups(ctx interface{}, pm interface{}, domainID interface{}, token interface{}) *MockSDK_Groups_Call {
	return &MockSDK_Groups_Call{Call: _e.mock.On("Groups", ctx, pm, domainID, token)}
}

func (_c *MockSDK_Groups_Call) Run(run func(ctx context.Context, pm sdk.PageMetadata, domainID string, token string)) *MockSDK_Groups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.PageMetadata), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Groups_Call) Return(groupsPage sdk.GroupsPage, sDKError errors.SDKError) *MockSDK_Groups_Call {
	_c.Call.Return(groupsPage, sDKError)
	return _c
}

func (_c *MockSDK_Groups_Call) RunAndReturn(run func(ctx context.Context, pm sdk.PageMetadata, domainID string, token string) (sdk.GroupsPage, errors.SDKError)) *MockSDK_Groups_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function for the type MockSDK
func (_mock *MockSDK) Health(service string) (sdk.HealthInfo, errors.SDKError) {
	ret := _mock.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 sdk.HealthInfo
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) (sdk.HealthInfo, errors.SDKError)); ok {
		return returnFunc(service)
	}
	if returnFunc, ok := ret.Get(0).(func(string) sdk.HealthInfo); ok {
		r0 = returnFunc(service)
	} else {
		r0 = ret.Get(0).(sdk.HealthInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = returnFunc(service)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockSDK_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - service
func (_e *MockSDK_Expecter) Health(service interface{}) *MockSDK_Health_Call {
	return &MockSDK_Health_Call{Call: _e.mock.On("Health", service)}
}

func (_c *MockSDK_Health_Call) Run(run func(service string)) *MockSDK_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSDK_Health_Call) Return(healthInfo sdk.HealthInfo, sDKError errors.SDKError) *MockSDK_Health_Call {
	_c.Call.Return(healthInfo, sDKError)
	return _c
}

func (_c *MockSDK_Health_Call) RunAndReturn(run func(service string) (sdk.HealthInfo, errors.SDKError)) *MockSDK_Health_Call {
	_c.Call.Return(run)
	return _c
}

// Hierarchy provides a mock function for the type MockSDK
func (_mock *MockSDK) Hierarchy(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.GroupsHierarchyPage, errors.SDKError) {
	ret := _mock.Called(ctx, id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Hierarchy")
	}

	var r0 sdk.GroupsHierarchyPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.GroupsHierarchyPage, errors.SDKError)); ok {
		return returnFunc(ctx, id, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.GroupsHierarchyPage); ok {
		r0 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsHierarchyPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Hierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hierarchy'
type MockSDK_Hierarchy_Call struct {
	*mock.Call
}

// Hierarchy is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) Hierarchy(ctx interface{}, id interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_Hierarchy_Call {
	return &MockSDK_Hierarchy_Call{Call: _e.mock.On("Hierarchy", ctx, id, domainID, pm, token)}
}

func (_c *MockSDK_Hierarchy_Call) Run(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_Hierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_Hierarchy_Call) Return(groupsHierarchyPage sdk.GroupsHierarchyPage, sDKError errors.SDKError) *MockSDK_Hierarchy_Call {
	_c.Call.Return(groupsHierarchyPage, sDKError)
	return _c
}

func (_c *MockSDK_Hierarchy_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, pm sdk.PageMetadata, token string) (sdk.GroupsHierarchyPage, errors.SDKError)) *MockSDK_Hierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// Invitation provides a mock function for the type MockSDK
func (_mock *MockSDK) Invitation(ctx context.Context, userID string, domainID string, token string) (sdk.Invitation, error) {
	ret := _mock.Called(ctx, userID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Invitation")
	}

	var r0 sdk.Invitation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Invitation, error)); ok {
		return returnFunc(ctx, userID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Invitation); ok {
		r0 = returnFunc(ctx, userID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Invitation)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, userID, domainID, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSDK_Invitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invitation'
type MockSDK_Invitation_Call struct {
	*mock.Call
}

// Invitation is a helper method to define mock.On call
//   - ctx
//   - userID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) Invitation(ctx interface{}, userID interface{}, domainID interface{}, token interface{}) *MockSDK_Invitation_Call {
	return &MockSDK_Invitation_Call{Call: _e.mock.On("Invitation", ctx, userID, domainID, token)}
}

func (_c *MockSDK_Invitation_Call) Run(run func(ctx context.Context, userID string, domainID string, token string)) *MockSDK_Invitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_Invitation_Call) Return(invitation sdk.Invitation, err error) *MockSDK_Invitation_Call {
	_c.Call.Return(invitation, err)
	return _c
}

func (_c *MockSDK_Invitation_Call) RunAndReturn(run func(ctx context.Context, userID string, domainID string, token string) (sdk.Invitation, error)) *MockSDK_Invitation_Call {
	_c.Call.Return(run)
	return _c
}

// Invitations provides a mock function for the type MockSDK
func (_mock *MockSDK) Invitations(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.InvitationPage, error) {
	ret := _mock.Called(ctx, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Invitations")
	}

	var r0 sdk.InvitationPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) (sdk.InvitationPage, error)); ok {
		return returnFunc(ctx, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) sdk.InvitationPage); ok {
		r0 = returnFunc(ctx, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.InvitationPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.PageMetadata, string) error); ok {
		r1 = returnFunc(ctx, pm, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSDK_Invitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invitations'
type MockSDK_Invitations_Call struct {
	*mock.Call
}

// Invitations is a helper method to define mock.On call
//   - ctx
//   - pm
//   - token
func (_e *MockSDK_Expecter) Invitations(ctx interface{}, pm interface{}, token interface{}) *MockSDK_Invitations_Call {
	return &MockSDK_Invitations_Call{Call: _e.mock.On("Invitations", ctx, pm, token)}
}

func (_c *MockSDK_Invitations_Call) Run(run func(ctx context.Context, pm sdk.PageMetadata, token string)) *MockSDK_Invitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.PageMetadata), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_Invitations_Call) Return(invitations sdk.InvitationPage, err error) *MockSDK_Invitations_Call {
	_c.Call.Return(invitations, err)
	return _c
}

func (_c *MockSDK_Invitations_Call) RunAndReturn(run func(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.InvitationPage, error)) *MockSDK_Invitations_Call {
	_c.Call.Return(run)
	return _c
}

// IssueCert provides a mock function for the type MockSDK
func (_mock *MockSDK) IssueCert(ctx context.Context, clientID string, validity string, domainID string, token string) (sdk.Cert, errors.SDKError) {
	ret := _mock.Called(ctx, clientID, validity, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for IssueCert")
	}

	var r0 sdk.Cert
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (sdk.Cert, errors.SDKError)); ok {
		return returnFunc(ctx, clientID, validity, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) sdk.Cert); ok {
		r0 = returnFunc(ctx, clientID, validity, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Cert)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, clientID, validity, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_IssueCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueCert'
type MockSDK_IssueCert_Call struct {
	*mock.Call
}

// IssueCert is a helper method to define mock.On call
//   - ctx
//   - clientID
//   - validity
//   - domainID
//   - token
func (_e *MockSDK_Expecter) IssueCert(ctx interface{}, clientID interface{}, validity interface{}, domainID interface{}, token interface{}) *MockSDK_IssueCert_Call {
	return &MockSDK_IssueCert_Call{Call: _e.mock.On("IssueCert", ctx, clientID, validity, domainID, token)}
}

func (_c *MockSDK_IssueCert_Call) Run(run func(ctx context.Context, clientID string, validity string, domainID string, token string)) *MockSDK_IssueCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_IssueCert_Call) Return(cert sdk.Cert, sDKError errors.SDKError) *MockSDK_IssueCert_Call {
	_c.Call.Return(cert, sDKError)
	return _c
}

func (_c *MockSDK_IssueCert_Call) RunAndReturn(run func(ctx context.Context, clientID string, validity string, domainID string, token string) (sdk.Cert, errors.SDKError)) *MockSDK_IssueCert_Call {
	_c.Call.Return(run)
	return _c
}

// Journal provides a mock function for the type MockSDK
func (_mock *MockSDK) Journal(ctx context.Context, entityType string, entityID string, domainID string, pm sdk.PageMetadata, token string) (sdk.JournalsPage, error) {
	ret := _mock.Called(ctx, entityType, entityID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Journal")
	}

	var r0 sdk.JournalsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, sdk.PageMetadata, string) (sdk.JournalsPage, error)); ok {
		return returnFunc(ctx, entityType, entityID, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, sdk.PageMetadata, string) sdk.JournalsPage); ok {
		r0 = returnFunc(ctx, entityType, entityID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.JournalsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, sdk.PageMetadata, string) error); ok {
		r1 = returnFunc(ctx, entityType, entityID, domainID, pm, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSDK_Journal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Journal'
type MockSDK_Journal_Call struct {
	*mock.Call
}

// Journal is a helper method to define mock.On call
//   - ctx
//   - entityType
//   - entityID
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) Journal(ctx interface{}, entityType interface{}, entityID interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_Journal_Call {
	return &MockSDK_Journal_Call{Call: _e.mock.On("Journal", ctx, entityType, entityID, domainID, pm, token)}
}

func (_c *MockSDK_Journal_Call) Run(run func(ctx context.Context, entityType string, entityID string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_Journal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(sdk.PageMetadata), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_Journal_Call) Return(journal sdk.JournalsPage, err error) *MockSDK_Journal_Call {
	_c.Call.Return(journal, err)
	return _c
}

func (_c *MockSDK_Journal_Call) RunAndReturn(run func(ctx context.Context, entityType string, entityID string, domainID string, pm sdk.PageMetadata, token string) (sdk.JournalsPage, error)) *MockSDK_Journal_Call {
	_c.Call.Return(run)
	return _c
}

// ListChannelMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) ListChannelMembers(ctx context.Context, channelID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _mock.Called(ctx, channelID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return returnFunc(ctx, channelID, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = returnFunc(ctx, channelID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, channelID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ListChannelMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChannelMembers'
type MockSDK_ListChannelMembers_Call struct {
	*mock.Call
}

// ListChannelMembers is a helper method to define mock.On call
//   - ctx
//   - channelID
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) ListChannelMembers(ctx interface{}, channelID interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_ListChannelMembers_Call {
	return &MockSDK_ListChannelMembers_Call{Call: _e.mock.On("ListChannelMembers", ctx, channelID, domainID, pm, token)}
}

func (_c *MockSDK_ListChannelMembers_Call) Run(run func(ctx context.Context, channelID string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_ListChannelMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_ListChannelMembers_Call) Return(entityMembersPage sdk.EntityMembersPage, sDKError errors.SDKError) *MockSDK_ListChannelMembers_Call {
	_c.Call.Return(entityMembersPage, sDKError)
	return _c
}

func (_c *MockSDK_ListChannelMembers_Call) RunAndReturn(run func(ctx context.Context, channelID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError)) *MockSDK_ListChannelMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListClientMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) ListClientMembers(ctx context.Context, clientID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _mock.Called(ctx, clientID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListClientMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return returnFunc(ctx, clientID, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = returnFunc(ctx, clientID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, clientID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ListClientMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClientMembers'
type MockSDK_ListClientMembers_Call struct {
	*mock.Call
}

// ListClientMembers is a helper method to define mock.On call
//   - ctx
//   - clientID
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) ListClientMembers(ctx interface{}, clientID interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_ListClientMembers_Call {
	return &MockSDK_ListClientMembers_Call{Call: _e.mock.On("ListClientMembers", ctx, clientID, domainID, pm, token)}
}

func (_c *MockSDK_ListClientMembers_Call) Run(run func(ctx context.Context, clientID string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_ListClientMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_ListClientMembers_Call) Return(entityMembersPage sdk.EntityMembersPage, sDKError errors.SDKError) *MockSDK_ListClientMembers_Call {
	_c.Call.Return(entityMembersPage, sDKError)
	return _c
}

func (_c *MockSDK_ListClientMembers_Call) RunAndReturn(run func(ctx context.Context, clientID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError)) *MockSDK_ListClientMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListDomainMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) ListDomainMembers(ctx context.Context, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _mock.Called(ctx, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return returnFunc(ctx, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = returnFunc(ctx, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ListDomainMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDomainMembers'
type MockSDK_ListDomainMembers_Call struct {
	*mock.Call
}

// ListDomainMembers is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) ListDomainMembers(ctx interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_ListDomainMembers_Call {
	return &MockSDK_ListDomainMembers_Call{Call: _e.mock.On("ListDomainMembers", ctx, domainID, pm, token)}
}

func (_c *MockSDK_ListDomainMembers_Call) Run(run func(ctx context.Context, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_ListDomainMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sdk.PageMetadata), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_ListDomainMembers_Call) Return(entityMembersPage sdk.EntityMembersPage, sDKError errors.SDKError) *MockSDK_ListDomainMembers_Call {
	_c.Call.Return(entityMembersPage, sDKError)
	return _c
}

func (_c *MockSDK_ListDomainMembers_Call) RunAndReturn(run func(ctx context.Context, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError)) *MockSDK_ListDomainMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) ListGroupMembers(ctx context.Context, groupID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _mock.Called(ctx, groupID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return returnFunc(ctx, groupID, domainID, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = returnFunc(ctx, groupID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, groupID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ListGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupMembers'
type MockSDK_ListGroupMembers_Call struct {
	*mock.Call
}

// ListGroupMembers is a helper method to define mock.On call
//   - ctx
//   - groupID
//   - domainID
//   - pm
//   - token
func (_e *MockSDK_Expecter) ListGroupMembers(ctx interface{}, groupID interface{}, domainID interface{}, pm interface{}, token interface{}) *MockSDK_ListGroupMembers_Call {
	return &MockSDK_ListGroupMembers_Call{Call: _e.mock.On("ListGroupMembers", ctx, groupID, domainID, pm, token)}
}

func (_c *MockSDK_ListGroupMembers_Call) Run(run func(ctx context.Context, groupID string, domainID string, pm sdk.PageMetadata, token string)) *MockSDK_ListGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(sdk.PageMetadata), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_ListGroupMembers_Call) Return(entityMembersPage sdk.EntityMembersPage, sDKError errors.SDKError) *MockSDK_ListGroupMembers_Call {
	_c.Call.Return(entityMembersPage, sDKError)
	return _c
}

func (_c *MockSDK_ListGroupMembers_Call) RunAndReturn(run func(ctx context.Context, groupID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError)) *MockSDK_ListGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockSDK
func (_mock *MockSDK) RefreshToken(ctx context.Context, token string) (sdk.Token, errors.SDKError) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (sdk.Token, errors.SDKError)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) sdk.Token); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockSDK_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockSDK_Expecter) RefreshToken(ctx interface{}, token interface{}) *MockSDK_RefreshToken_Call {
	return &MockSDK_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, token)}
}

func (_c *MockSDK_RefreshToken_Call) Run(run func(ctx context.Context, token string)) *MockSDK_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSDK_RefreshToken_Call) Return(token1 sdk.Token, sDKError errors.SDKError) *MockSDK_RefreshToken_Call {
	_c.Call.Return(token1, sDKError)
	return _c
}

func (_c *MockSDK_RefreshToken_Call) RunAndReturn(run func(ctx context.Context, token string) (sdk.Token, errors.SDKError)) *MockSDK_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RejectInvitation provides a mock function for the type MockSDK
func (_mock *MockSDK) RejectInvitation(ctx context.Context, domainID string, token string) error {
	ret := _mock.Called(ctx, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RejectInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, domainID, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSDK_RejectInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectInvitation'
type MockSDK_RejectInvitation_Call struct {
	*mock.Call
}

// RejectInvitation is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - token
func (_e *MockSDK_Expecter) RejectInvitation(ctx interface{}, domainID interface{}, token interface{}) *MockSDK_RejectInvitation_Call {
	return &MockSDK_RejectInvitation_Call{Call: _e.mock.On("RejectInvitation", ctx, domainID, token)}
}

func (_c *MockSDK_RejectInvitation_Call) Run(run func(ctx context.Context, domainID string, token string)) *MockSDK_RejectInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_RejectInvitation_Call) Return(err error) *MockSDK_RejectInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSDK_RejectInvitation_Call) RunAndReturn(run func(ctx context.Context, domainID string, token string) error) *MockSDK_RejectInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllChildren provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveAllChildren(ctx context.Context, id string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllChildren")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveAllChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllChildren'
type MockSDK_RemoveAllChildren_Call struct {
	*mock.Call
}

// RemoveAllChildren is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - token
func (_e *MockSDK_Expecter) RemoveAllChildren(ctx interface{}, id interface{}, domainID interface{}, token interface{}) *MockSDK_RemoveAllChildren_Call {
	return &MockSDK_RemoveAllChildren_Call{Call: _e.mock.On("RemoveAllChildren", ctx, id, domainID, token)}
}

func (_c *MockSDK_RemoveAllChildren_Call) Run(run func(ctx context.Context, id string, domainID string, token string)) *MockSDK_RemoveAllChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveAllChildren_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveAllChildren_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveAllChildren_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, token string) errors.SDKError) *MockSDK_RemoveAllChildren_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllClientRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveAllClientRoleActions(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllClientRoleActions")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveAllClientRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllClientRoleActions'
type MockSDK_RemoveAllClientRoleActions_Call struct {
	*mock.Call
}

// RemoveAllClientRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) RemoveAllClientRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_RemoveAllClientRoleActions_Call {
	return &MockSDK_RemoveAllClientRoleActions_Call{Call: _e.mock.On("RemoveAllClientRoleActions", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_RemoveAllClientRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_RemoveAllClientRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveAllClientRoleActions_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveAllClientRoleActions_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveAllClientRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError) *MockSDK_RemoveAllClientRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllClientRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveAllClientRoleMembers(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllClientRoleMembers")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveAllClientRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllClientRoleMembers'
type MockSDK_RemoveAllClientRoleMembers_Call struct {
	*mock.Call
}

// RemoveAllClientRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) RemoveAllClientRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_RemoveAllClientRoleMembers_Call {
	return &MockSDK_RemoveAllClientRoleMembers_Call{Call: _e.mock.On("RemoveAllClientRoleMembers", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_RemoveAllClientRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_RemoveAllClientRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveAllClientRoleMembers_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveAllClientRoleMembers_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveAllClientRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError) *MockSDK_RemoveAllClientRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllDomainRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveAllDomainRoleActions(ctx context.Context, id string, roleID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllDomainRoleActions")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveAllDomainRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllDomainRoleActions'
type MockSDK_RemoveAllDomainRoleActions_Call struct {
	*mock.Call
}

// RemoveAllDomainRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - token
func (_e *MockSDK_Expecter) RemoveAllDomainRoleActions(ctx interface{}, id interface{}, roleID interface{}, token interface{}) *MockSDK_RemoveAllDomainRoleActions_Call {
	return &MockSDK_RemoveAllDomainRoleActions_Call{Call: _e.mock.On("RemoveAllDomainRoleActions", ctx, id, roleID, token)}
}

func (_c *MockSDK_RemoveAllDomainRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, token string)) *MockSDK_RemoveAllDomainRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveAllDomainRoleActions_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveAllDomainRoleActions_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveAllDomainRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, token string) errors.SDKError) *MockSDK_RemoveAllDomainRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllDomainRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveAllDomainRoleMembers(ctx context.Context, id string, roleID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllDomainRoleMembers")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveAllDomainRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllDomainRoleMembers'
type MockSDK_RemoveAllDomainRoleMembers_Call struct {
	*mock.Call
}

// RemoveAllDomainRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - token
func (_e *MockSDK_Expecter) RemoveAllDomainRoleMembers(ctx interface{}, id interface{}, roleID interface{}, token interface{}) *MockSDK_RemoveAllDomainRoleMembers_Call {
	return &MockSDK_RemoveAllDomainRoleMembers_Call{Call: _e.mock.On("RemoveAllDomainRoleMembers", ctx, id, roleID, token)}
}

func (_c *MockSDK_RemoveAllDomainRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, token string)) *MockSDK_RemoveAllDomainRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveAllDomainRoleMembers_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveAllDomainRoleMembers_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveAllDomainRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, token string) errors.SDKError) *MockSDK_RemoveAllDomainRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllGroupRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveAllGroupRoleActions(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllGroupRoleActions")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveAllGroupRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllGroupRoleActions'
type MockSDK_RemoveAllGroupRoleActions_Call struct {
	*mock.Call
}

// RemoveAllGroupRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) RemoveAllGroupRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_RemoveAllGroupRoleActions_Call {
	return &MockSDK_RemoveAllGroupRoleActions_Call{Call: _e.mock.On("RemoveAllGroupRoleActions", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_RemoveAllGroupRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_RemoveAllGroupRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveAllGroupRoleActions_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveAllGroupRoleActions_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveAllGroupRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError) *MockSDK_RemoveAllGroupRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllGroupRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveAllGroupRoleMembers(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllGroupRoleMembers")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveAllGroupRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllGroupRoleMembers'
type MockSDK_RemoveAllGroupRoleMembers_Call struct {
	*mock.Call
}

// RemoveAllGroupRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) RemoveAllGroupRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, token interface{}) *MockSDK_RemoveAllGroupRoleMembers_Call {
	return &MockSDK_RemoveAllGroupRoleMembers_Call{Call: _e.mock.On("RemoveAllGroupRoleMembers", ctx, id, roleID, domainID, token)}
}

func (_c *MockSDK_RemoveAllGroupRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, token string)) *MockSDK_RemoveAllGroupRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveAllGroupRoleMembers_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveAllGroupRoleMembers_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveAllGroupRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, token string) errors.SDKError) *MockSDK_RemoveAllGroupRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannelParent provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveChannelParent(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelParent")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveChannelParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannelParent'
type MockSDK_RemoveChannelParent_Call struct {
	*mock.Call
}

// RemoveChannelParent is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupID
//   - token
func (_e *MockSDK_Expecter) RemoveChannelParent(ctx interface{}, id interface{}, domainID interface{}, groupID interface{}, token interface{}) *MockSDK_RemoveChannelParent_Call {
	return &MockSDK_RemoveChannelParent_Call{Call: _e.mock.On("RemoveChannelParent", ctx, id, domainID, groupID, token)}
}

func (_c *MockSDK_RemoveChannelParent_Call) Run(run func(ctx context.Context, id string, domainID string, groupID string, token string)) *MockSDK_RemoveChannelParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveChannelParent_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveChannelParent_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveChannelParent_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError) *MockSDK_RemoveChannelParent_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChildren provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveChildren(ctx context.Context, id string, domainID string, groupIDs []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupIDs, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChildren")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupIDs, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChildren'
type MockSDK_RemoveChildren_Call struct {
	*mock.Call
}

// RemoveChildren is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupIDs
//   - token
func (_e *MockSDK_Expecter) RemoveChildren(ctx interface{}, id interface{}, domainID interface{}, groupIDs interface{}, token interface{}) *MockSDK_RemoveChildren_Call {
	return &MockSDK_RemoveChildren_Call{Call: _e.mock.On("RemoveChildren", ctx, id, domainID, groupIDs, token)}
}

func (_c *MockSDK_RemoveChildren_Call) Run(run func(ctx context.Context, id string, domainID string, groupIDs []string, token string)) *MockSDK_RemoveChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveChildren_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveChildren_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveChildren_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupIDs []string, token string) errors.SDKError) *MockSDK_RemoveChildren_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientParent provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveClientParent(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientParent")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveClientParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientParent'
type MockSDK_RemoveClientParent_Call struct {
	*mock.Call
}

// RemoveClientParent is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupID
//   - token
func (_e *MockSDK_Expecter) RemoveClientParent(ctx interface{}, id interface{}, domainID interface{}, groupID interface{}, token interface{}) *MockSDK_RemoveClientParent_Call {
	return &MockSDK_RemoveClientParent_Call{Call: _e.mock.On("RemoveClientParent", ctx, id, domainID, groupID, token)}
}

func (_c *MockSDK_RemoveClientParent_Call) Run(run func(ctx context.Context, id string, domainID string, groupID string, token string)) *MockSDK_RemoveClientParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveClientParent_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveClientParent_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveClientParent_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError) *MockSDK_RemoveClientParent_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveClientRoleActions(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientRoleActions")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveClientRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientRoleActions'
type MockSDK_RemoveClientRoleActions_Call struct {
	*mock.Call
}

// RemoveClientRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - actions
//   - token
func (_e *MockSDK_Expecter) RemoveClientRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, actions interface{}, token interface{}) *MockSDK_RemoveClientRoleActions_Call {
	return &MockSDK_RemoveClientRoleActions_Call{Call: _e.mock.On("RemoveClientRoleActions", ctx, id, roleID, domainID, actions, token)}
}

func (_c *MockSDK_RemoveClientRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string)) *MockSDK_RemoveClientRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveClientRoleActions_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveClientRoleActions_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveClientRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) errors.SDKError) *MockSDK_RemoveClientRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveClientRoleMembers(ctx context.Context, id string, roleID string, domainID string, members []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientRoleMembers")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveClientRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientRoleMembers'
type MockSDK_RemoveClientRoleMembers_Call struct {
	*mock.Call
}

// RemoveClientRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - members
//   - token
func (_e *MockSDK_Expecter) RemoveClientRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, members interface{}, token interface{}) *MockSDK_RemoveClientRoleMembers_Call {
	return &MockSDK_RemoveClientRoleMembers_Call{Call: _e.mock.On("RemoveClientRoleMembers", ctx, id, roleID, domainID, members, token)}
}

func (_c *MockSDK_RemoveClientRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string)) *MockSDK_RemoveClientRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveClientRoleMembers_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveClientRoleMembers_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveClientRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string) errors.SDKError) *MockSDK_RemoveClientRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDomainRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveDomainRoleActions(ctx context.Context, id string, roleID string, actions []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDomainRoleActions")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveDomainRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDomainRoleActions'
type MockSDK_RemoveDomainRoleActions_Call struct {
	*mock.Call
}

// RemoveDomainRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - actions
//   - token
func (_e *MockSDK_Expecter) RemoveDomainRoleActions(ctx interface{}, id interface{}, roleID interface{}, actions interface{}, token interface{}) *MockSDK_RemoveDomainRoleActions_Call {
	return &MockSDK_RemoveDomainRoleActions_Call{Call: _e.mock.On("RemoveDomainRoleActions", ctx, id, roleID, actions, token)}
}

func (_c *MockSDK_RemoveDomainRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, actions []string, token string)) *MockSDK_RemoveDomainRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveDomainRoleActions_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveDomainRoleActions_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveDomainRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, actions []string, token string) errors.SDKError) *MockSDK_RemoveDomainRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveDomainRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveDomainRoleMembers(ctx context.Context, id string, roleID string, members []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDomainRoleMembers")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveDomainRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveDomainRoleMembers'
type MockSDK_RemoveDomainRoleMembers_Call struct {
	*mock.Call
}

// RemoveDomainRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - members
//   - token
func (_e *MockSDK_Expecter) RemoveDomainRoleMembers(ctx interface{}, id interface{}, roleID interface{}, members interface{}, token interface{}) *MockSDK_RemoveDomainRoleMembers_Call {
	return &MockSDK_RemoveDomainRoleMembers_Call{Call: _e.mock.On("RemoveDomainRoleMembers", ctx, id, roleID, members, token)}
}

func (_c *MockSDK_RemoveDomainRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, members []string, token string)) *MockSDK_RemoveDomainRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveDomainRoleMembers_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveDomainRoleMembers_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveDomainRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, members []string, token string) errors.SDKError) *MockSDK_RemoveDomainRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupParent provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveGroupParent(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupParent")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveGroupParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupParent'
type MockSDK_RemoveGroupParent_Call struct {
	*mock.Call
}

// RemoveGroupParent is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupID
//   - token
func (_e *MockSDK_Expecter) RemoveGroupParent(ctx interface{}, id interface{}, domainID interface{}, groupID interface{}, token interface{}) *MockSDK_RemoveGroupParent_Call {
	return &MockSDK_RemoveGroupParent_Call{Call: _e.mock.On("RemoveGroupParent", ctx, id, domainID, groupID, token)}
}

func (_c *MockSDK_RemoveGroupParent_Call) Run(run func(ctx context.Context, id string, domainID string, groupID string, token string)) *MockSDK_RemoveGroupParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveGroupParent_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveGroupParent_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveGroupParent_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError) *MockSDK_RemoveGroupParent_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupRoleActions provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveGroupRoleActions(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupRoleActions")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveGroupRoleActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupRoleActions'
type MockSDK_RemoveGroupRoleActions_Call struct {
	*mock.Call
}

// RemoveGroupRoleActions is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - actions
//   - token
func (_e *MockSDK_Expecter) RemoveGroupRoleActions(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, actions interface{}, token interface{}) *MockSDK_RemoveGroupRoleActions_Call {
	return &MockSDK_RemoveGroupRoleActions_Call{Call: _e.mock.On("RemoveGroupRoleActions", ctx, id, roleID, domainID, actions, token)}
}

func (_c *MockSDK_RemoveGroupRoleActions_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string)) *MockSDK_RemoveGroupRoleActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveGroupRoleActions_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveGroupRoleActions_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveGroupRoleActions_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, actions []string, token string) errors.SDKError) *MockSDK_RemoveGroupRoleActions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupRoleMembers provides a mock function for the type MockSDK
func (_mock *MockSDK) RemoveGroupRoleMembers(ctx context.Context, id string, roleID string, domainID string, members []string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupRoleMembers")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_RemoveGroupRoleMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupRoleMembers'
type MockSDK_RemoveGroupRoleMembers_Call struct {
	*mock.Call
}

// RemoveGroupRoleMembers is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - domainID
//   - members
//   - token
func (_e *MockSDK_Expecter) RemoveGroupRoleMembers(ctx interface{}, id interface{}, roleID interface{}, domainID interface{}, members interface{}, token interface{}) *MockSDK_RemoveGroupRoleMembers_Call {
	return &MockSDK_RemoveGroupRoleMembers_Call{Call: _e.mock.On("RemoveGroupRoleMembers", ctx, id, roleID, domainID, members, token)}
}

func (_c *MockSDK_RemoveGroupRoleMembers_Call) Run(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string)) *MockSDK_RemoveGroupRoleMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_RemoveGroupRoleMembers_Call) Return(sDKError errors.SDKError) *MockSDK_RemoveGroupRoleMembers_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_RemoveGroupRoleMembers_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, domainID string, members []string, token string) errors.SDKError) *MockSDK_RemoveGroupRoleMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function for the type MockSDK
func (_mock *MockSDK) ResetPassword(ctx context.Context, password string, confPass string, token string) errors.SDKError {
	ret := _mock.Called(ctx, password, confPass, token)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, password, confPass, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockSDK_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx
//   - password
//   - confPass
//   - token
func (_e *MockSDK_Expecter) ResetPassword(ctx interface{}, password interface{}, confPass interface{}, token interface{}) *MockSDK_ResetPassword_Call {
	return &MockSDK_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, password, confPass, token)}
}

func (_c *MockSDK_ResetPassword_Call) Run(run func(ctx context.Context, password string, confPass string, token string)) *MockSDK_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_ResetPassword_Call) Return(sDKError errors.SDKError) *MockSDK_ResetPassword_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_ResetPassword_Call) RunAndReturn(run func(ctx context.Context, password string, confPass string, token string) errors.SDKError) *MockSDK_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPasswordRequest provides a mock function for the type MockSDK
func (_mock *MockSDK) ResetPasswordRequest(ctx context.Context, email string) errors.SDKError {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ResetPasswordRequest")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_ResetPasswordRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPasswordRequest'
type MockSDK_ResetPasswordRequest_Call struct {
	*mock.Call
}

// ResetPasswordRequest is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockSDK_Expecter) ResetPasswordRequest(ctx interface{}, email interface{}) *MockSDK_ResetPasswordRequest_Call {
	return &MockSDK_ResetPasswordRequest_Call{Call: _e.mock.On("ResetPasswordRequest", ctx, email)}
}

func (_c *MockSDK_ResetPasswordRequest_Call) Run(run func(ctx context.Context, email string)) *MockSDK_ResetPasswordRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSDK_ResetPasswordRequest_Call) Return(sDKError errors.SDKError) *MockSDK_ResetPasswordRequest_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_ResetPasswordRequest_Call) RunAndReturn(run func(ctx context.Context, email string) errors.SDKError) *MockSDK_ResetPasswordRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeCert provides a mock function for the type MockSDK
func (_mock *MockSDK) RevokeCert(ctx context.Context, clientID string, domainID string, token string) (time.Time, errors.SDKError) {
	ret := _mock.Called(ctx, clientID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeCert")
	}

	var r0 time.Time
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (time.Time, errors.SDKError)); ok {
		return returnFunc(ctx, clientID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) time.Time); ok {
		r0 = returnFunc(ctx, clientID, domainID, token)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, clientID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_RevokeCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeCert'
type MockSDK_RevokeCert_Call struct {
	*mock.Call
}

// RevokeCert is a helper method to define mock.On call
//   - ctx
//   - clientID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) RevokeCert(ctx interface{}, clientID interface{}, domainID interface{}, token interface{}) *MockSDK_RevokeCert_Call {
	return &MockSDK_RevokeCert_Call{Call: _e.mock.On("RevokeCert", ctx, clientID, domainID, token)}
}

func (_c *MockSDK_RevokeCert_Call) Run(run func(ctx context.Context, clientID string, domainID string, token string)) *MockSDK_RevokeCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_RevokeCert_Call) Return(time1 time.Time, sDKError errors.SDKError) *MockSDK_RevokeCert_Call {
	_c.Call.Return(time1, sDKError)
	return _c
}

func (_c *MockSDK_RevokeCert_Call) RunAndReturn(run func(ctx context.Context, clientID string, domainID string, token string) (time.Time, errors.SDKError)) *MockSDK_RevokeCert_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUsers provides a mock function for the type MockSDK
func (_mock *MockSDK) SearchUsers(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _mock.Called(ctx, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return returnFunc(ctx, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = returnFunc(ctx, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_SearchUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUsers'
type MockSDK_SearchUsers_Call struct {
	*mock.Call
}

// SearchUsers is a helper method to define mock.On call
//   - ctx
//   - pm
//   - token
func (_e *MockSDK_Expecter) SearchUsers(ctx interface{}, pm interface{}, token interface{}) *MockSDK_SearchUsers_Call {
	return &MockSDK_SearchUsers_Call{Call: _e.mock.On("SearchUsers", ctx, pm, token)}
}

func (_c *MockSDK_SearchUsers_Call) Run(run func(ctx context.Context, pm sdk.PageMetadata, token string)) *MockSDK_SearchUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.PageMetadata), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_SearchUsers_Call) Return(usersPage sdk.UsersPage, sDKError errors.SDKError) *MockSDK_SearchUsers_Call {
	_c.Call.Return(usersPage, sDKError)
	return _c
}

func (_c *MockSDK_SearchUsers_Call) RunAndReturn(run func(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError)) *MockSDK_SearchUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SendInvitation provides a mock function for the type MockSDK
func (_mock *MockSDK) SendInvitation(ctx context.Context, invitation sdk.Invitation, token string) error {
	ret := _mock.Called(ctx, invitation, token)

	if len(ret) == 0 {
		panic("no return value specified for SendInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Invitation, string) error); ok {
		r0 = returnFunc(ctx, invitation, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSDK_SendInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInvitation'
type MockSDK_SendInvitation_Call struct {
	*mock.Call
}

// SendInvitation is a helper method to define mock.On call
//   - ctx
//   - invitation
//   - token
func (_e *MockSDK_Expecter) SendInvitation(ctx interface{}, invitation interface{}, token interface{}) *MockSDK_SendInvitation_Call {
	return &MockSDK_SendInvitation_Call{Call: _e.mock.On("SendInvitation", ctx, invitation, token)}
}

func (_c *MockSDK_SendInvitation_Call) Run(run func(ctx context.Context, invitation sdk.Invitation, token string)) *MockSDK_SendInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Invitation), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_SendInvitation_Call) Return(err error) *MockSDK_SendInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSDK_SendInvitation_Call) RunAndReturn(run func(ctx context.Context, invitation sdk.Invitation, token string) error) *MockSDK_SendInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function for the type MockSDK
func (_mock *MockSDK) SendMessage(ctx context.Context, domainID string, topic string, msg string, secret string) errors.SDKError {
	ret := _mock.Called(ctx, domainID, topic, msg, secret)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, domainID, topic, msg, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockSDK_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - topic
//   - msg
//   - secret
func (_e *MockSDK_Expecter) SendMessage(ctx interface{}, domainID interface{}, topic interface{}, msg interface{}, secret interface{}) *MockSDK_SendMessage_Call {
	return &MockSDK_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, domainID, topic, msg, secret)}
}

func (_c *MockSDK_SendMessage_Call) Run(run func(ctx context.Context, domainID string, topic string, msg string, secret string)) *MockSDK_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_SendMessage_Call) Return(sDKError errors.SDKError) *MockSDK_SendMessage_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_SendMessage_Call) RunAndReturn(run func(ctx context.Context, domainID string, topic string, msg string, secret string) errors.SDKError) *MockSDK_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetChannelParent provides a mock function for the type MockSDK
func (_mock *MockSDK) SetChannelParent(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for SetChannelParent")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_SetChannelParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetChannelParent'
type MockSDK_SetChannelParent_Call struct {
	*mock.Call
}

// SetChannelParent is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupID
//   - token
func (_e *MockSDK_Expecter) SetChannelParent(ctx interface{}, id interface{}, domainID interface{}, groupID interface{}, token interface{}) *MockSDK_SetChannelParent_Call {
	return &MockSDK_SetChannelParent_Call{Call: _e.mock.On("SetChannelParent", ctx, id, domainID, groupID, token)}
}

func (_c *MockSDK_SetChannelParent_Call) Run(run func(ctx context.Context, id string, domainID string, groupID string, token string)) *MockSDK_SetChannelParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_SetChannelParent_Call) Return(sDKError errors.SDKError) *MockSDK_SetChannelParent_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_SetChannelParent_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError) *MockSDK_SetChannelParent_Call {
	_c.Call.Return(run)
	return _c
}

// SetClientParent provides a mock function for the type MockSDK
func (_mock *MockSDK) SetClientParent(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for SetClientParent")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_SetClientParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClientParent'
type MockSDK_SetClientParent_Call struct {
	*mock.Call
}

// SetClientParent is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupID
//   - token
func (_e *MockSDK_Expecter) SetClientParent(ctx interface{}, id interface{}, domainID interface{}, groupID interface{}, token interface{}) *MockSDK_SetClientParent_Call {
	return &MockSDK_SetClientParent_Call{Call: _e.mock.On("SetClientParent", ctx, id, domainID, groupID, token)}
}

func (_c *MockSDK_SetClientParent_Call) Run(run func(ctx context.Context, id string, domainID string, groupID string, token string)) *MockSDK_SetClientParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_SetClientParent_Call) Return(sDKError errors.SDKError) *MockSDK_SetClientParent_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_SetClientParent_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError) *MockSDK_SetClientParent_Call {
	_c.Call.Return(run)
	return _c
}

// SetContentType provides a mock function for the type MockSDK
func (_mock *MockSDK) SetContentType(ct sdk.ContentType) errors.SDKError {
	ret := _mock.Called(ct)

	if len(ret) == 0 {
		panic("no return value specified for SetContentType")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(sdk.ContentType) errors.SDKError); ok {
		r0 = returnFunc(ct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_SetContentType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContentType'
type MockSDK_SetContentType_Call struct {
	*mock.Call
}

// SetContentType is a helper method to define mock.On call
//   - ct
func (_e *MockSDK_Expecter) SetContentType(ct interface{}) *MockSDK_SetContentType_Call {
	return &MockSDK_SetContentType_Call{Call: _e.mock.On("SetContentType", ct)}
}

func (_c *MockSDK_SetContentType_Call) Run(run func(ct sdk.ContentType)) *MockSDK_SetContentType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sdk.ContentType))
	})
	return _c
}

func (_c *MockSDK_SetContentType_Call) Return(sDKError errors.SDKError) *MockSDK_SetContentType_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_SetContentType_Call) RunAndReturn(run func(ct sdk.ContentType) errors.SDKError) *MockSDK_SetContentType_Call {
	_c.Call.Return(run)
	return _c
}

// SetGroupParent provides a mock function for the type MockSDK
func (_mock *MockSDK) SetGroupParent(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _mock.Called(ctx, id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupParent")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r0 = returnFunc(ctx, id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// MockSDK_SetGroupParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGroupParent'
type MockSDK_SetGroupParent_Call struct {
	*mock.Call
}

// SetGroupParent is a helper method to define mock.On call
//   - ctx
//   - id
//   - domainID
//   - groupID
//   - token
func (_e *MockSDK_Expecter) SetGroupParent(ctx interface{}, id interface{}, domainID interface{}, groupID interface{}, token interface{}) *MockSDK_SetGroupParent_Call {
	return &MockSDK_SetGroupParent_Call{Call: _e.mock.On("SetGroupParent", ctx, id, domainID, groupID, token)}
}

func (_c *MockSDK_SetGroupParent_Call) Run(run func(ctx context.Context, id string, domainID string, groupID string, token string)) *MockSDK_SetGroupParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_SetGroupParent_Call) Return(sDKError errors.SDKError) *MockSDK_SetGroupParent_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *MockSDK_SetGroupParent_Call) RunAndReturn(run func(ctx context.Context, id string, domainID string, groupID string, token string) errors.SDKError) *MockSDK_SetGroupParent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannel provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateChannel(ctx context.Context, channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _mock.Called(ctx, channel, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return returnFunc(ctx, channel, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Channel, string, string) sdk.Channel); ok {
		r0 = returnFunc(ctx, channel, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Channel, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, channel, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannel'
type MockSDK_UpdateChannel_Call struct {
	*mock.Call
}

// UpdateChannel is a helper method to define mock.On call
//   - ctx
//   - channel
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateChannel(ctx interface{}, channel interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateChannel_Call {
	return &MockSDK_UpdateChannel_Call{Call: _e.mock.On("UpdateChannel", ctx, channel, domainID, token)}
}

func (_c *MockSDK_UpdateChannel_Call) Run(run func(ctx context.Context, channel sdk.Channel, domainID string, token string)) *MockSDK_UpdateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Channel), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateChannel_Call) Return(channel1 sdk.Channel, sDKError errors.SDKError) *MockSDK_UpdateChannel_Call {
	_c.Call.Return(channel1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateChannel_Call) RunAndReturn(run func(ctx context.Context, channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError)) *MockSDK_UpdateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannelTags provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateChannelTags(ctx context.Context, c sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _mock.Called(ctx, c, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelTags")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return returnFunc(ctx, c, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Channel, string, string) sdk.Channel); ok {
		r0 = returnFunc(ctx, c, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Channel, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, c, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateChannelTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannelTags'
type MockSDK_UpdateChannelTags_Call struct {
	*mock.Call
}

// UpdateChannelTags is a helper method to define mock.On call
//   - ctx
//   - c
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateChannelTags(ctx interface{}, c interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateChannelTags_Call {
	return &MockSDK_UpdateChannelTags_Call{Call: _e.mock.On("UpdateChannelTags", ctx, c, domainID, token)}
}

func (_c *MockSDK_UpdateChannelTags_Call) Run(run func(ctx context.Context, c sdk.Channel, domainID string, token string)) *MockSDK_UpdateChannelTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Channel), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateChannelTags_Call) Return(channel sdk.Channel, sDKError errors.SDKError) *MockSDK_UpdateChannelTags_Call {
	_c.Call.Return(channel, sDKError)
	return _c
}

func (_c *MockSDK_UpdateChannelTags_Call) RunAndReturn(run func(ctx context.Context, c sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError)) *MockSDK_UpdateChannelTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClient provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateClient(ctx context.Context, client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Client, string, string) (sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, client, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Client, string, string) sdk.Client); ok {
		r0 = returnFunc(ctx, client, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Client, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClient'
type MockSDK_UpdateClient_Call struct {
	*mock.Call
}

// UpdateClient is a helper method to define mock.On call
//   - ctx
//   - client
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateClient(ctx interface{}, client interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateClient_Call {
	return &MockSDK_UpdateClient_Call{Call: _e.mock.On("UpdateClient", ctx, client, domainID, token)}
}

func (_c *MockSDK_UpdateClient_Call) Run(run func(ctx context.Context, client sdk.Client, domainID string, token string)) *MockSDK_UpdateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Client), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateClient_Call) Return(client1 sdk.Client, sDKError errors.SDKError) *MockSDK_UpdateClient_Call {
	_c.Call.Return(client1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateClient_Call) RunAndReturn(run func(ctx context.Context, client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError)) *MockSDK_UpdateClient_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientRole provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateClientRole(ctx context.Context, id string, roleID string, newName string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, newName, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, newName, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, roleID, newName, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, newName, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateClientRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientRole'
type MockSDK_UpdateClientRole_Call struct {
	*mock.Call
}

// UpdateClientRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - newName
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateClientRole(ctx interface{}, id interface{}, roleID interface{}, newName interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateClientRole_Call {
	return &MockSDK_UpdateClientRole_Call{Call: _e.mock.On("UpdateClientRole", ctx, id, roleID, newName, domainID, token)}
}

func (_c *MockSDK_UpdateClientRole_Call) Run(run func(ctx context.Context, id string, roleID string, newName string, domainID string, token string)) *MockSDK_UpdateClientRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateClientRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_UpdateClientRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_UpdateClientRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, newName string, domainID string, token string) (sdk.Role, errors.SDKError)) *MockSDK_UpdateClientRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientSecret provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateClientSecret(ctx context.Context, id string, secret string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, id, secret, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientSecret")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, id, secret, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) sdk.Client); ok {
		r0 = returnFunc(ctx, id, secret, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, secret, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateClientSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientSecret'
type MockSDK_UpdateClientSecret_Call struct {
	*mock.Call
}

// UpdateClientSecret is a helper method to define mock.On call
//   - ctx
//   - id
//   - secret
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateClientSecret(ctx interface{}, id interface{}, secret interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateClientSecret_Call {
	return &MockSDK_UpdateClientSecret_Call{Call: _e.mock.On("UpdateClientSecret", ctx, id, secret, domainID, token)}
}

func (_c *MockSDK_UpdateClientSecret_Call) Run(run func(ctx context.Context, id string, secret string, domainID string, token string)) *MockSDK_UpdateClientSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateClientSecret_Call) Return(client sdk.Client, sDKError errors.SDKError) *MockSDK_UpdateClientSecret_Call {
	_c.Call.Return(client, sDKError)
	return _c
}

func (_c *MockSDK_UpdateClientSecret_Call) RunAndReturn(run func(ctx context.Context, id string, secret string, domainID string, token string) (sdk.Client, errors.SDKError)) *MockSDK_UpdateClientSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientTags provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateClientTags(ctx context.Context, client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _mock.Called(ctx, client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientTags")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Client, string, string) (sdk.Client, errors.SDKError)); ok {
		return returnFunc(ctx, client, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Client, string, string) sdk.Client); ok {
		r0 = returnFunc(ctx, client, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Client, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateClientTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientTags'
type MockSDK_UpdateClientTags_Call struct {
	*mock.Call
}

// UpdateClientTags is a helper method to define mock.On call
//   - ctx
//   - client
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateClientTags(ctx interface{}, client interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateClientTags_Call {
	return &MockSDK_UpdateClientTags_Call{Call: _e.mock.On("UpdateClientTags", ctx, client, domainID, token)}
}

func (_c *MockSDK_UpdateClientTags_Call) Run(run func(ctx context.Context, client sdk.Client, domainID string, token string)) *MockSDK_UpdateClientTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Client), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateClientTags_Call) Return(client1 sdk.Client, sDKError errors.SDKError) *MockSDK_UpdateClientTags_Call {
	_c.Call.Return(client1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateClientTags_Call) RunAndReturn(run func(ctx context.Context, client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError)) *MockSDK_UpdateClientTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDomain provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateDomain(ctx context.Context, d sdk.Domain, token string) (sdk.Domain, errors.SDKError) {
	ret := _mock.Called(ctx, d, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Domain, string) (sdk.Domain, errors.SDKError)); ok {
		return returnFunc(ctx, d, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Domain, string) sdk.Domain); ok {
		r0 = returnFunc(ctx, d, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Domain, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDomain'
type MockSDK_UpdateDomain_Call struct {
	*mock.Call
}

// UpdateDomain is a helper method to define mock.On call
//   - ctx
//   - d
//   - token
func (_e *MockSDK_Expecter) UpdateDomain(ctx interface{}, d interface{}, token interface{}) *MockSDK_UpdateDomain_Call {
	return &MockSDK_UpdateDomain_Call{Call: _e.mock.On("UpdateDomain", ctx, d, token)}
}

func (_c *MockSDK_UpdateDomain_Call) Run(run func(ctx context.Context, d sdk.Domain, token string)) *MockSDK_UpdateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Domain), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateDomain_Call) Return(domain sdk.Domain, sDKError errors.SDKError) *MockSDK_UpdateDomain_Call {
	_c.Call.Return(domain, sDKError)
	return _c
}

func (_c *MockSDK_UpdateDomain_Call) RunAndReturn(run func(ctx context.Context, d sdk.Domain, token string) (sdk.Domain, errors.SDKError)) *MockSDK_UpdateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDomainRole provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateDomainRole(ctx context.Context, id string, roleID string, newName string, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, newName, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, newName, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, roleID, newName, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, newName, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateDomainRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDomainRole'
type MockSDK_UpdateDomainRole_Call struct {
	*mock.Call
}

// UpdateDomainRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - newName
//   - token
func (_e *MockSDK_Expecter) UpdateDomainRole(ctx interface{}, id interface{}, roleID interface{}, newName interface{}, token interface{}) *MockSDK_UpdateDomainRole_Call {
	return &MockSDK_UpdateDomainRole_Call{Call: _e.mock.On("UpdateDomainRole", ctx, id, roleID, newName, token)}
}

func (_c *MockSDK_UpdateDomainRole_Call) Run(run func(ctx context.Context, id string, roleID string, newName string, token string)) *MockSDK_UpdateDomainRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateDomainRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_UpdateDomainRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_UpdateDomainRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, newName string, token string) (sdk.Role, errors.SDKError)) *MockSDK_UpdateDomainRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateGroup(ctx context.Context, group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _mock.Called(ctx, group, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Group, string, string) (sdk.Group, errors.SDKError)); ok {
		return returnFunc(ctx, group, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Group, string, string) sdk.Group); ok {
		r0 = returnFunc(ctx, group, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Group, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, group, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockSDK_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx
//   - group
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateGroup(ctx interface{}, group interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateGroup_Call {
	return &MockSDK_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx, group, domainID, token)}
}

func (_c *MockSDK_UpdateGroup_Call) Run(run func(ctx context.Context, group sdk.Group, domainID string, token string)) *MockSDK_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Group), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateGroup_Call) Return(group1 sdk.Group, sDKError errors.SDKError) *MockSDK_UpdateGroup_Call {
	_c.Call.Return(group1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateGroup_Call) RunAndReturn(run func(ctx context.Context, group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError)) *MockSDK_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupRole provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateGroupRole(ctx context.Context, id string, roleID string, newName string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _mock.Called(ctx, id, roleID, newName, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return returnFunc(ctx, id, roleID, newName, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) sdk.Role); ok {
		r0 = returnFunc(ctx, id, roleID, newName, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, roleID, newName, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateGroupRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupRole'
type MockSDK_UpdateGroupRole_Call struct {
	*mock.Call
}

// UpdateGroupRole is a helper method to define mock.On call
//   - ctx
//   - id
//   - roleID
//   - newName
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateGroupRole(ctx interface{}, id interface{}, roleID interface{}, newName interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateGroupRole_Call {
	return &MockSDK_UpdateGroupRole_Call{Call: _e.mock.On("UpdateGroupRole", ctx, id, roleID, newName, domainID, token)}
}

func (_c *MockSDK_UpdateGroupRole_Call) Run(run func(ctx context.Context, id string, roleID string, newName string, domainID string, token string)) *MockSDK_UpdateGroupRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateGroupRole_Call) Return(role sdk.Role, sDKError errors.SDKError) *MockSDK_UpdateGroupRole_Call {
	_c.Call.Return(role, sDKError)
	return _c
}

func (_c *MockSDK_UpdateGroupRole_Call) RunAndReturn(run func(ctx context.Context, id string, roleID string, newName string, domainID string, token string) (sdk.Role, errors.SDKError)) *MockSDK_UpdateGroupRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupTags provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateGroupTags(ctx context.Context, group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _mock.Called(ctx, group, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupTags")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Group, string, string) (sdk.Group, errors.SDKError)); ok {
		return returnFunc(ctx, group, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.Group, string, string) sdk.Group); ok {
		r0 = returnFunc(ctx, group, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.Group, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, group, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateGroupTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupTags'
type MockSDK_UpdateGroupTags_Call struct {
	*mock.Call
}

// UpdateGroupTags is a helper method to define mock.On call
//   - ctx
//   - group
//   - domainID
//   - token
func (_e *MockSDK_Expecter) UpdateGroupTags(ctx interface{}, group interface{}, domainID interface{}, token interface{}) *MockSDK_UpdateGroupTags_Call {
	return &MockSDK_UpdateGroupTags_Call{Call: _e.mock.On("UpdateGroupTags", ctx, group, domainID, token)}
}

func (_c *MockSDK_UpdateGroupTags_Call) Run(run func(ctx context.Context, group sdk.Group, domainID string, token string)) *MockSDK_UpdateGroupTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.Group), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateGroupTags_Call) Return(group1 sdk.Group, sDKError errors.SDKError) *MockSDK_UpdateGroupTags_Call {
	_c.Call.Return(group1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateGroupTags_Call) RunAndReturn(run func(ctx context.Context, group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError)) *MockSDK_UpdateGroupTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdatePassword(ctx context.Context, oldPass string, newPass string, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, oldPass, newPass, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, oldPass, newPass, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.User); ok {
		r0 = returnFunc(ctx, oldPass, newPass, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, oldPass, newPass, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockSDK_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx
//   - oldPass
//   - newPass
//   - token
func (_e *MockSDK_Expecter) UpdatePassword(ctx interface{}, oldPass interface{}, newPass interface{}, token interface{}) *MockSDK_UpdatePassword_Call {
	return &MockSDK_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, oldPass, newPass, token)}
}

func (_c *MockSDK_UpdatePassword_Call) Run(run func(ctx context.Context, oldPass string, newPass string, token string)) *MockSDK_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_UpdatePassword_Call) Return(user sdk.User, sDKError errors.SDKError) *MockSDK_UpdatePassword_Call {
	_c.Call.Return(user, sDKError)
	return _c
}

func (_c *MockSDK_UpdatePassword_Call) RunAndReturn(run func(ctx context.Context, oldPass string, newPass string, token string) (sdk.User, errors.SDKError)) *MockSDK_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfilePicture provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateProfilePicture(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilePicture")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, user, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) sdk.User); ok {
		r0 = returnFunc(ctx, user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.User, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateProfilePicture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfilePicture'
type MockSDK_UpdateProfilePicture_Call struct {
	*mock.Call
}

// UpdateProfilePicture is a helper method to define mock.On call
//   - ctx
//   - user
//   - token
func (_e *MockSDK_Expecter) UpdateProfilePicture(ctx interface{}, user interface{}, token interface{}) *MockSDK_UpdateProfilePicture_Call {
	return &MockSDK_UpdateProfilePicture_Call{Call: _e.mock.On("UpdateProfilePicture", ctx, user, token)}
}

func (_c *MockSDK_UpdateProfilePicture_Call) Run(run func(ctx context.Context, user sdk.User, token string)) *MockSDK_UpdateProfilePicture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.User), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateProfilePicture_Call) Return(user1 sdk.User, sDKError errors.SDKError) *MockSDK_UpdateProfilePicture_Call {
	_c.Call.Return(user1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateProfilePicture_Call) RunAndReturn(run func(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError)) *MockSDK_UpdateProfilePicture_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateUser(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, user, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) sdk.User); ok {
		r0 = returnFunc(ctx, user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.User, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockSDK_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx
//   - user
//   - token
func (_e *MockSDK_Expecter) UpdateUser(ctx interface{}, user interface{}, token interface{}) *MockSDK_UpdateUser_Call {
	return &MockSDK_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user, token)}
}

func (_c *MockSDK_UpdateUser_Call) Run(run func(ctx context.Context, user sdk.User, token string)) *MockSDK_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.User), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateUser_Call) Return(user1 sdk.User, sDKError errors.SDKError) *MockSDK_UpdateUser_Call {
	_c.Call.Return(user1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError)) *MockSDK_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserEmail provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateUserEmail(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserEmail")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, user, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) sdk.User); ok {
		r0 = returnFunc(ctx, user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.User, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateUserEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserEmail'
type MockSDK_UpdateUserEmail_Call struct {
	*mock.Call
}

// UpdateUserEmail is a helper method to define mock.On call
//   - ctx
//   - user
//   - token
func (_e *MockSDK_Expecter) UpdateUserEmail(ctx interface{}, user interface{}, token interface{}) *MockSDK_UpdateUserEmail_Call {
	return &MockSDK_UpdateUserEmail_Call{Call: _e.mock.On("UpdateUserEmail", ctx, user, token)}
}

func (_c *MockSDK_UpdateUserEmail_Call) Run(run func(ctx context.Context, user sdk.User, token string)) *MockSDK_UpdateUserEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.User), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateUserEmail_Call) Return(user1 sdk.User, sDKError errors.SDKError) *MockSDK_UpdateUserEmail_Call {
	_c.Call.Return(user1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateUserEmail_Call) RunAndReturn(run func(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError)) *MockSDK_UpdateUserEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRole provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateUserRole(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, user, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) sdk.User); ok {
		r0 = returnFunc(ctx, user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.User, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRole'
type MockSDK_UpdateUserRole_Call struct {
	*mock.Call
}

// UpdateUserRole is a helper method to define mock.On call
//   - ctx
//   - user
//   - token
func (_e *MockSDK_Expecter) UpdateUserRole(ctx interface{}, user interface{}, token interface{}) *MockSDK_UpdateUserRole_Call {
	return &MockSDK_UpdateUserRole_Call{Call: _e.mock.On("UpdateUserRole", ctx, user, token)}
}

func (_c *MockSDK_UpdateUserRole_Call) Run(run func(ctx context.Context, user sdk.User, token string)) *MockSDK_UpdateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.User), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateUserRole_Call) Return(user1 sdk.User, sDKError errors.SDKError) *MockSDK_UpdateUserRole_Call {
	_c.Call.Return(user1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateUserRole_Call) RunAndReturn(run func(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError)) *MockSDK_UpdateUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTags provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateUserTags(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTags")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, user, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) sdk.User); ok {
		r0 = returnFunc(ctx, user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.User, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateUserTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTags'
type MockSDK_UpdateUserTags_Call struct {
	*mock.Call
}

// UpdateUserTags is a helper method to define mock.On call
//   - ctx
//   - user
//   - token
func (_e *MockSDK_Expecter) UpdateUserTags(ctx interface{}, user interface{}, token interface{}) *MockSDK_UpdateUserTags_Call {
	return &MockSDK_UpdateUserTags_Call{Call: _e.mock.On("UpdateUserTags", ctx, user, token)}
}

func (_c *MockSDK_UpdateUserTags_Call) Run(run func(ctx context.Context, user sdk.User, token string)) *MockSDK_UpdateUserTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.User), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateUserTags_Call) Return(user1 sdk.User, sDKError errors.SDKError) *MockSDK_UpdateUserTags_Call {
	_c.Call.Return(user1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateUserTags_Call) RunAndReturn(run func(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError)) *MockSDK_UpdateUserTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsername provides a mock function for the type MockSDK
func (_mock *MockSDK) UpdateUsername(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, user, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.User, string) sdk.User); ok {
		r0 = returnFunc(ctx, user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.User, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UpdateUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsername'
type MockSDK_UpdateUsername_Call struct {
	*mock.Call
}

// UpdateUsername is a helper method to define mock.On call
//   - ctx
//   - user
//   - token
func (_e *MockSDK_Expecter) UpdateUsername(ctx interface{}, user interface{}, token interface{}) *MockSDK_UpdateUsername_Call {
	return &MockSDK_UpdateUsername_Call{Call: _e.mock.On("UpdateUsername", ctx, user, token)}
}

func (_c *MockSDK_UpdateUsername_Call) Run(run func(ctx context.Context, user sdk.User, token string)) *MockSDK_UpdateUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.User), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_UpdateUsername_Call) Return(user1 sdk.User, sDKError errors.SDKError) *MockSDK_UpdateUsername_Call {
	_c.Call.Return(user1, sDKError)
	return _c
}

func (_c *MockSDK_UpdateUsername_Call) RunAndReturn(run func(ctx context.Context, user sdk.User, token string) (sdk.User, errors.SDKError)) *MockSDK_UpdateUsername_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function for the type MockSDK
func (_mock *MockSDK) User(ctx context.Context, id string, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, id, token)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, id, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) sdk.User); ok {
		r0 = returnFunc(ctx, id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockSDK_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
//   - ctx
//   - id
//   - token
func (_e *MockSDK_Expecter) User(ctx interface{}, id interface{}, token interface{}) *MockSDK_User_Call {
	return &MockSDK_User_Call{Call: _e.mock.On("User", ctx, id, token)}
}

func (_c *MockSDK_User_Call) Run(run func(ctx context.Context, id string, token string)) *MockSDK_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_User_Call) Return(user sdk.User, sDKError errors.SDKError) *MockSDK_User_Call {
	_c.Call.Return(user, sDKError)
	return _c
}

func (_c *MockSDK_User_Call) RunAndReturn(run func(ctx context.Context, id string, token string) (sdk.User, errors.SDKError)) *MockSDK_User_Call {
	_c.Call.Return(run)
	return _c
}

// UserProfile provides a mock function for the type MockSDK
func (_mock *MockSDK) UserProfile(ctx context.Context, token string) (sdk.User, errors.SDKError) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for UserProfile")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (sdk.User, errors.SDKError)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) sdk.User); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_UserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserProfile'
type MockSDK_UserProfile_Call struct {
	*mock.Call
}

// UserProfile is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockSDK_Expecter) UserProfile(ctx interface{}, token interface{}) *MockSDK_UserProfile_Call {
	return &MockSDK_UserProfile_Call{Call: _e.mock.On("UserProfile", ctx, token)}
}

func (_c *MockSDK_UserProfile_Call) Run(run func(ctx context.Context, token string)) *MockSDK_UserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSDK_UserProfile_Call) Return(user sdk.User, sDKError errors.SDKError) *MockSDK_UserProfile_Call {
	_c.Call.Return(user, sDKError)
	return _c
}

func (_c *MockSDK_UserProfile_Call) RunAndReturn(run func(ctx context.Context, token string) (sdk.User, errors.SDKError)) *MockSDK_UserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// Users provides a mock function for the type MockSDK
func (_mock *MockSDK) Users(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _mock.Called(ctx, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return returnFunc(ctx, pm, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = returnFunc(ctx, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_Users_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Users'
type MockSDK_Users_Call struct {
	*mock.Call
}

// Users is a helper method to define mock.On call
//   - ctx
//   - pm
//   - token
func (_e *MockSDK_Expecter) Users(ctx interface{}, pm interface{}, token interface{}) *MockSDK_Users_Call {
	return &MockSDK_Users_Call{Call: _e.mock.On("Users", ctx, pm, token)}
}

func (_c *MockSDK_Users_Call) Run(run func(ctx context.Context, pm sdk.PageMetadata, token string)) *MockSDK_Users_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sdk.PageMetadata), args[2].(string))
	})
	return _c
}

func (_c *MockSDK_Users_Call) Return(usersPage sdk.UsersPage, sDKError errors.SDKError) *MockSDK_Users_Call {
	_c.Call.Return(usersPage, sDKError)
	return _c
}

func (_c *MockSDK_Users_Call) RunAndReturn(run func(ctx context.Context, pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError)) *MockSDK_Users_Call {
	_c.Call.Return(run)
	return _c
}

// ViewCert provides a mock function for the type MockSDK
func (_mock *MockSDK) ViewCert(ctx context.Context, certID string, domainID string, token string) (sdk.Cert, errors.SDKError) {
	ret := _mock.Called(ctx, certID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCert")
	}

	var r0 sdk.Cert
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.Cert, errors.SDKError)); ok {
		return returnFunc(ctx, certID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.Cert); ok {
		r0 = returnFunc(ctx, certID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Cert)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, certID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ViewCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewCert'
type MockSDK_ViewCert_Call struct {
	*mock.Call
}

// ViewCert is a helper method to define mock.On call
//   - ctx
//   - certID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) ViewCert(ctx interface{}, certID interface{}, domainID interface{}, token interface{}) *MockSDK_ViewCert_Call {
	return &MockSDK_ViewCert_Call{Call: _e.mock.On("ViewCert", ctx, certID, domainID, token)}
}

func (_c *MockSDK_ViewCert_Call) Run(run func(ctx context.Context, certID string, domainID string, token string)) *MockSDK_ViewCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_ViewCert_Call) Return(cert sdk.Cert, sDKError errors.SDKError) *MockSDK_ViewCert_Call {
	_c.Call.Return(cert, sDKError)
	return _c
}

func (_c *MockSDK_ViewCert_Call) RunAndReturn(run func(ctx context.Context, certID string, domainID string, token string) (sdk.Cert, errors.SDKError)) *MockSDK_ViewCert_Call {
	_c.Call.Return(run)
	return _c
}

// ViewCertByClient provides a mock function for the type MockSDK
func (_mock *MockSDK) ViewCertByClient(ctx context.Context, clientID string, domainID string, token string) (sdk.CertSerials, errors.SDKError) {
	ret := _mock.Called(ctx, clientID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCertByClient")
	}

	var r0 sdk.CertSerials
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (sdk.CertSerials, errors.SDKError)); ok {
		return returnFunc(ctx, clientID, domainID, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) sdk.CertSerials); ok {
		r0 = returnFunc(ctx, clientID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.CertSerials)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) errors.SDKError); ok {
		r1 = returnFunc(ctx, clientID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// MockSDK_ViewCertByClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewCertByClient'
type MockSDK_ViewCertByClient_Call struct {
	*mock.Call
}

// ViewCertByClient is a helper method to define mock.On call
//   - ctx
//   - clientID
//   - domainID
//   - token
func (_e *MockSDK_Expecter) ViewCertByClient(ctx interface{}, clientID interface{}, domainID interface{}, token interface{}) *MockSDK_ViewCertByClient_Call {
	return &MockSDK_ViewCertByClient_Call{Call: _e.mock.On("ViewCertByClient", ctx, clientID, domainID, token)}
}

func (_c *MockSDK_ViewCertByClient_Call) Run(run func(ctx context.Context, clientID string, domainID string, token string)) *MockSDK_ViewCertByClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSDK_ViewCertByClient_Call) Return(certSerials sdk.CertSerials, sDKError errors.SDKError) *MockSDK_ViewCertByClient_Call {
	_c.Call.Return(certSerials, sDKError)
	return _c
}

func (_c *MockSDK_ViewCertByClient_Call) RunAndReturn(run func(ctx context.Context, clientID string, domainID string, token string) (sdk.CertSerials, errors.SDKError)) *MockSDK_ViewCertByClient_Call {
	_c.Call.Return(run)
	return _c
}
