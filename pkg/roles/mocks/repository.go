// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/pkg/roles"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) AddRoles(ctx context.Context, rps []roles.RoleProvision) ([]roles.RoleProvision, error) {
	ret := _mock.Called(ctx, rps)

	if len(ret) == 0 {
		panic("no return value specified for AddRoles")
	}

	var r0 []roles.RoleProvision
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []roles.RoleProvision) ([]roles.RoleProvision, error)); ok {
		return returnFunc(ctx, rps)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []roles.RoleProvision) []roles.RoleProvision); ok {
		r0 = returnFunc(ctx, rps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.RoleProvision)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []roles.RoleProvision) error); ok {
		r1 = returnFunc(ctx, rps)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_AddRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoles'
type MockRepository_AddRoles_Call struct {
	*mock.Call
}

// AddRoles is a helper method to define mock.On call
//   - ctx
//   - rps
func (_e *MockRepository_Expecter) AddRoles(ctx interface{}, rps interface{}) *MockRepository_AddRoles_Call {
	return &MockRepository_AddRoles_Call{Call: _e.mock.On("AddRoles", ctx, rps)}
}

func (_c *MockRepository_AddRoles_Call) Run(run func(ctx context.Context, rps []roles.RoleProvision)) *MockRepository_AddRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]roles.RoleProvision))
	})
	return _c
}

func (_c *MockRepository_AddRoles_Call) Return(roleProvisions []roles.RoleProvision, err error) *MockRepository_AddRoles_Call {
	_c.Call.Return(roleProvisions, err)
	return _c
}

func (_c *MockRepository_AddRoles_Call) RunAndReturn(run func(ctx context.Context, rps []roles.RoleProvision) ([]roles.RoleProvision, error)) *MockRepository_AddRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntityMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) ListEntityMembers(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery) (roles.MembersRolePage, error) {
	ret := _mock.Called(ctx, entityID, pageQuery)

	if len(ret) == 0 {
		panic("no return value specified for ListEntityMembers")
	}

	var r0 roles.MembersRolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, roles.MembersRolePageQuery) (roles.MembersRolePage, error)); ok {
		return returnFunc(ctx, entityID, pageQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, roles.MembersRolePageQuery) roles.MembersRolePage); ok {
		r0 = returnFunc(ctx, entityID, pageQuery)
	} else {
		r0 = ret.Get(0).(roles.MembersRolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, roles.MembersRolePageQuery) error); ok {
		r1 = returnFunc(ctx, entityID, pageQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ListEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntityMembers'
type MockRepository_ListEntityMembers_Call struct {
	*mock.Call
}

// ListEntityMembers is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - pageQuery
func (_e *MockRepository_Expecter) ListEntityMembers(ctx interface{}, entityID interface{}, pageQuery interface{}) *MockRepository_ListEntityMembers_Call {
	return &MockRepository_ListEntityMembers_Call{Call: _e.mock.On("ListEntityMembers", ctx, entityID, pageQuery)}
}

func (_c *MockRepository_ListEntityMembers_Call) Run(run func(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery)) *MockRepository_ListEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(roles.MembersRolePageQuery))
	})
	return _c
}

func (_c *MockRepository_ListEntityMembers_Call) Return(membersRolePage roles.MembersRolePage, err error) *MockRepository_ListEntityMembers_Call {
	_c.Call.Return(membersRolePage, err)
	return _c
}

func (_c *MockRepository_ListEntityMembers_Call) RunAndReturn(run func(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery) (roles.MembersRolePage, error)) *MockRepository_ListEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEntityMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveEntityMembers(ctx context.Context, entityID string, members []string) error {
	ret := _mock.Called(ctx, entityID, members)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEntityMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, entityID, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEntityMembers'
type MockRepository_RemoveEntityMembers_Call struct {
	*mock.Call
}

// RemoveEntityMembers is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - members
func (_e *MockRepository_Expecter) RemoveEntityMembers(ctx interface{}, entityID interface{}, members interface{}) *MockRepository_RemoveEntityMembers_Call {
	return &MockRepository_RemoveEntityMembers_Call{Call: _e.mock.On("RemoveEntityMembers", ctx, entityID, members)}
}

func (_c *MockRepository_RemoveEntityMembers_Call) Run(run func(ctx context.Context, entityID string, members []string)) *MockRepository_RemoveEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RemoveEntityMembers_Call) Return(err error) *MockRepository_RemoveEntityMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveEntityMembers_Call) RunAndReturn(run func(ctx context.Context, entityID string, members []string) error) *MockRepository_RemoveEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMemberFromAllRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveMemberFromAllRoles(ctx context.Context, memberID string) error {
	ret := _mock.Called(ctx, memberID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMemberFromAllRoles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, memberID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveMemberFromAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMemberFromAllRoles'
type MockRepository_RemoveMemberFromAllRoles_Call struct {
	*mock.Call
}

// RemoveMemberFromAllRoles is a helper method to define mock.On call
//   - ctx
//   - memberID
func (_e *MockRepository_Expecter) RemoveMemberFromAllRoles(ctx interface{}, memberID interface{}) *MockRepository_RemoveMemberFromAllRoles_Call {
	return &MockRepository_RemoveMemberFromAllRoles_Call{Call: _e.mock.On("RemoveMemberFromAllRoles", ctx, memberID)}
}

func (_c *MockRepository_RemoveMemberFromAllRoles_Call) Run(run func(ctx context.Context, memberID string)) *MockRepository_RemoveMemberFromAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RemoveMemberFromAllRoles_Call) Return(err error) *MockRepository_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveMemberFromAllRoles_Call) RunAndReturn(run func(ctx context.Context, memberID string) error) *MockRepository_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveRoles(ctx context.Context, roleIDs []string) error {
	ret := _mock.Called(ctx, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctx, roleIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoles'
type MockRepository_RemoveRoles_Call struct {
	*mock.Call
}

// RemoveRoles is a helper method to define mock.On call
//   - ctx
//   - roleIDs
func (_e *MockRepository_Expecter) RemoveRoles(ctx interface{}, roleIDs interface{}) *MockRepository_RemoveRoles_Call {
	return &MockRepository_RemoveRoles_Call{Call: _e.mock.On("RemoveRoles", ctx, roleIDs)}
}

func (_c *MockRepository_RemoveRoles_Call) Run(run func(ctx context.Context, roleIDs []string)) *MockRepository_RemoveRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockRepository_RemoveRoles_Call) Return(err error) *MockRepository_RemoveRoles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveRoles_Call) RunAndReturn(run func(ctx context.Context, roleIDs []string) error) *MockRepository_RemoveRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveAllRoles(ctx context.Context, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _mock.Called(ctx, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllRoles")
	}

	var r0 roles.RolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.RolePage, error)); ok {
		return returnFunc(ctx, entityID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.RolePage); ok {
		r0 = returnFunc(ctx, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllRoles'
type MockRepository_RetrieveAllRoles_Call struct {
	*mock.Call
}

// RetrieveAllRoles is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - limit
//   - offset
func (_e *MockRepository_Expecter) RetrieveAllRoles(ctx interface{}, entityID interface{}, limit interface{}, offset interface{}) *MockRepository_RetrieveAllRoles_Call {
	return &MockRepository_RetrieveAllRoles_Call{Call: _e.mock.On("RetrieveAllRoles", ctx, entityID, limit, offset)}
}

func (_c *MockRepository_RetrieveAllRoles_Call) Run(run func(ctx context.Context, entityID string, limit uint64, offset uint64)) *MockRepository_RetrieveAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockRepository_RetrieveAllRoles_Call) Return(rolePage roles.RolePage, err error) *MockRepository_RetrieveAllRoles_Call {
	_c.Call.Return(rolePage, err)
	return _c
}

func (_c *MockRepository_RetrieveAllRoles_Call) RunAndReturn(run func(ctx context.Context, entityID string, limit uint64, offset uint64) (roles.RolePage, error)) *MockRepository_RetrieveAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntitiesRolesActionsMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveEntitiesRolesActionsMembers(ctx context.Context, entityIDs []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error) {
	ret := _mock.Called(ctx, entityIDs)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntitiesRolesActionsMembers")
	}

	var r0 []roles.EntityActionRole
	var r1 []roles.EntityMemberRole
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error)); ok {
		return returnFunc(ctx, entityIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []roles.EntityActionRole); ok {
		r0 = returnFunc(ctx, entityIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.EntityActionRole)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) []roles.EntityMemberRole); ok {
		r1 = returnFunc(ctx, entityIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]roles.EntityMemberRole)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, []string) error); ok {
		r2 = returnFunc(ctx, entityIDs)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_RetrieveEntitiesRolesActionsMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntitiesRolesActionsMembers'
type MockRepository_RetrieveEntitiesRolesActionsMembers_Call struct {
	*mock.Call
}

// RetrieveEntitiesRolesActionsMembers is a helper method to define mock.On call
//   - ctx
//   - entityIDs
func (_e *MockRepository_Expecter) RetrieveEntitiesRolesActionsMembers(ctx interface{}, entityIDs interface{}) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	return &MockRepository_RetrieveEntitiesRolesActionsMembers_Call{Call: _e.mock.On("RetrieveEntitiesRolesActionsMembers", ctx, entityIDs)}
}

func (_c *MockRepository_RetrieveEntitiesRolesActionsMembers_Call) Run(run func(ctx context.Context, entityIDs []string)) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockRepository_RetrieveEntitiesRolesActionsMembers_Call) Return(entityActionRoles []roles.EntityActionRole, entityMemberRoles []roles.EntityMemberRole, err error) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Return(entityActionRoles, entityMemberRoles, err)
	return _c
}

func (_c *MockRepository_RetrieveEntitiesRolesActionsMembers_Call) RunAndReturn(run func(ctx context.Context, entityIDs []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error)) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntityRole provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveEntityRole(ctx context.Context, entityID string, roleID string) (roles.Role, error) {
	ret := _mock.Called(ctx, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntityRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (roles.Role, error)); ok {
		return returnFunc(ctx, entityID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) roles.Role); ok {
		r0 = returnFunc(ctx, entityID, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, entityID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveEntityRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntityRole'
type MockRepository_RetrieveEntityRole_Call struct {
	*mock.Call
}

// RetrieveEntityRole is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - roleID
func (_e *MockRepository_Expecter) RetrieveEntityRole(ctx interface{}, entityID interface{}, roleID interface{}) *MockRepository_RetrieveEntityRole_Call {
	return &MockRepository_RetrieveEntityRole_Call{Call: _e.mock.On("RetrieveEntityRole", ctx, entityID, roleID)}
}

func (_c *MockRepository_RetrieveEntityRole_Call) Run(run func(ctx context.Context, entityID string, roleID string)) *MockRepository_RetrieveEntityRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveEntityRole_Call) Return(role roles.Role, err error) *MockRepository_RetrieveEntityRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRepository_RetrieveEntityRole_Call) RunAndReturn(run func(ctx context.Context, entityID string, roleID string) (roles.Role, error)) *MockRepository_RetrieveEntityRole_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveRole provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveRole(ctx context.Context, roleID string) (roles.Role, error) {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (roles.Role, error)); ok {
		return returnFunc(ctx, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) roles.Role); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveRole'
type MockRepository_RetrieveRole_Call struct {
	*mock.Call
}

// RetrieveRole is a helper method to define mock.On call
//   - ctx
//   - roleID
func (_e *MockRepository_Expecter) RetrieveRole(ctx interface{}, roleID interface{}) *MockRepository_RetrieveRole_Call {
	return &MockRepository_RetrieveRole_Call{Call: _e.mock.On("RetrieveRole", ctx, roleID)}
}

func (_c *MockRepository_RetrieveRole_Call) Run(run func(ctx context.Context, roleID string)) *MockRepository_RetrieveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveRole_Call) Return(role roles.Role, err error) *MockRepository_RetrieveRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRepository_RetrieveRole_Call) RunAndReturn(run func(ctx context.Context, roleID string) (roles.Role, error)) *MockRepository_RetrieveRole_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleAddActions(ctx context.Context, role roles.Role, actions []string) ([]string, error) {
	ret := _mock.Called(ctx, role, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) ([]string, error)); ok {
		return returnFunc(ctx, role, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) []string); ok {
		r0 = returnFunc(ctx, role, actions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, roles.Role, []string) error); ok {
		r1 = returnFunc(ctx, role, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleAddActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddActions'
type MockRepository_RoleAddActions_Call struct {
	*mock.Call
}

// RoleAddActions is a helper method to define mock.On call
//   - ctx
//   - role
//   - actions
func (_e *MockRepository_Expecter) RoleAddActions(ctx interface{}, role interface{}, actions interface{}) *MockRepository_RoleAddActions_Call {
	return &MockRepository_RoleAddActions_Call{Call: _e.mock.On("RoleAddActions", ctx, role, actions)}
}

func (_c *MockRepository_RoleAddActions_Call) Run(run func(ctx context.Context, role roles.Role, actions []string)) *MockRepository_RoleAddActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleAddActions_Call) Return(ops []string, err error) *MockRepository_RoleAddActions_Call {
	_c.Call.Return(ops, err)
	return _c
}

func (_c *MockRepository_RoleAddActions_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, actions []string) ([]string, error)) *MockRepository_RoleAddActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleAddMembers(ctx context.Context, role roles.Role, members []string) ([]string, error) {
	ret := _mock.Called(ctx, role, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddMembers")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) ([]string, error)); ok {
		return returnFunc(ctx, role, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) []string); ok {
		r0 = returnFunc(ctx, role, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, roles.Role, []string) error); ok {
		r1 = returnFunc(ctx, role, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleAddMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddMembers'
type MockRepository_RoleAddMembers_Call struct {
	*mock.Call
}

// RoleAddMembers is a helper method to define mock.On call
//   - ctx
//   - role
//   - members
func (_e *MockRepository_Expecter) RoleAddMembers(ctx interface{}, role interface{}, members interface{}) *MockRepository_RoleAddMembers_Call {
	return &MockRepository_RoleAddMembers_Call{Call: _e.mock.On("RoleAddMembers", ctx, role, members)}
}

func (_c *MockRepository_RoleAddMembers_Call) Run(run func(ctx context.Context, role roles.Role, members []string)) *MockRepository_RoleAddMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleAddMembers_Call) Return(strings []string, err error) *MockRepository_RoleAddMembers_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRepository_RoleAddMembers_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, members []string) ([]string, error)) *MockRepository_RoleAddMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckActionsExists provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleCheckActionsExists(ctx context.Context, roleID string, actions []string) (bool, error) {
	ret := _mock.Called(ctx, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckActionsExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) (bool, error)); ok {
		return returnFunc(ctx, roleID, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) bool); ok {
		r0 = returnFunc(ctx, roleID, actions)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, roleID, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleCheckActionsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckActionsExists'
type MockRepository_RoleCheckActionsExists_Call struct {
	*mock.Call
}

// RoleCheckActionsExists is a helper method to define mock.On call
//   - ctx
//   - roleID
//   - actions
func (_e *MockRepository_Expecter) RoleCheckActionsExists(ctx interface{}, roleID interface{}, actions interface{}) *MockRepository_RoleCheckActionsExists_Call {
	return &MockRepository_RoleCheckActionsExists_Call{Call: _e.mock.On("RoleCheckActionsExists", ctx, roleID, actions)}
}

func (_c *MockRepository_RoleCheckActionsExists_Call) Run(run func(ctx context.Context, roleID string, actions []string)) *MockRepository_RoleCheckActionsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleCheckActionsExists_Call) Return(b bool, err error) *MockRepository_RoleCheckActionsExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_RoleCheckActionsExists_Call) RunAndReturn(run func(ctx context.Context, roleID string, actions []string) (bool, error)) *MockRepository_RoleCheckActionsExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckMembersExists provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleCheckMembersExists(ctx context.Context, roleID string, members []string) (bool, error) {
	ret := _mock.Called(ctx, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckMembersExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) (bool, error)); ok {
		return returnFunc(ctx, roleID, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) bool); ok {
		r0 = returnFunc(ctx, roleID, members)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, roleID, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleCheckMembersExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckMembersExists'
type MockRepository_RoleCheckMembersExists_Call struct {
	*mock.Call
}

// RoleCheckMembersExists is a helper method to define mock.On call
//   - ctx
//   - roleID
//   - members
func (_e *MockRepository_Expecter) RoleCheckMembersExists(ctx interface{}, roleID interface{}, members interface{}) *MockRepository_RoleCheckMembersExists_Call {
	return &MockRepository_RoleCheckMembersExists_Call{Call: _e.mock.On("RoleCheckMembersExists", ctx, roleID, members)}
}

func (_c *MockRepository_RoleCheckMembersExists_Call) Run(run func(ctx context.Context, roleID string, members []string)) *MockRepository_RoleCheckMembersExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleCheckMembersExists_Call) Return(b bool, err error) *MockRepository_RoleCheckMembersExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_RoleCheckMembersExists_Call) RunAndReturn(run func(ctx context.Context, roleID string, members []string) (bool, error)) *MockRepository_RoleCheckMembersExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleListActions(ctx context.Context, roleID string) ([]string, error) {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleListActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListActions'
type MockRepository_RoleListActions_Call struct {
	*mock.Call
}

// RoleListActions is a helper method to define mock.On call
//   - ctx
//   - roleID
func (_e *MockRepository_Expecter) RoleListActions(ctx interface{}, roleID interface{}) *MockRepository_RoleListActions_Call {
	return &MockRepository_RoleListActions_Call{Call: _e.mock.On("RoleListActions", ctx, roleID)}
}

func (_c *MockRepository_RoleListActions_Call) Run(run func(ctx context.Context, roleID string)) *MockRepository_RoleListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RoleListActions_Call) Return(strings []string, err error) *MockRepository_RoleListActions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRepository_RoleListActions_Call) RunAndReturn(run func(ctx context.Context, roleID string) ([]string, error)) *MockRepository_RoleListActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleListMembers(ctx context.Context, roleID string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _mock.Called(ctx, roleID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RoleListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return returnFunc(ctx, roleID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.MembersPage); ok {
		r0 = returnFunc(ctx, roleID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, roleID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListMembers'
type MockRepository_RoleListMembers_Call struct {
	*mock.Call
}

// RoleListMembers is a helper method to define mock.On call
//   - ctx
//   - roleID
//   - limit
//   - offset
func (_e *MockRepository_Expecter) RoleListMembers(ctx interface{}, roleID interface{}, limit interface{}, offset interface{}) *MockRepository_RoleListMembers_Call {
	return &MockRepository_RoleListMembers_Call{Call: _e.mock.On("RoleListMembers", ctx, roleID, limit, offset)}
}

func (_c *MockRepository_RoleListMembers_Call) Run(run func(ctx context.Context, roleID string, limit uint64, offset uint64)) *MockRepository_RoleListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockRepository_RoleListMembers_Call) Return(membersPage roles.MembersPage, err error) *MockRepository_RoleListMembers_Call {
	_c.Call.Return(membersPage, err)
	return _c
}

func (_c *MockRepository_RoleListMembers_Call) RunAndReturn(run func(ctx context.Context, roleID string, limit uint64, offset uint64) (roles.MembersPage, error)) *MockRepository_RoleListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveActions(ctx context.Context, role roles.Role, actions []string) error {
	ret := _mock.Called(ctx, role, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) error); ok {
		r0 = returnFunc(ctx, role, actions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveActions'
type MockRepository_RoleRemoveActions_Call struct {
	*mock.Call
}

// RoleRemoveActions is a helper method to define mock.On call
//   - ctx
//   - role
//   - actions
func (_e *MockRepository_Expecter) RoleRemoveActions(ctx interface{}, role interface{}, actions interface{}) *MockRepository_RoleRemoveActions_Call {
	return &MockRepository_RoleRemoveActions_Call{Call: _e.mock.On("RoleRemoveActions", ctx, role, actions)}
}

func (_c *MockRepository_RoleRemoveActions_Call) Run(run func(ctx context.Context, role roles.Role, actions []string)) *MockRepository_RoleRemoveActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveActions_Call) Return(err error) *MockRepository_RoleRemoveActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveActions_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, actions []string) error) *MockRepository_RoleRemoveActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveAllActions(ctx context.Context, role roles.Role) error {
	ret := _mock.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) error); ok {
		r0 = returnFunc(ctx, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveAllActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllActions'
type MockRepository_RoleRemoveAllActions_Call struct {
	*mock.Call
}

// RoleRemoveAllActions is a helper method to define mock.On call
//   - ctx
//   - role
func (_e *MockRepository_Expecter) RoleRemoveAllActions(ctx interface{}, role interface{}) *MockRepository_RoleRemoveAllActions_Call {
	return &MockRepository_RoleRemoveAllActions_Call{Call: _e.mock.On("RoleRemoveAllActions", ctx, role)}
}

func (_c *MockRepository_RoleRemoveAllActions_Call) Run(run func(ctx context.Context, role roles.Role)) *MockRepository_RoleRemoveAllActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveAllActions_Call) Return(err error) *MockRepository_RoleRemoveAllActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveAllActions_Call) RunAndReturn(run func(ctx context.Context, role roles.Role) error) *MockRepository_RoleRemoveAllActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveAllMembers(ctx context.Context, role roles.Role) error {
	ret := _mock.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) error); ok {
		r0 = returnFunc(ctx, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveAllMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllMembers'
type MockRepository_RoleRemoveAllMembers_Call struct {
	*mock.Call
}

// RoleRemoveAllMembers is a helper method to define mock.On call
//   - ctx
//   - role
func (_e *MockRepository_Expecter) RoleRemoveAllMembers(ctx interface{}, role interface{}) *MockRepository_RoleRemoveAllMembers_Call {
	return &MockRepository_RoleRemoveAllMembers_Call{Call: _e.mock.On("RoleRemoveAllMembers", ctx, role)}
}

func (_c *MockRepository_RoleRemoveAllMembers_Call) Run(run func(ctx context.Context, role roles.Role)) *MockRepository_RoleRemoveAllMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveAllMembers_Call) Return(err error) *MockRepository_RoleRemoveAllMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveAllMembers_Call) RunAndReturn(run func(ctx context.Context, role roles.Role) error) *MockRepository_RoleRemoveAllMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveMembers(ctx context.Context, role roles.Role, members []string) error {
	ret := _mock.Called(ctx, role, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) error); ok {
		r0 = returnFunc(ctx, role, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveMembers'
type MockRepository_RoleRemoveMembers_Call struct {
	*mock.Call
}

// RoleRemoveMembers is a helper method to define mock.On call
//   - ctx
//   - role
//   - members
func (_e *MockRepository_Expecter) RoleRemoveMembers(ctx interface{}, role interface{}, members interface{}) *MockRepository_RoleRemoveMembers_Call {
	return &MockRepository_RoleRemoveMembers_Call{Call: _e.mock.On("RoleRemoveMembers", ctx, role, members)}
}

func (_c *MockRepository_RoleRemoveMembers_Call) Run(run func(ctx context.Context, role roles.Role, members []string)) *MockRepository_RoleRemoveMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveMembers_Call) Return(err error) *MockRepository_RoleRemoveMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveMembers_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, members []string) error) *MockRepository_RoleRemoveMembers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateRole(ctx context.Context, ro roles.Role) (roles.Role, error) {
	ret := _mock.Called(ctx, ro)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) (roles.Role, error)); ok {
		return returnFunc(ctx, ro)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) roles.Role); ok {
		r0 = returnFunc(ctx, ro)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, roles.Role) error); ok {
		r1 = returnFunc(ctx, ro)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockRepository_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx
//   - ro
func (_e *MockRepository_Expecter) UpdateRole(ctx interface{}, ro interface{}) *MockRepository_UpdateRole_Call {
	return &MockRepository_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, ro)}
}

func (_c *MockRepository_UpdateRole_Call) Run(run func(ctx context.Context, ro roles.Role)) *MockRepository_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *MockRepository_UpdateRole_Call) Return(role roles.Role, err error) *MockRepository_UpdateRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRepository_UpdateRole_Call) RunAndReturn(run func(ctx context.Context, ro roles.Role) (roles.Role, error)) *MockRepository_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}
