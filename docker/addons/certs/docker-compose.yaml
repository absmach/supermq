# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

# This docker-compose file contains optional certs services. Since it's optional, this file is
# dependent of docker-compose file from <project_root>/docker. In order to run this services, execute command:
# docker compose -f docker/docker-compose.yaml -f docker/addons/certs/docker-compose.yaml up
# from project root.

networks:
  supermq-base-net:
    name: supermq-base-net
    external: true

# Volumes for OpenBao data and configuration
volumes:
  openbao_data:
  openbao_config:

services:
  certs:
    image: supermq/certs:${SMQ_RELEASE_TAG}
    container_name: supermq-certs
    depends_on:
      - openbao
    restart: on-failure
    networks:
      - supermq-base-net
    ports:
      - ${SMQ_CERTS_HTTP_PORT}:${SMQ_CERTS_HTTP_PORT}
    environment:
      SMQ_CERTS_LOG_LEVEL: ${SMQ_CERTS_LOG_LEVEL}
      SMQ_CERTS_SIGN_CA_PATH: ${SMQ_CERTS_SIGN_CA_PATH}
      SMQ_CERTS_SIGN_CA_KEY_PATH: ${SMQ_CERTS_SIGN_CA_KEY_PATH}
      # OpenBao PKI configuration
      SMQ_CERTS_OPENBAO_HOST: ${SMQ_CERTS_OPENBAO_HOST}
      SMQ_CERTS_OPENBAO_APP_ROLE: ${SMQ_CERTS_OPENBAO_APP_ROLE}
      SMQ_CERTS_OPENBAO_APP_SECRET: ${SMQ_CERTS_OPENBAO_APP_SECRET}
      SMQ_CERTS_OPENBAO_NAMESPACE: ${SMQ_CERTS_OPENBAO_NAMESPACE}
      SMQ_CERTS_OPENBAO_PKI_PATH: ${SMQ_CERTS_OPENBAO_PKI_PATH}
      SMQ_CERTS_OPENBAO_ROLE: ${SMQ_CERTS_OPENBAO_ROLE}
      SMQ_CERTS_HTTP_HOST: ${SMQ_CERTS_HTTP_HOST}
      SMQ_CERTS_HTTP_PORT: ${SMQ_CERTS_HTTP_PORT}
      SMQ_CERTS_HTTP_SERVER_CERT: ${SMQ_CERTS_HTTP_SERVER_CERT}
      SMQ_CERTS_HTTP_SERVER_KEY: ${SMQ_CERTS_HTTP_SERVER_KEY}
      SMQ_CERTS_DB_HOST: ${SMQ_CERTS_DB_HOST}
      SMQ_CERTS_DB_PORT: ${SMQ_CERTS_DB_PORT}
      SMQ_CERTS_DB_PASS: ${SMQ_CERTS_DB_PASS}
      SMQ_CERTS_DB_USER: ${SMQ_CERTS_DB_USER}
      SMQ_CERTS_DB_NAME: ${SMQ_CERTS_DB_NAME}
      SMQ_CERTS_DB_SSL_MODE: ${SMQ_CERTS_DB_SSL_MODE}
      SMQ_CERTS_DB_SSL_CERT: ${SMQ_CERTS_DB_SSL_CERT}
      SMQ_CERTS_DB_SSL_KEY: ${SMQ_CERTS_DB_SSL_KEY}
      SMQ_CERTS_DB_SSL_ROOT_CERT: ${SMQ_CERTS_DB_SSL_ROOT_CERT}
      SMQ_AUTH_GRPC_URL: ${SMQ_AUTH_GRPC_URL}
      SMQ_AUTH_GRPC_TIMEOUT: ${SMQ_AUTH_GRPC_TIMEOUT}
      SMQ_AUTH_GRPC_CLIENT_CERT: ${SMQ_AUTH_GRPC_CLIENT_CERT:+/auth-grpc-client.crt}
      SMQ_AUTH_GRPC_CLIENT_KEY: ${SMQ_AUTH_GRPC_CLIENT_KEY:+/auth-grpc-client.key}
      SMQ_AUTH_GRPC_SERVER_CA_CERTS: ${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+/auth-grpc-server-ca.crt}
      SMQ_CLIENTS_URL: ${SMQ_CLIENTS_URL}
      SMQ_JAEGER_URL: ${SMQ_JAEGER_URL}
      SMQ_JAEGER_TRACE_RATIO: ${SMQ_JAEGER_TRACE_RATIO}
      SMQ_SEND_TELEMETRY: ${SMQ_SEND_TELEMETRY}
      SMQ_CERTS_INSTANCE_ID: ${SMQ_CERTS_INSTANCE_ID}
    volumes:
      - ../../ssl/certs/ca.key:/etc/ssl/certs/ca.key
      - ../../ssl/certs/ca.crt:/etc/ssl/certs/ca.crt
      - type: bind
        source: ${SMQ_ADDONS_CERTS_PATH_PREFIX}${SMQ_AUTH_GRPC_CLIENT_CERT:-./ssl/certs/dummy/client_cert}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_CERT:+.crt}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_ADDONS_CERTS_PATH_PREFIX}${SMQ_AUTH_GRPC_CLIENT_KEY:-./ssl/certs/dummy/client_key}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_KEY:+.key}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_ADDONS_CERTS_PATH_PREFIX}${SMQ_AUTH_GRPC_SERVER_CA_CERTS:-./ssl/certs/dummy/server_ca}
        target: /auth-grpc-server-ca${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+.crt}
        bind:
          create_host_path: true

  openbao:
    image: openbao/openbao:latest
    container_name: supermq-openbao
    restart: on-failure
    networks:
      - supermq-base-net
    ports:
      - "8200:8200"
    environment:
      - BAO_DEV_ROOT_TOKEN_ID=${SMQ_OPENBAO_ROOT_TOKEN:-openbao-root-token}
      - BAO_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      # Pass configuration to init script
      - BAO_ADDR=http://localhost:8200
      - SMQ_CERTS_OPENBAO_PKI_PATH=${SMQ_CERTS_OPENBAO_PKI_PATH:-pki}
      - SMQ_CERTS_OPENBAO_ROLE=${SMQ_CERTS_OPENBAO_ROLE:-supermq}
      - SMQ_CERTS_OPENBAO_APP_ROLE=${SMQ_CERTS_OPENBAO_APP_ROLE}
      - SMQ_CERTS_OPENBAO_APP_SECRET=${SMQ_CERTS_OPENBAO_APP_SECRET}
    cap_add:
      - IPC_LOCK
    mem_swappiness: 0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/v1/sys/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    volumes:
      # Mount a volume for OpenBao's data directory to persist data across container restarts
      - openbao_data:/openbao/file
      # Mount a volume for OpenBao's configuration directory
      - openbao_config:/openbao/config
    command: >
      sh -c "
        # Start OpenBao in background
        bao server -dev -dev-root-token-id=\"$${BAO_DEV_ROOT_TOKEN_ID:-openbao-root-token}\" -dev-listen-address=\"0.0.0.0:8200\" &
        BAO_PID=\$$!
        
        # Wait for OpenBao to be ready
        echo 'Waiting for OpenBao to be ready...'
        for i in {1..30}; do
          if curl -s -f http://localhost:8200/v1/sys/health >/dev/null 2>&1; then
            echo 'OpenBao is ready!'
            break
          fi
          sleep 2
        done
        
        # Setup OpenBao
        export BAO_ADDR=http://localhost:8200
        export BAO_TOKEN=\"$${BAO_DEV_ROOT_TOKEN_ID:-openbao-root-token}\"
        
        # Check if already configured
        if ! (bao secrets list | grep -q '^pki/' && bao auth list | grep -q '^approle/'); then
          echo 'Configuring OpenBao...'
          
          # Enable auth and secrets
          bao auth enable approle || true
          bao secrets enable -path=pki pki || true
          bao secrets tune -max-lease-ttl=87600h pki
          
          # Generate CA
          bao write -field=certificate pki/root/generate/internal common_name='SuperMQ Root CA' ttl=87600h > /tmp/ca.crt || true
          bao write pki/config/urls issuing_certificates='http://localhost:8200/v1/pki/ca' crl_distribution_points='http://localhost:8200/v1/pki/crl'
          
          # Create role
          bao write pki/roles/supermq allow_any_name=true enforce_hostnames=false allow_ip_sans=true allow_localhost=true max_ttl=720h ttl=720h
          
          # Create policy
          echo 'path \"pki/issue/supermq\" { capabilities = [\"create\", \"update\"] }' > /tmp/policy.hcl
          echo 'path \"pki/certs\" { capabilities = [\"list\"] }' >> /tmp/policy.hcl
          echo 'path \"pki/cert/*\" { capabilities = [\"read\"] }' >> /tmp/policy.hcl
          echo 'path \"pki/revoke\" { capabilities = [\"create\", \"update\"] }' >> /tmp/policy.hcl
          echo 'path \"auth/token/renew-self\" { capabilities = [\"update\"] }' >> /tmp/policy.hcl
          echo 'path \"auth/token/lookup-self\" { capabilities = [\"read\"] }' >> /tmp/policy.hcl
          bao policy write pki-policy /tmp/policy.hcl
          
          # Create AppRole
          bao write auth/approle/role/supermq token_policies=pki-policy token_ttl=1h token_max_ttl=4h bind_secret_id=true
          bao write auth/approle/role/supermq/role-id role_id=\"\$$SMQ_CERTS_OPENBAO_APP_ROLE\"
          bao write auth/approle/role/supermq/custom-secret-id secret_id=\"\$$SMQ_CERTS_OPENBAO_APP_SECRET\"
          
          echo 'OpenBao configuration complete!'
        else
          echo 'OpenBao already configured, skipping initialization'
        fi
        
        echo 'OpenBao is ready for SuperMQ!'
        wait \$$BAO_PID
      "
