// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	auditlogs "github.com/absmach/supermq/auditlogs"
	authn "github.com/absmach/supermq/pkg/authn"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// RetrieveAll provides a mock function with given fields: ctx, session, pm
func (_m *Service) RetrieveAll(ctx context.Context, session authn.Session, pm auditlogs.Page) (auditlogs.AuditLogPage, error) {
	ret := _m.Called(ctx, session, pm)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 auditlogs.AuditLogPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, auditlogs.Page) (auditlogs.AuditLogPage, error)); ok {
		return rf(ctx, session, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, auditlogs.Page) auditlogs.AuditLogPage); ok {
		r0 = rf(ctx, session, pm)
	} else {
		r0 = ret.Get(0).(auditlogs.AuditLogPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, auditlogs.Page) error); ok {
		r1 = rf(ctx, session, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByID provides a mock function with given fields: ctx, session, id
func (_m *Service) RetrieveByID(ctx context.Context, session authn.Session, id string) (auditlogs.AuditLog, error) {
	ret := _m.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 auditlogs.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string) (auditlogs.AuditLog, error)); ok {
		return rf(ctx, session, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string) auditlogs.AuditLog); ok {
		r0 = rf(ctx, session, id)
	} else {
		r0 = ret.Get(0).(auditlogs.AuditLog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = rf(ctx, session, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, log
func (_m *Service) Save(ctx context.Context, log auditlogs.AuditLog) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auditlogs.AuditLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
