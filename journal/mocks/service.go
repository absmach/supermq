// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/journal"
	"github.com/absmach/supermq/pkg/authn"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// RetrieveAll provides a mock function for the type MockService
func (_mock *MockService) RetrieveAll(ctx context.Context, session authn.Session, page journal.Page) (journal.JournalsPage, error) {
	ret := _mock.Called(ctx, session, page)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 journal.JournalsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, journal.Page) (journal.JournalsPage, error)); ok {
		return returnFunc(ctx, session, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, journal.Page) journal.JournalsPage); ok {
		r0 = returnFunc(ctx, session, page)
	} else {
		r0 = ret.Get(0).(journal.JournalsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, journal.Page) error); ok {
		r1 = returnFunc(ctx, session, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAll'
type MockService_RetrieveAll_Call struct {
	*mock.Call
}

// RetrieveAll is a helper method to define mock.On call
//   - ctx
//   - session
//   - page
func (_e *MockService_Expecter) RetrieveAll(ctx interface{}, session interface{}, page interface{}) *MockService_RetrieveAll_Call {
	return &MockService_RetrieveAll_Call{Call: _e.mock.On("RetrieveAll", ctx, session, page)}
}

func (_c *MockService_RetrieveAll_Call) Run(run func(ctx context.Context, session authn.Session, page journal.Page)) *MockService_RetrieveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(journal.Page))
	})
	return _c
}

func (_c *MockService_RetrieveAll_Call) Return(journalsPage journal.JournalsPage, err error) *MockService_RetrieveAll_Call {
	_c.Call.Return(journalsPage, err)
	return _c
}

func (_c *MockService_RetrieveAll_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, page journal.Page) (journal.JournalsPage, error)) *MockService_RetrieveAll_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveClientTelemetry provides a mock function for the type MockService
func (_mock *MockService) RetrieveClientTelemetry(ctx context.Context, session authn.Session, clientID string) (journal.ClientTelemetry, error) {
	ret := _mock.Called(ctx, session, clientID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveClientTelemetry")
	}

	var r0 journal.ClientTelemetry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (journal.ClientTelemetry, error)); ok {
		return returnFunc(ctx, session, clientID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) journal.ClientTelemetry); ok {
		r0 = returnFunc(ctx, session, clientID)
	} else {
		r0 = ret.Get(0).(journal.ClientTelemetry)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, clientID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveClientTelemetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveClientTelemetry'
type MockService_RetrieveClientTelemetry_Call struct {
	*mock.Call
}

// RetrieveClientTelemetry is a helper method to define mock.On call
//   - ctx
//   - session
//   - clientID
func (_e *MockService_Expecter) RetrieveClientTelemetry(ctx interface{}, session interface{}, clientID interface{}) *MockService_RetrieveClientTelemetry_Call {
	return &MockService_RetrieveClientTelemetry_Call{Call: _e.mock.On("RetrieveClientTelemetry", ctx, session, clientID)}
}

func (_c *MockService_RetrieveClientTelemetry_Call) Run(run func(ctx context.Context, session authn.Session, clientID string)) *MockService_RetrieveClientTelemetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_RetrieveClientTelemetry_Call) Return(clientTelemetry journal.ClientTelemetry, err error) *MockService_RetrieveClientTelemetry_Call {
	_c.Call.Return(clientTelemetry, err)
	return _c
}

func (_c *MockService_RetrieveClientTelemetry_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, clientID string) (journal.ClientTelemetry, error)) *MockService_RetrieveClientTelemetry_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockService
func (_mock *MockService) Save(ctx context.Context, journal1 journal.Journal) error {
	ret := _mock.Called(ctx, journal1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, journal.Journal) error); ok {
		r0 = returnFunc(ctx, journal1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockService_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx
//   - journal1
func (_e *MockService_Expecter) Save(ctx interface{}, journal1 interface{}) *MockService_Save_Call {
	return &MockService_Save_Call{Call: _e.mock.On("Save", ctx, journal1)}
}

func (_c *MockService_Save_Call) Run(run func(ctx context.Context, journal1 journal.Journal)) *MockService_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(journal.Journal))
	})
	return _c
}

func (_c *MockService_Save_Call) Return(err error) *MockService_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Save_Call) RunAndReturn(run func(ctx context.Context, journal1 journal.Journal) error) *MockService_Save_Call {
	_c.Call.Return(run)
	return _c
}
