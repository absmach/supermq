// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/channels"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockService
func (_mock *MockService) Authorize(ctx context.Context, req channels.AuthzReq) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, channels.AuthzReq) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockService_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockService_Expecter) Authorize(ctx interface{}, req interface{}) *MockService_Authorize_Call {
	return &MockService_Authorize_Call{Call: _e.mock.On("Authorize", ctx, req)}
}

func (_c *MockService_Authorize_Call) Run(run func(ctx context.Context, req channels.AuthzReq)) *MockService_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.AuthzReq))
	})
	return _c
}

func (_c *MockService_Authorize_Call) Return(err error) *MockService_Authorize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Authorize_Call) RunAndReturn(run func(ctx context.Context, req channels.AuthzReq) error) *MockService_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientConnections provides a mock function for the type MockService
func (_mock *MockService) RemoveClientConnections(ctx context.Context, clientID string) error {
	ret := _mock.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientConnections")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveClientConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientConnections'
type MockService_RemoveClientConnections_Call struct {
	*mock.Call
}

// RemoveClientConnections is a helper method to define mock.On call
//   - ctx
//   - clientID
func (_e *MockService_Expecter) RemoveClientConnections(ctx interface{}, clientID interface{}) *MockService_RemoveClientConnections_Call {
	return &MockService_RemoveClientConnections_Call{Call: _e.mock.On("RemoveClientConnections", ctx, clientID)}
}

func (_c *MockService_RemoveClientConnections_Call) Run(run func(ctx context.Context, clientID string)) *MockService_RemoveClientConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_RemoveClientConnections_Call) Return(err error) *MockService_RemoveClientConnections_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveClientConnections_Call) RunAndReturn(run func(ctx context.Context, clientID string) error) *MockService_RemoveClientConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByID provides a mock function for the type MockService
func (_mock *MockService) RetrieveByID(ctx context.Context, id string) (channels.Channel, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 channels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (channels.Channel, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) channels.Channel); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByID'
type MockService_RetrieveByID_Call struct {
	*mock.Call
}

// RetrieveByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockService_Expecter) RetrieveByID(ctx interface{}, id interface{}) *MockService_RetrieveByID_Call {
	return &MockService_RetrieveByID_Call{Call: _e.mock.On("RetrieveByID", ctx, id)}
}

func (_c *MockService_RetrieveByID_Call) Run(run func(ctx context.Context, id string)) *MockService_RetrieveByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_RetrieveByID_Call) Return(channel channels.Channel, err error) *MockService_RetrieveByID_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockService_RetrieveByID_Call) RunAndReturn(run func(ctx context.Context, id string) (channels.Channel, error)) *MockService_RetrieveByID_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByRoute provides a mock function for the type MockService
func (_mock *MockService) RetrieveByRoute(ctx context.Context, route string, domainID string) (channels.Channel, error) {
	ret := _mock.Called(ctx, route, domainID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByRoute")
	}

	var r0 channels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (channels.Channel, error)); ok {
		return returnFunc(ctx, route, domainID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) channels.Channel); ok {
		r0 = returnFunc(ctx, route, domainID)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, route, domainID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveByRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByRoute'
type MockService_RetrieveByRoute_Call struct {
	*mock.Call
}

// RetrieveByRoute is a helper method to define mock.On call
//   - ctx
//   - route
//   - domainID
func (_e *MockService_Expecter) RetrieveByRoute(ctx interface{}, route interface{}, domainID interface{}) *MockService_RetrieveByRoute_Call {
	return &MockService_RetrieveByRoute_Call{Call: _e.mock.On("RetrieveByRoute", ctx, route, domainID)}
}

func (_c *MockService_RetrieveByRoute_Call) Run(run func(ctx context.Context, route string, domainID string)) *MockService_RetrieveByRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_RetrieveByRoute_Call) Return(channel channels.Channel, err error) *MockService_RetrieveByRoute_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockService_RetrieveByRoute_Call) RunAndReturn(run func(ctx context.Context, route string, domainID string) (channels.Channel, error)) *MockService_RetrieveByRoute_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetParentGroupFromChannels provides a mock function for the type MockService
func (_mock *MockService) UnsetParentGroupFromChannels(ctx context.Context, parentGroupID string) error {
	ret := _mock.Called(ctx, parentGroupID)

	if len(ret) == 0 {
		panic("no return value specified for UnsetParentGroupFromChannels")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, parentGroupID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_UnsetParentGroupFromChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetParentGroupFromChannels'
type MockService_UnsetParentGroupFromChannels_Call struct {
	*mock.Call
}

// UnsetParentGroupFromChannels is a helper method to define mock.On call
//   - ctx
//   - parentGroupID
func (_e *MockService_Expecter) UnsetParentGroupFromChannels(ctx interface{}, parentGroupID interface{}) *MockService_UnsetParentGroupFromChannels_Call {
	return &MockService_UnsetParentGroupFromChannels_Call{Call: _e.mock.On("UnsetParentGroupFromChannels", ctx, parentGroupID)}
}

func (_c *MockService_UnsetParentGroupFromChannels_Call) Run(run func(ctx context.Context, parentGroupID string)) *MockService_UnsetParentGroupFromChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_UnsetParentGroupFromChannels_Call) Return(err error) *MockService_UnsetParentGroupFromChannels_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_UnsetParentGroupFromChannels_Call) RunAndReturn(run func(ctx context.Context, parentGroupID string) error) *MockService_UnsetParentGroupFromChannels_Call {
	_c.Call.Return(run)
	return _c
}
