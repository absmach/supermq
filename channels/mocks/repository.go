// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	channels "github.com/absmach/supermq/channels"

	mock "github.com/stretchr/testify/mock"

	roles "github.com/absmach/supermq/pkg/roles"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddConnections provides a mock function with given fields: ctx, conns
func (_m *Repository) AddConnections(ctx context.Context, conns []channels.Connection) error {
	ret := _m.Called(ctx, conns)

	if len(ret) == 0 {
		panic("no return value specified for AddConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []channels.Connection) error); ok {
		r0 = rf(ctx, conns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnections'
type Repository_AddConnections_Call struct {
	*mock.Call
}

// AddConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - conns []channels.Connection
func (_e *Repository_Expecter) AddConnections(ctx interface{}, conns interface{}) *Repository_AddConnections_Call {
	return &Repository_AddConnections_Call{Call: _e.mock.On("AddConnections", ctx, conns)}
}

func (_c *Repository_AddConnections_Call) Run(run func(ctx context.Context, conns []channels.Connection)) *Repository_AddConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]channels.Connection))
	})
	return _c
}

func (_c *Repository_AddConnections_Call) Return(_a0 error) *Repository_AddConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_AddConnections_Call) RunAndReturn(run func(context.Context, []channels.Connection) error) *Repository_AddConnections_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoles provides a mock function with given fields: ctx, rps
func (_m *Repository) AddRoles(ctx context.Context, rps []roles.RoleProvision) ([]roles.RoleProvision, error) {
	ret := _m.Called(ctx, rps)

	if len(ret) == 0 {
		panic("no return value specified for AddRoles")
	}

	var r0 []roles.RoleProvision
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []roles.RoleProvision) ([]roles.RoleProvision, error)); ok {
		return rf(ctx, rps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []roles.RoleProvision) []roles.RoleProvision); ok {
		r0 = rf(ctx, rps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.RoleProvision)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []roles.RoleProvision) error); ok {
		r1 = rf(ctx, rps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_AddRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoles'
type Repository_AddRoles_Call struct {
	*mock.Call
}

// AddRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - rps []roles.RoleProvision
func (_e *Repository_Expecter) AddRoles(ctx interface{}, rps interface{}) *Repository_AddRoles_Call {
	return &Repository_AddRoles_Call{Call: _e.mock.On("AddRoles", ctx, rps)}
}

func (_c *Repository_AddRoles_Call) Run(run func(ctx context.Context, rps []roles.RoleProvision)) *Repository_AddRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]roles.RoleProvision))
	})
	return _c
}

func (_c *Repository_AddRoles_Call) Return(_a0 []roles.RoleProvision, _a1 error) *Repository_AddRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_AddRoles_Call) RunAndReturn(run func(context.Context, []roles.RoleProvision) ([]roles.RoleProvision, error)) *Repository_AddRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeStatus provides a mock function with given fields: ctx, channel
func (_m *Repository) ChangeStatus(ctx context.Context, channel channels.Channel) (channels.Channel, error) {
	ret := _m.Called(ctx, channel)

	if len(ret) == 0 {
		panic("no return value specified for ChangeStatus")
	}

	var r0 channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) (channels.Channel, error)); ok {
		return rf(ctx, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) channels.Channel); ok {
		r0 = rf(ctx, channel)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, channels.Channel) error); ok {
		r1 = rf(ctx, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ChangeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeStatus'
type Repository_ChangeStatus_Call struct {
	*mock.Call
}

// ChangeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - channel channels.Channel
func (_e *Repository_Expecter) ChangeStatus(ctx interface{}, channel interface{}) *Repository_ChangeStatus_Call {
	return &Repository_ChangeStatus_Call{Call: _e.mock.On("ChangeStatus", ctx, channel)}
}

func (_c *Repository_ChangeStatus_Call) Run(run func(ctx context.Context, channel channels.Channel)) *Repository_ChangeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Channel))
	})
	return _c
}

func (_c *Repository_ChangeStatus_Call) Return(_a0 channels.Channel, _a1 error) *Repository_ChangeStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ChangeStatus_Call) RunAndReturn(run func(context.Context, channels.Channel) (channels.Channel, error)) *Repository_ChangeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ChannelConnectionsCount provides a mock function with given fields: ctx, id
func (_m *Repository) ChannelConnectionsCount(ctx context.Context, id string) (uint64, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ChannelConnectionsCount")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ChannelConnectionsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChannelConnectionsCount'
type Repository_ChannelConnectionsCount_Call struct {
	*mock.Call
}

// ChannelConnectionsCount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) ChannelConnectionsCount(ctx interface{}, id interface{}) *Repository_ChannelConnectionsCount_Call {
	return &Repository_ChannelConnectionsCount_Call{Call: _e.mock.On("ChannelConnectionsCount", ctx, id)}
}

func (_c *Repository_ChannelConnectionsCount_Call) Run(run func(ctx context.Context, id string)) *Repository_ChannelConnectionsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_ChannelConnectionsCount_Call) Return(_a0 uint64, _a1 error) *Repository_ChannelConnectionsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ChannelConnectionsCount_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *Repository_ChannelConnectionsCount_Call {
	_c.Call.Return(run)
	return _c
}

// CheckConnection provides a mock function with given fields: ctx, conn
func (_m *Repository) CheckConnection(ctx context.Context, conn channels.Connection) error {
	ret := _m.Called(ctx, conn)

	if len(ret) == 0 {
		panic("no return value specified for CheckConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Connection) error); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CheckConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckConnection'
type Repository_CheckConnection_Call struct {
	*mock.Call
}

// CheckConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - conn channels.Connection
func (_e *Repository_Expecter) CheckConnection(ctx interface{}, conn interface{}) *Repository_CheckConnection_Call {
	return &Repository_CheckConnection_Call{Call: _e.mock.On("CheckConnection", ctx, conn)}
}

func (_c *Repository_CheckConnection_Call) Run(run func(ctx context.Context, conn channels.Connection)) *Repository_CheckConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Connection))
	})
	return _c
}

func (_c *Repository_CheckConnection_Call) Return(_a0 error) *Repository_CheckConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CheckConnection_Call) RunAndReturn(run func(context.Context, channels.Connection) error) *Repository_CheckConnection_Call {
	_c.Call.Return(run)
	return _c
}

// ClientAuthorize provides a mock function with given fields: ctx, conn
func (_m *Repository) ClientAuthorize(ctx context.Context, conn channels.Connection) error {
	ret := _m.Called(ctx, conn)

	if len(ret) == 0 {
		panic("no return value specified for ClientAuthorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Connection) error); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_ClientAuthorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientAuthorize'
type Repository_ClientAuthorize_Call struct {
	*mock.Call
}

// ClientAuthorize is a helper method to define mock.On call
//   - ctx context.Context
//   - conn channels.Connection
func (_e *Repository_Expecter) ClientAuthorize(ctx interface{}, conn interface{}) *Repository_ClientAuthorize_Call {
	return &Repository_ClientAuthorize_Call{Call: _e.mock.On("ClientAuthorize", ctx, conn)}
}

func (_c *Repository_ClientAuthorize_Call) Run(run func(ctx context.Context, conn channels.Connection)) *Repository_ClientAuthorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Connection))
	})
	return _c
}

func (_c *Repository_ClientAuthorize_Call) Return(_a0 error) *Repository_ClientAuthorize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_ClientAuthorize_Call) RunAndReturn(run func(context.Context, channels.Connection) error) *Repository_ClientAuthorize_Call {
	_c.Call.Return(run)
	return _c
}

// DoesChannelHaveConnections provides a mock function with given fields: ctx, id
func (_m *Repository) DoesChannelHaveConnections(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DoesChannelHaveConnections")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_DoesChannelHaveConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesChannelHaveConnections'
type Repository_DoesChannelHaveConnections_Call struct {
	*mock.Call
}

// DoesChannelHaveConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) DoesChannelHaveConnections(ctx interface{}, id interface{}) *Repository_DoesChannelHaveConnections_Call {
	return &Repository_DoesChannelHaveConnections_Call{Call: _e.mock.On("DoesChannelHaveConnections", ctx, id)}
}

func (_c *Repository_DoesChannelHaveConnections_Call) Run(run func(ctx context.Context, id string)) *Repository_DoesChannelHaveConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_DoesChannelHaveConnections_Call) Return(_a0 bool, _a1 error) *Repository_DoesChannelHaveConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_DoesChannelHaveConnections_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Repository_DoesChannelHaveConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntityMembers provides a mock function with given fields: ctx, entityID, pageQuery
func (_m *Repository) ListEntityMembers(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery) (roles.MembersRolePage, error) {
	ret := _m.Called(ctx, entityID, pageQuery)

	if len(ret) == 0 {
		panic("no return value specified for ListEntityMembers")
	}

	var r0 roles.MembersRolePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, roles.MembersRolePageQuery) (roles.MembersRolePage, error)); ok {
		return rf(ctx, entityID, pageQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, roles.MembersRolePageQuery) roles.MembersRolePage); ok {
		r0 = rf(ctx, entityID, pageQuery)
	} else {
		r0 = ret.Get(0).(roles.MembersRolePage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, roles.MembersRolePageQuery) error); ok {
		r1 = rf(ctx, entityID, pageQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntityMembers'
type Repository_ListEntityMembers_Call struct {
	*mock.Call
}

// ListEntityMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
//   - pageQuery roles.MembersRolePageQuery
func (_e *Repository_Expecter) ListEntityMembers(ctx interface{}, entityID interface{}, pageQuery interface{}) *Repository_ListEntityMembers_Call {
	return &Repository_ListEntityMembers_Call{Call: _e.mock.On("ListEntityMembers", ctx, entityID, pageQuery)}
}

func (_c *Repository_ListEntityMembers_Call) Run(run func(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery)) *Repository_ListEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(roles.MembersRolePageQuery))
	})
	return _c
}

func (_c *Repository_ListEntityMembers_Call) Return(_a0 roles.MembersRolePage, _a1 error) *Repository_ListEntityMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListEntityMembers_Call) RunAndReturn(run func(context.Context, string, roles.MembersRolePageQuery) (roles.MembersRolePage, error)) *Repository_ListEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, ids
func (_m *Repository) Remove(ctx context.Context, ids ...string) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Repository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...string
func (_e *Repository_Expecter) Remove(ctx interface{}, ids ...interface{}) *Repository_Remove_Call {
	return &Repository_Remove_Call{Call: _e.mock.On("Remove",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *Repository_Remove_Call) Run(run func(ctx context.Context, ids ...string)) *Repository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Repository_Remove_Call) Return(_a0 error) *Repository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Remove_Call) RunAndReturn(run func(context.Context, ...string) error) *Repository_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannelConnections provides a mock function with given fields: ctx, channelID
func (_m *Repository) RemoveChannelConnections(ctx context.Context, channelID string) error {
	ret := _m.Called(ctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveChannelConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannelConnections'
type Repository_RemoveChannelConnections_Call struct {
	*mock.Call
}

// RemoveChannelConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - channelID string
func (_e *Repository_Expecter) RemoveChannelConnections(ctx interface{}, channelID interface{}) *Repository_RemoveChannelConnections_Call {
	return &Repository_RemoveChannelConnections_Call{Call: _e.mock.On("RemoveChannelConnections", ctx, channelID)}
}

func (_c *Repository_RemoveChannelConnections_Call) Run(run func(ctx context.Context, channelID string)) *Repository_RemoveChannelConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RemoveChannelConnections_Call) Return(_a0 error) *Repository_RemoveChannelConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveChannelConnections_Call) RunAndReturn(run func(context.Context, string) error) *Repository_RemoveChannelConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientConnections provides a mock function with given fields: ctx, clientID
func (_m *Repository) RemoveClientConnections(ctx context.Context, clientID string) error {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveClientConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientConnections'
type Repository_RemoveClientConnections_Call struct {
	*mock.Call
}

// RemoveClientConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *Repository_Expecter) RemoveClientConnections(ctx interface{}, clientID interface{}) *Repository_RemoveClientConnections_Call {
	return &Repository_RemoveClientConnections_Call{Call: _e.mock.On("RemoveClientConnections", ctx, clientID)}
}

func (_c *Repository_RemoveClientConnections_Call) Run(run func(ctx context.Context, clientID string)) *Repository_RemoveClientConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RemoveClientConnections_Call) Return(_a0 error) *Repository_RemoveClientConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveClientConnections_Call) RunAndReturn(run func(context.Context, string) error) *Repository_RemoveClientConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnections provides a mock function with given fields: ctx, conns
func (_m *Repository) RemoveConnections(ctx context.Context, conns []channels.Connection) error {
	ret := _m.Called(ctx, conns)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []channels.Connection) error); ok {
		r0 = rf(ctx, conns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnections'
type Repository_RemoveConnections_Call struct {
	*mock.Call
}

// RemoveConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - conns []channels.Connection
func (_e *Repository_Expecter) RemoveConnections(ctx interface{}, conns interface{}) *Repository_RemoveConnections_Call {
	return &Repository_RemoveConnections_Call{Call: _e.mock.On("RemoveConnections", ctx, conns)}
}

func (_c *Repository_RemoveConnections_Call) Run(run func(ctx context.Context, conns []channels.Connection)) *Repository_RemoveConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]channels.Connection))
	})
	return _c
}

func (_c *Repository_RemoveConnections_Call) Return(_a0 error) *Repository_RemoveConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveConnections_Call) RunAndReturn(run func(context.Context, []channels.Connection) error) *Repository_RemoveConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEntityMembers provides a mock function with given fields: ctx, entityID, members
func (_m *Repository) RemoveEntityMembers(ctx context.Context, entityID string, members []string) error {
	ret := _m.Called(ctx, entityID, members)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEntityMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, entityID, members)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEntityMembers'
type Repository_RemoveEntityMembers_Call struct {
	*mock.Call
}

// RemoveEntityMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
//   - members []string
func (_e *Repository_Expecter) RemoveEntityMembers(ctx interface{}, entityID interface{}, members interface{}) *Repository_RemoveEntityMembers_Call {
	return &Repository_RemoveEntityMembers_Call{Call: _e.mock.On("RemoveEntityMembers", ctx, entityID, members)}
}

func (_c *Repository_RemoveEntityMembers_Call) Run(run func(ctx context.Context, entityID string, members []string)) *Repository_RemoveEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *Repository_RemoveEntityMembers_Call) Return(_a0 error) *Repository_RemoveEntityMembers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveEntityMembers_Call) RunAndReturn(run func(context.Context, string, []string) error) *Repository_RemoveEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMemberFromAllRoles provides a mock function with given fields: ctx, memberID
func (_m *Repository) RemoveMemberFromAllRoles(ctx context.Context, memberID string) error {
	ret := _m.Called(ctx, memberID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMemberFromAllRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveMemberFromAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMemberFromAllRoles'
type Repository_RemoveMemberFromAllRoles_Call struct {
	*mock.Call
}

// RemoveMemberFromAllRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - memberID string
func (_e *Repository_Expecter) RemoveMemberFromAllRoles(ctx interface{}, memberID interface{}) *Repository_RemoveMemberFromAllRoles_Call {
	return &Repository_RemoveMemberFromAllRoles_Call{Call: _e.mock.On("RemoveMemberFromAllRoles", ctx, memberID)}
}

func (_c *Repository_RemoveMemberFromAllRoles_Call) Run(run func(ctx context.Context, memberID string)) *Repository_RemoveMemberFromAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RemoveMemberFromAllRoles_Call) Return(err error) *Repository_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_RemoveMemberFromAllRoles_Call) RunAndReturn(run func(context.Context, string) error) *Repository_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveParentGroup provides a mock function with given fields: ctx, ch
func (_m *Repository) RemoveParentGroup(ctx context.Context, ch channels.Channel) error {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for RemoveParentGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) error); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveParentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveParentGroup'
type Repository_RemoveParentGroup_Call struct {
	*mock.Call
}

// RemoveParentGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - ch channels.Channel
func (_e *Repository_Expecter) RemoveParentGroup(ctx interface{}, ch interface{}) *Repository_RemoveParentGroup_Call {
	return &Repository_RemoveParentGroup_Call{Call: _e.mock.On("RemoveParentGroup", ctx, ch)}
}

func (_c *Repository_RemoveParentGroup_Call) Run(run func(ctx context.Context, ch channels.Channel)) *Repository_RemoveParentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Channel))
	})
	return _c
}

func (_c *Repository_RemoveParentGroup_Call) Return(_a0 error) *Repository_RemoveParentGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveParentGroup_Call) RunAndReturn(run func(context.Context, channels.Channel) error) *Repository_RemoveParentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoles provides a mock function with given fields: ctx, roleIDs
func (_m *Repository) RemoveRoles(ctx context.Context, roleIDs []string) error {
	ret := _m.Called(ctx, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoles'
type Repository_RemoveRoles_Call struct {
	*mock.Call
}

// RemoveRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - roleIDs []string
func (_e *Repository_Expecter) RemoveRoles(ctx interface{}, roleIDs interface{}) *Repository_RemoveRoles_Call {
	return &Repository_RemoveRoles_Call{Call: _e.mock.On("RemoveRoles", ctx, roleIDs)}
}

func (_c *Repository_RemoveRoles_Call) Run(run func(ctx context.Context, roleIDs []string)) *Repository_RemoveRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Repository_RemoveRoles_Call) Return(_a0 error) *Repository_RemoveRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveRoles_Call) RunAndReturn(run func(context.Context, []string) error) *Repository_RemoveRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAll provides a mock function with given fields: ctx, pm
func (_m *Repository) RetrieveAll(ctx context.Context, pm channels.Page) (channels.ChannelsPage, error) {
	ret := _m.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 channels.ChannelsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Page) (channels.ChannelsPage, error)); ok {
		return rf(ctx, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, channels.Page) channels.ChannelsPage); ok {
		r0 = rf(ctx, pm)
	} else {
		r0 = ret.Get(0).(channels.ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, channels.Page) error); ok {
		r1 = rf(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAll'
type Repository_RetrieveAll_Call struct {
	*mock.Call
}

// RetrieveAll is a helper method to define mock.On call
//   - ctx context.Context
//   - pm channels.Page
func (_e *Repository_Expecter) RetrieveAll(ctx interface{}, pm interface{}) *Repository_RetrieveAll_Call {
	return &Repository_RetrieveAll_Call{Call: _e.mock.On("RetrieveAll", ctx, pm)}
}

func (_c *Repository_RetrieveAll_Call) Run(run func(ctx context.Context, pm channels.Page)) *Repository_RetrieveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Page))
	})
	return _c
}

func (_c *Repository_RetrieveAll_Call) Return(_a0 channels.ChannelsPage, _a1 error) *Repository_RetrieveAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveAll_Call) RunAndReturn(run func(context.Context, channels.Page) (channels.ChannelsPage, error)) *Repository_RetrieveAll_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllRoles provides a mock function with given fields: ctx, entityID, limit, offset
func (_m *Repository) RetrieveAllRoles(ctx context.Context, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _m.Called(ctx, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllRoles")
	}

	var r0 roles.RolePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.RolePage, error)); ok {
		return rf(ctx, entityID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.RolePage); ok {
		r0 = rf(ctx, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllRoles'
type Repository_RetrieveAllRoles_Call struct {
	*mock.Call
}

// RetrieveAllRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
//   - limit uint64
//   - offset uint64
func (_e *Repository_Expecter) RetrieveAllRoles(ctx interface{}, entityID interface{}, limit interface{}, offset interface{}) *Repository_RetrieveAllRoles_Call {
	return &Repository_RetrieveAllRoles_Call{Call: _e.mock.On("RetrieveAllRoles", ctx, entityID, limit, offset)}
}

func (_c *Repository_RetrieveAllRoles_Call) Run(run func(ctx context.Context, entityID string, limit uint64, offset uint64)) *Repository_RetrieveAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *Repository_RetrieveAllRoles_Call) Return(_a0 roles.RolePage, _a1 error) *Repository_RetrieveAllRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveAllRoles_Call) RunAndReturn(run func(context.Context, string, uint64, uint64) (roles.RolePage, error)) *Repository_RetrieveAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByID provides a mock function with given fields: ctx, id
func (_m *Repository) RetrieveByID(ctx context.Context, id string) (channels.Channel, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (channels.Channel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) channels.Channel); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByID'
type Repository_RetrieveByID_Call struct {
	*mock.Call
}

// RetrieveByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) RetrieveByID(ctx interface{}, id interface{}) *Repository_RetrieveByID_Call {
	return &Repository_RetrieveByID_Call{Call: _e.mock.On("RetrieveByID", ctx, id)}
}

func (_c *Repository_RetrieveByID_Call) Run(run func(ctx context.Context, id string)) *Repository_RetrieveByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RetrieveByID_Call) Return(_a0 channels.Channel, _a1 error) *Repository_RetrieveByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveByID_Call) RunAndReturn(run func(context.Context, string) (channels.Channel, error)) *Repository_RetrieveByID_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByIDWithRoles provides a mock function with given fields: ctx, id, memberID
func (_m *Repository) RetrieveByIDWithRoles(ctx context.Context, id string, memberID string) (channels.Channel, error) {
	ret := _m.Called(ctx, id, memberID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByIDWithRoles")
	}

	var r0 channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (channels.Channel, error)); ok {
		return rf(ctx, id, memberID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) channels.Channel); ok {
		r0 = rf(ctx, id, memberID)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveByIDWithRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByIDWithRoles'
type Repository_RetrieveByIDWithRoles_Call struct {
	*mock.Call
}

// RetrieveByIDWithRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - memberID string
func (_e *Repository_Expecter) RetrieveByIDWithRoles(ctx interface{}, id interface{}, memberID interface{}) *Repository_RetrieveByIDWithRoles_Call {
	return &Repository_RetrieveByIDWithRoles_Call{Call: _e.mock.On("RetrieveByIDWithRoles", ctx, id, memberID)}
}

func (_c *Repository_RetrieveByIDWithRoles_Call) Run(run func(ctx context.Context, id string, memberID string)) *Repository_RetrieveByIDWithRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_RetrieveByIDWithRoles_Call) Return(_a0 channels.Channel, _a1 error) *Repository_RetrieveByIDWithRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveByIDWithRoles_Call) RunAndReturn(run func(context.Context, string, string) (channels.Channel, error)) *Repository_RetrieveByIDWithRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntitiesRolesActionsMembers provides a mock function with given fields: ctx, entityIDs
func (_m *Repository) RetrieveEntitiesRolesActionsMembers(ctx context.Context, entityIDs []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error) {
	ret := _m.Called(ctx, entityIDs)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntitiesRolesActionsMembers")
	}

	var r0 []roles.EntityActionRole
	var r1 []roles.EntityMemberRole
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error)); ok {
		return rf(ctx, entityIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []roles.EntityActionRole); ok {
		r0 = rf(ctx, entityIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.EntityActionRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) []roles.EntityMemberRole); ok {
		r1 = rf(ctx, entityIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]roles.EntityMemberRole)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string) error); ok {
		r2 = rf(ctx, entityIDs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_RetrieveEntitiesRolesActionsMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntitiesRolesActionsMembers'
type Repository_RetrieveEntitiesRolesActionsMembers_Call struct {
	*mock.Call
}

// RetrieveEntitiesRolesActionsMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - entityIDs []string
func (_e *Repository_Expecter) RetrieveEntitiesRolesActionsMembers(ctx interface{}, entityIDs interface{}) *Repository_RetrieveEntitiesRolesActionsMembers_Call {
	return &Repository_RetrieveEntitiesRolesActionsMembers_Call{Call: _e.mock.On("RetrieveEntitiesRolesActionsMembers", ctx, entityIDs)}
}

func (_c *Repository_RetrieveEntitiesRolesActionsMembers_Call) Run(run func(ctx context.Context, entityIDs []string)) *Repository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Repository_RetrieveEntitiesRolesActionsMembers_Call) Return(_a0 []roles.EntityActionRole, _a1 []roles.EntityMemberRole, _a2 error) *Repository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_RetrieveEntitiesRolesActionsMembers_Call) RunAndReturn(run func(context.Context, []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error)) *Repository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntityRole provides a mock function with given fields: ctx, entityID, roleID
func (_m *Repository) RetrieveEntityRole(ctx context.Context, entityID string, roleID string) (roles.Role, error) {
	ret := _m.Called(ctx, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntityRole")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (roles.Role, error)); ok {
		return rf(ctx, entityID, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) roles.Role); ok {
		r0 = rf(ctx, entityID, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entityID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveEntityRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntityRole'
type Repository_RetrieveEntityRole_Call struct {
	*mock.Call
}

// RetrieveEntityRole is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
//   - roleID string
func (_e *Repository_Expecter) RetrieveEntityRole(ctx interface{}, entityID interface{}, roleID interface{}) *Repository_RetrieveEntityRole_Call {
	return &Repository_RetrieveEntityRole_Call{Call: _e.mock.On("RetrieveEntityRole", ctx, entityID, roleID)}
}

func (_c *Repository_RetrieveEntityRole_Call) Run(run func(ctx context.Context, entityID string, roleID string)) *Repository_RetrieveEntityRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_RetrieveEntityRole_Call) Return(_a0 roles.Role, _a1 error) *Repository_RetrieveEntityRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveEntityRole_Call) RunAndReturn(run func(context.Context, string, string) (roles.Role, error)) *Repository_RetrieveEntityRole_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveParentGroupChannels provides a mock function with given fields: ctx, parentGroupID
func (_m *Repository) RetrieveParentGroupChannels(ctx context.Context, parentGroupID string) ([]channels.Channel, error) {
	ret := _m.Called(ctx, parentGroupID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveParentGroupChannels")
	}

	var r0 []channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]channels.Channel, error)); ok {
		return rf(ctx, parentGroupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []channels.Channel); ok {
		r0 = rf(ctx, parentGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]channels.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, parentGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveParentGroupChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveParentGroupChannels'
type Repository_RetrieveParentGroupChannels_Call struct {
	*mock.Call
}

// RetrieveParentGroupChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - parentGroupID string
func (_e *Repository_Expecter) RetrieveParentGroupChannels(ctx interface{}, parentGroupID interface{}) *Repository_RetrieveParentGroupChannels_Call {
	return &Repository_RetrieveParentGroupChannels_Call{Call: _e.mock.On("RetrieveParentGroupChannels", ctx, parentGroupID)}
}

func (_c *Repository_RetrieveParentGroupChannels_Call) Run(run func(ctx context.Context, parentGroupID string)) *Repository_RetrieveParentGroupChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RetrieveParentGroupChannels_Call) Return(_a0 []channels.Channel, _a1 error) *Repository_RetrieveParentGroupChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveParentGroupChannels_Call) RunAndReturn(run func(context.Context, string) ([]channels.Channel, error)) *Repository_RetrieveParentGroupChannels_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveRole provides a mock function with given fields: ctx, roleID
func (_m *Repository) RetrieveRole(ctx context.Context, roleID string) (roles.Role, error) {
	ret := _m.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRole")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (roles.Role, error)); ok {
		return rf(ctx, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) roles.Role); ok {
		r0 = rf(ctx, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveRole'
type Repository_RetrieveRole_Call struct {
	*mock.Call
}

// RetrieveRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
func (_e *Repository_Expecter) RetrieveRole(ctx interface{}, roleID interface{}) *Repository_RetrieveRole_Call {
	return &Repository_RetrieveRole_Call{Call: _e.mock.On("RetrieveRole", ctx, roleID)}
}

func (_c *Repository_RetrieveRole_Call) Run(run func(ctx context.Context, roleID string)) *Repository_RetrieveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RetrieveRole_Call) Return(_a0 roles.Role, _a1 error) *Repository_RetrieveRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveRole_Call) RunAndReturn(run func(context.Context, string) (roles.Role, error)) *Repository_RetrieveRole_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveUserChannels provides a mock function with given fields: ctx, domainID, userID, pm
func (_m *Repository) RetrieveUserChannels(ctx context.Context, domainID string, userID string, pm channels.Page) (channels.ChannelsPage, error) {
	ret := _m.Called(ctx, domainID, userID, pm)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveUserChannels")
	}

	var r0 channels.ChannelsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, channels.Page) (channels.ChannelsPage, error)); ok {
		return rf(ctx, domainID, userID, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, channels.Page) channels.ChannelsPage); ok {
		r0 = rf(ctx, domainID, userID, pm)
	} else {
		r0 = ret.Get(0).(channels.ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, channels.Page) error); ok {
		r1 = rf(ctx, domainID, userID, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RetrieveUserChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveUserChannels'
type Repository_RetrieveUserChannels_Call struct {
	*mock.Call
}

// RetrieveUserChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - domainID string
//   - userID string
//   - pm channels.Page
func (_e *Repository_Expecter) RetrieveUserChannels(ctx interface{}, domainID interface{}, userID interface{}, pm interface{}) *Repository_RetrieveUserChannels_Call {
	return &Repository_RetrieveUserChannels_Call{Call: _e.mock.On("RetrieveUserChannels", ctx, domainID, userID, pm)}
}

func (_c *Repository_RetrieveUserChannels_Call) Run(run func(ctx context.Context, domainID string, userID string, pm channels.Page)) *Repository_RetrieveUserChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(channels.Page))
	})
	return _c
}

func (_c *Repository_RetrieveUserChannels_Call) Return(_a0 channels.ChannelsPage, _a1 error) *Repository_RetrieveUserChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RetrieveUserChannels_Call) RunAndReturn(run func(context.Context, string, string, channels.Page) (channels.ChannelsPage, error)) *Repository_RetrieveUserChannels_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddActions provides a mock function with given fields: ctx, role, actions
func (_m *Repository) RoleAddActions(ctx context.Context, role roles.Role, actions []string) ([]string, error) {
	ret := _m.Called(ctx, role, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddActions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role, []string) ([]string, error)); ok {
		return rf(ctx, role, actions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role, []string) []string); ok {
		r0 = rf(ctx, role, actions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, roles.Role, []string) error); ok {
		r1 = rf(ctx, role, actions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RoleAddActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddActions'
type Repository_RoleAddActions_Call struct {
	*mock.Call
}

// RoleAddActions is a helper method to define mock.On call
//   - ctx context.Context
//   - role roles.Role
//   - actions []string
func (_e *Repository_Expecter) RoleAddActions(ctx interface{}, role interface{}, actions interface{}) *Repository_RoleAddActions_Call {
	return &Repository_RoleAddActions_Call{Call: _e.mock.On("RoleAddActions", ctx, role, actions)}
}

func (_c *Repository_RoleAddActions_Call) Run(run func(ctx context.Context, role roles.Role, actions []string)) *Repository_RoleAddActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *Repository_RoleAddActions_Call) Return(ops []string, err error) *Repository_RoleAddActions_Call {
	_c.Call.Return(ops, err)
	return _c
}

func (_c *Repository_RoleAddActions_Call) RunAndReturn(run func(context.Context, roles.Role, []string) ([]string, error)) *Repository_RoleAddActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddMembers provides a mock function with given fields: ctx, role, members
func (_m *Repository) RoleAddMembers(ctx context.Context, role roles.Role, members []string) ([]string, error) {
	ret := _m.Called(ctx, role, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddMembers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role, []string) ([]string, error)); ok {
		return rf(ctx, role, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role, []string) []string); ok {
		r0 = rf(ctx, role, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, roles.Role, []string) error); ok {
		r1 = rf(ctx, role, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RoleAddMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddMembers'
type Repository_RoleAddMembers_Call struct {
	*mock.Call
}

// RoleAddMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - role roles.Role
//   - members []string
func (_e *Repository_Expecter) RoleAddMembers(ctx interface{}, role interface{}, members interface{}) *Repository_RoleAddMembers_Call {
	return &Repository_RoleAddMembers_Call{Call: _e.mock.On("RoleAddMembers", ctx, role, members)}
}

func (_c *Repository_RoleAddMembers_Call) Run(run func(ctx context.Context, role roles.Role, members []string)) *Repository_RoleAddMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *Repository_RoleAddMembers_Call) Return(_a0 []string, _a1 error) *Repository_RoleAddMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RoleAddMembers_Call) RunAndReturn(run func(context.Context, roles.Role, []string) ([]string, error)) *Repository_RoleAddMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckActionsExists provides a mock function with given fields: ctx, roleID, actions
func (_m *Repository) RoleCheckActionsExists(ctx context.Context, roleID string, actions []string) (bool, error) {
	ret := _m.Called(ctx, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckActionsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (bool, error)); ok {
		return rf(ctx, roleID, actions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) bool); ok {
		r0 = rf(ctx, roleID, actions)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, roleID, actions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RoleCheckActionsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckActionsExists'
type Repository_RoleCheckActionsExists_Call struct {
	*mock.Call
}

// RoleCheckActionsExists is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
//   - actions []string
func (_e *Repository_Expecter) RoleCheckActionsExists(ctx interface{}, roleID interface{}, actions interface{}) *Repository_RoleCheckActionsExists_Call {
	return &Repository_RoleCheckActionsExists_Call{Call: _e.mock.On("RoleCheckActionsExists", ctx, roleID, actions)}
}

func (_c *Repository_RoleCheckActionsExists_Call) Run(run func(ctx context.Context, roleID string, actions []string)) *Repository_RoleCheckActionsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *Repository_RoleCheckActionsExists_Call) Return(_a0 bool, _a1 error) *Repository_RoleCheckActionsExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RoleCheckActionsExists_Call) RunAndReturn(run func(context.Context, string, []string) (bool, error)) *Repository_RoleCheckActionsExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckMembersExists provides a mock function with given fields: ctx, roleID, members
func (_m *Repository) RoleCheckMembersExists(ctx context.Context, roleID string, members []string) (bool, error) {
	ret := _m.Called(ctx, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckMembersExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (bool, error)); ok {
		return rf(ctx, roleID, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) bool); ok {
		r0 = rf(ctx, roleID, members)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, roleID, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RoleCheckMembersExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckMembersExists'
type Repository_RoleCheckMembersExists_Call struct {
	*mock.Call
}

// RoleCheckMembersExists is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
//   - members []string
func (_e *Repository_Expecter) RoleCheckMembersExists(ctx interface{}, roleID interface{}, members interface{}) *Repository_RoleCheckMembersExists_Call {
	return &Repository_RoleCheckMembersExists_Call{Call: _e.mock.On("RoleCheckMembersExists", ctx, roleID, members)}
}

func (_c *Repository_RoleCheckMembersExists_Call) Run(run func(ctx context.Context, roleID string, members []string)) *Repository_RoleCheckMembersExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *Repository_RoleCheckMembersExists_Call) Return(_a0 bool, _a1 error) *Repository_RoleCheckMembersExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RoleCheckMembersExists_Call) RunAndReturn(run func(context.Context, string, []string) (bool, error)) *Repository_RoleCheckMembersExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListActions provides a mock function with given fields: ctx, roleID
func (_m *Repository) RoleListActions(ctx context.Context, roleID string) ([]string, error) {
	ret := _m.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleListActions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RoleListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListActions'
type Repository_RoleListActions_Call struct {
	*mock.Call
}

// RoleListActions is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
func (_e *Repository_Expecter) RoleListActions(ctx interface{}, roleID interface{}) *Repository_RoleListActions_Call {
	return &Repository_RoleListActions_Call{Call: _e.mock.On("RoleListActions", ctx, roleID)}
}

func (_c *Repository_RoleListActions_Call) Run(run func(ctx context.Context, roleID string)) *Repository_RoleListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RoleListActions_Call) Return(_a0 []string, _a1 error) *Repository_RoleListActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RoleListActions_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *Repository_RoleListActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListMembers provides a mock function with given fields: ctx, roleID, limit, offset
func (_m *Repository) RoleListMembers(ctx context.Context, roleID string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _m.Called(ctx, roleID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RoleListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return rf(ctx, roleID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.MembersPage); ok {
		r0 = rf(ctx, roleID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, roleID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_RoleListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListMembers'
type Repository_RoleListMembers_Call struct {
	*mock.Call
}

// RoleListMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID string
//   - limit uint64
//   - offset uint64
func (_e *Repository_Expecter) RoleListMembers(ctx interface{}, roleID interface{}, limit interface{}, offset interface{}) *Repository_RoleListMembers_Call {
	return &Repository_RoleListMembers_Call{Call: _e.mock.On("RoleListMembers", ctx, roleID, limit, offset)}
}

func (_c *Repository_RoleListMembers_Call) Run(run func(ctx context.Context, roleID string, limit uint64, offset uint64)) *Repository_RoleListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *Repository_RoleListMembers_Call) Return(_a0 roles.MembersPage, _a1 error) *Repository_RoleListMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_RoleListMembers_Call) RunAndReturn(run func(context.Context, string, uint64, uint64) (roles.MembersPage, error)) *Repository_RoleListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveActions provides a mock function with given fields: ctx, role, actions
func (_m *Repository) RoleRemoveActions(ctx context.Context, role roles.Role, actions []string) error {
	ret := _m.Called(ctx, role, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveActions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role, []string) error); ok {
		r0 = rf(ctx, role, actions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RoleRemoveActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveActions'
type Repository_RoleRemoveActions_Call struct {
	*mock.Call
}

// RoleRemoveActions is a helper method to define mock.On call
//   - ctx context.Context
//   - role roles.Role
//   - actions []string
func (_e *Repository_Expecter) RoleRemoveActions(ctx interface{}, role interface{}, actions interface{}) *Repository_RoleRemoveActions_Call {
	return &Repository_RoleRemoveActions_Call{Call: _e.mock.On("RoleRemoveActions", ctx, role, actions)}
}

func (_c *Repository_RoleRemoveActions_Call) Run(run func(ctx context.Context, role roles.Role, actions []string)) *Repository_RoleRemoveActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *Repository_RoleRemoveActions_Call) Return(err error) *Repository_RoleRemoveActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_RoleRemoveActions_Call) RunAndReturn(run func(context.Context, roles.Role, []string) error) *Repository_RoleRemoveActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllActions provides a mock function with given fields: ctx, role
func (_m *Repository) RoleRemoveAllActions(ctx context.Context, role roles.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllActions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RoleRemoveAllActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllActions'
type Repository_RoleRemoveAllActions_Call struct {
	*mock.Call
}

// RoleRemoveAllActions is a helper method to define mock.On call
//   - ctx context.Context
//   - role roles.Role
func (_e *Repository_Expecter) RoleRemoveAllActions(ctx interface{}, role interface{}) *Repository_RoleRemoveAllActions_Call {
	return &Repository_RoleRemoveAllActions_Call{Call: _e.mock.On("RoleRemoveAllActions", ctx, role)}
}

func (_c *Repository_RoleRemoveAllActions_Call) Run(run func(ctx context.Context, role roles.Role)) *Repository_RoleRemoveAllActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *Repository_RoleRemoveAllActions_Call) Return(_a0 error) *Repository_RoleRemoveAllActions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RoleRemoveAllActions_Call) RunAndReturn(run func(context.Context, roles.Role) error) *Repository_RoleRemoveAllActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllMembers provides a mock function with given fields: ctx, role
func (_m *Repository) RoleRemoveAllMembers(ctx context.Context, role roles.Role) error {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RoleRemoveAllMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllMembers'
type Repository_RoleRemoveAllMembers_Call struct {
	*mock.Call
}

// RoleRemoveAllMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - role roles.Role
func (_e *Repository_Expecter) RoleRemoveAllMembers(ctx interface{}, role interface{}) *Repository_RoleRemoveAllMembers_Call {
	return &Repository_RoleRemoveAllMembers_Call{Call: _e.mock.On("RoleRemoveAllMembers", ctx, role)}
}

func (_c *Repository_RoleRemoveAllMembers_Call) Run(run func(ctx context.Context, role roles.Role)) *Repository_RoleRemoveAllMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *Repository_RoleRemoveAllMembers_Call) Return(err error) *Repository_RoleRemoveAllMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_RoleRemoveAllMembers_Call) RunAndReturn(run func(context.Context, roles.Role) error) *Repository_RoleRemoveAllMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveMembers provides a mock function with given fields: ctx, role, members
func (_m *Repository) RoleRemoveMembers(ctx context.Context, role roles.Role, members []string) error {
	ret := _m.Called(ctx, role, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role, []string) error); ok {
		r0 = rf(ctx, role, members)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RoleRemoveMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveMembers'
type Repository_RoleRemoveMembers_Call struct {
	*mock.Call
}

// RoleRemoveMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - role roles.Role
//   - members []string
func (_e *Repository_Expecter) RoleRemoveMembers(ctx interface{}, role interface{}, members interface{}) *Repository_RoleRemoveMembers_Call {
	return &Repository_RoleRemoveMembers_Call{Call: _e.mock.On("RoleRemoveMembers", ctx, role, members)}
}

func (_c *Repository_RoleRemoveMembers_Call) Run(run func(ctx context.Context, role roles.Role, members []string)) *Repository_RoleRemoveMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *Repository_RoleRemoveMembers_Call) Return(err error) *Repository_RoleRemoveMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_RoleRemoveMembers_Call) RunAndReturn(run func(context.Context, roles.Role, []string) error) *Repository_RoleRemoveMembers_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, chs
func (_m *Repository) Save(ctx context.Context, chs ...channels.Channel) ([]channels.Channel, error) {
	_va := make([]interface{}, len(chs))
	for _i := range chs {
		_va[_i] = chs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 []channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...channels.Channel) ([]channels.Channel, error)); ok {
		return rf(ctx, chs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...channels.Channel) []channels.Channel); ok {
		r0 = rf(ctx, chs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]channels.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...channels.Channel) error); ok {
		r1 = rf(ctx, chs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - chs ...channels.Channel
func (_e *Repository_Expecter) Save(ctx interface{}, chs ...interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, chs...)...)}
}

func (_c *Repository_Save_Call) Run(run func(ctx context.Context, chs ...channels.Channel)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]channels.Channel, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(channels.Channel)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Repository_Save_Call) Return(_a0 []channels.Channel, _a1 error) *Repository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(context.Context, ...channels.Channel) ([]channels.Channel, error)) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SetParentGroup provides a mock function with given fields: ctx, ch
func (_m *Repository) SetParentGroup(ctx context.Context, ch channels.Channel) error {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for SetParentGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) error); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SetParentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParentGroup'
type Repository_SetParentGroup_Call struct {
	*mock.Call
}

// SetParentGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - ch channels.Channel
func (_e *Repository_Expecter) SetParentGroup(ctx interface{}, ch interface{}) *Repository_SetParentGroup_Call {
	return &Repository_SetParentGroup_Call{Call: _e.mock.On("SetParentGroup", ctx, ch)}
}

func (_c *Repository_SetParentGroup_Call) Run(run func(ctx context.Context, ch channels.Channel)) *Repository_SetParentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Channel))
	})
	return _c
}

func (_c *Repository_SetParentGroup_Call) Return(_a0 error) *Repository_SetParentGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SetParentGroup_Call) RunAndReturn(run func(context.Context, channels.Channel) error) *Repository_SetParentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetParentGroupFromChannels provides a mock function with given fields: ctx, parentGroupID
func (_m *Repository) UnsetParentGroupFromChannels(ctx context.Context, parentGroupID string) error {
	ret := _m.Called(ctx, parentGroupID)

	if len(ret) == 0 {
		panic("no return value specified for UnsetParentGroupFromChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, parentGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UnsetParentGroupFromChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetParentGroupFromChannels'
type Repository_UnsetParentGroupFromChannels_Call struct {
	*mock.Call
}

// UnsetParentGroupFromChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - parentGroupID string
func (_e *Repository_Expecter) UnsetParentGroupFromChannels(ctx interface{}, parentGroupID interface{}) *Repository_UnsetParentGroupFromChannels_Call {
	return &Repository_UnsetParentGroupFromChannels_Call{Call: _e.mock.On("UnsetParentGroupFromChannels", ctx, parentGroupID)}
}

func (_c *Repository_UnsetParentGroupFromChannels_Call) Run(run func(ctx context.Context, parentGroupID string)) *Repository_UnsetParentGroupFromChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_UnsetParentGroupFromChannels_Call) Return(_a0 error) *Repository_UnsetParentGroupFromChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UnsetParentGroupFromChannels_Call) RunAndReturn(run func(context.Context, string) error) *Repository_UnsetParentGroupFromChannels_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, c
func (_m *Repository) Update(ctx context.Context, c channels.Channel) (channels.Channel, error) {
	ret := _m.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) (channels.Channel, error)); ok {
		return rf(ctx, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) channels.Channel); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, channels.Channel) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - c channels.Channel
func (_e *Repository_Expecter) Update(ctx interface{}, c interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, c)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, c channels.Channel)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Channel))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 channels.Channel, _a1 error) *Repository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, channels.Channel) (channels.Channel, error)) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: ctx, ro
func (_m *Repository) UpdateRole(ctx context.Context, ro roles.Role) (roles.Role, error) {
	ret := _m.Called(ctx, ro)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role) (roles.Role, error)); ok {
		return rf(ctx, ro)
	}
	if rf, ok := ret.Get(0).(func(context.Context, roles.Role) roles.Role); ok {
		r0 = rf(ctx, ro)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, roles.Role) error); ok {
		r1 = rf(ctx, ro)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type Repository_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - ro roles.Role
func (_e *Repository_Expecter) UpdateRole(ctx interface{}, ro interface{}) *Repository_UpdateRole_Call {
	return &Repository_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, ro)}
}

func (_c *Repository_UpdateRole_Call) Run(run func(ctx context.Context, ro roles.Role)) *Repository_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *Repository_UpdateRole_Call) Return(_a0 roles.Role, _a1 error) *Repository_UpdateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_UpdateRole_Call) RunAndReturn(run func(context.Context, roles.Role) (roles.Role, error)) *Repository_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTags provides a mock function with given fields: ctx, ch
func (_m *Repository) UpdateTags(ctx context.Context, ch channels.Channel) (channels.Channel, error) {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTags")
	}

	var r0 channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) (channels.Channel, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, channels.Channel) channels.Channel); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, channels.Channel) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_UpdateTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTags'
type Repository_UpdateTags_Call struct {
	*mock.Call
}

// UpdateTags is a helper method to define mock.On call
//   - ctx context.Context
//   - ch channels.Channel
func (_e *Repository_Expecter) UpdateTags(ctx interface{}, ch interface{}) *Repository_UpdateTags_Call {
	return &Repository_UpdateTags_Call{Call: _e.mock.On("UpdateTags", ctx, ch)}
}

func (_c *Repository_UpdateTags_Call) Run(run func(ctx context.Context, ch channels.Channel)) *Repository_UpdateTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(channels.Channel))
	})
	return _c
}

func (_c *Repository_UpdateTags_Call) Return(_a0 channels.Channel, _a1 error) *Repository_UpdateTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_UpdateTags_Call) RunAndReturn(run func(context.Context, channels.Channel) (channels.Channel, error)) *Repository_UpdateTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
