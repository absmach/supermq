// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/channels"
	"github.com/absmach/supermq/pkg/authn"
	"github.com/absmach/supermq/pkg/connections"
	"github.com/absmach/supermq/pkg/roles"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AddRole provides a mock function for the type MockService
func (_mock *MockService) AddRole(ctx context.Context, session authn.Session, entityID string, roleName string, optionalActions []string, optionalMembers []string) (roles.RoleProvision, error) {
	ret := _mock.Called(ctx, session, entityID, roleName, optionalActions, optionalMembers)

	if len(ret) == 0 {
		panic("no return value specified for AddRole")
	}

	var r0 roles.RoleProvision
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string, []string) (roles.RoleProvision, error)); ok {
		return returnFunc(ctx, session, entityID, roleName, optionalActions, optionalMembers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string, []string) roles.RoleProvision); ok {
		r0 = returnFunc(ctx, session, entityID, roleName, optionalActions, optionalMembers)
	} else {
		r0 = ret.Get(0).(roles.RoleProvision)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleName, optionalActions, optionalMembers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_AddRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRole'
type MockService_AddRole_Call struct {
	*mock.Call
}

// AddRole is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleName
//   - optionalActions
//   - optionalMembers
func (_e *MockService_Expecter) AddRole(ctx interface{}, session interface{}, entityID interface{}, roleName interface{}, optionalActions interface{}, optionalMembers interface{}) *MockService_AddRole_Call {
	return &MockService_AddRole_Call{Call: _e.mock.On("AddRole", ctx, session, entityID, roleName, optionalActions, optionalMembers)}
}

func (_c *MockService_AddRole_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleName string, optionalActions []string, optionalMembers []string)) *MockService_AddRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string), args[5].([]string))
	})
	return _c
}

func (_c *MockService_AddRole_Call) Return(roleProvision roles.RoleProvision, err error) *MockService_AddRole_Call {
	_c.Call.Return(roleProvision, err)
	return _c
}

func (_c *MockService_AddRole_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleName string, optionalActions []string, optionalMembers []string) (roles.RoleProvision, error)) *MockService_AddRole_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function for the type MockService
func (_mock *MockService) Connect(ctx context.Context, session authn.Session, chIDs []string, clIDs []string, connType []connections.ConnType) error {
	ret := _mock.Called(ctx, session, chIDs, clIDs, connType)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, []string, []string, []connections.ConnType) error); ok {
		r0 = returnFunc(ctx, session, chIDs, clIDs, connType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockService_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx
//   - session
//   - chIDs
//   - clIDs
//   - connType
func (_e *MockService_Expecter) Connect(ctx interface{}, session interface{}, chIDs interface{}, clIDs interface{}, connType interface{}) *MockService_Connect_Call {
	return &MockService_Connect_Call{Call: _e.mock.On("Connect", ctx, session, chIDs, clIDs, connType)}
}

func (_c *MockService_Connect_Call) Run(run func(ctx context.Context, session authn.Session, chIDs []string, clIDs []string, connType []connections.ConnType)) *MockService_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].([]string), args[3].([]string), args[4].([]connections.ConnType))
	})
	return _c
}

func (_c *MockService_Connect_Call) Return(err error) *MockService_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Connect_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, chIDs []string, clIDs []string, connType []connections.ConnType) error) *MockService_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChannels provides a mock function for the type MockService
func (_mock *MockService) CreateChannels(ctx context.Context, session authn.Session, channels1 ...channels.Channel) ([]channels.Channel, []roles.RoleProvision, error) {
	var tmpRet mock.Arguments
	if len(channels1) > 0 {
		tmpRet = _mock.Called(ctx, session, channels1)
	} else {
		tmpRet = _mock.Called(ctx, session)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateChannels")
	}

	var r0 []channels.Channel
	var r1 []roles.RoleProvision
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, []channels.Channel) ([]channels.Channel, []roles.RoleProvision, error)); ok {
		return returnFunc(ctx, session, channels1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, ...channels.Channel) []channels.Channel); ok {
		r0 = returnFunc(ctx, session, channels1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]channels.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, ...channels.Channel) []roles.RoleProvision); ok {
		r1 = returnFunc(ctx, session, channels1...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]roles.RoleProvision)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, authn.Session, ...channels.Channel) error); ok {
		r2 = returnFunc(ctx, session, channels1...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockService_CreateChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannels'
type MockService_CreateChannels_Call struct {
	*mock.Call
}

// CreateChannels is a helper method to define mock.On call
//   - ctx
//   - session
//   - channels1
func (_e *MockService_Expecter) CreateChannels(ctx interface{}, session interface{}, channels1 ...interface{}) *MockService_CreateChannels_Call {
	return &MockService_CreateChannels_Call{Call: _e.mock.On("CreateChannels",
		append([]interface{}{ctx, session}, channels1...)...)}
}

func (_c *MockService_CreateChannels_Call) Run(run func(ctx context.Context, session authn.Session, channels1 ...channels.Channel)) *MockService_CreateChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]channels.Channel, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(channels.Channel)
			}
		}
		run(args[0].(context.Context), args[1].(authn.Session), variadicArgs...)
	})
	return _c
}

func (_c *MockService_CreateChannels_Call) Return(channels11 []channels.Channel, roleProvisions []roles.RoleProvision, err error) *MockService_CreateChannels_Call {
	_c.Call.Return(channels11, roleProvisions, err)
	return _c
}

func (_c *MockService_CreateChannels_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, channels1 ...channels.Channel) ([]channels.Channel, []roles.RoleProvision, error)) *MockService_CreateChannels_Call {
	_c.Call.Return(run)
	return _c
}

// DisableChannel provides a mock function for the type MockService
func (_mock *MockService) DisableChannel(ctx context.Context, session authn.Session, id string) (channels.Channel, error) {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for DisableChannel")
	}

	var r0 channels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (channels.Channel, error)); ok {
		return returnFunc(ctx, session, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) channels.Channel); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_DisableChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableChannel'
type MockService_DisableChannel_Call struct {
	*mock.Call
}

// DisableChannel is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) DisableChannel(ctx interface{}, session interface{}, id interface{}) *MockService_DisableChannel_Call {
	return &MockService_DisableChannel_Call{Call: _e.mock.On("DisableChannel", ctx, session, id)}
}

func (_c *MockService_DisableChannel_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_DisableChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_DisableChannel_Call) Return(channel channels.Channel, err error) *MockService_DisableChannel_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockService_DisableChannel_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) (channels.Channel, error)) *MockService_DisableChannel_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockService
func (_mock *MockService) Disconnect(ctx context.Context, session authn.Session, chIDs []string, clIDs []string, connType []connections.ConnType) error {
	ret := _mock.Called(ctx, session, chIDs, clIDs, connType)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, []string, []string, []connections.ConnType) error); ok {
		r0 = returnFunc(ctx, session, chIDs, clIDs, connType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockService_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx
//   - session
//   - chIDs
//   - clIDs
//   - connType
func (_e *MockService_Expecter) Disconnect(ctx interface{}, session interface{}, chIDs interface{}, clIDs interface{}, connType interface{}) *MockService_Disconnect_Call {
	return &MockService_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx, session, chIDs, clIDs, connType)}
}

func (_c *MockService_Disconnect_Call) Run(run func(ctx context.Context, session authn.Session, chIDs []string, clIDs []string, connType []connections.ConnType)) *MockService_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].([]string), args[3].([]string), args[4].([]connections.ConnType))
	})
	return _c
}

func (_c *MockService_Disconnect_Call) Return(err error) *MockService_Disconnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Disconnect_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, chIDs []string, clIDs []string, connType []connections.ConnType) error) *MockService_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// EnableChannel provides a mock function for the type MockService
func (_mock *MockService) EnableChannel(ctx context.Context, session authn.Session, id string) (channels.Channel, error) {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for EnableChannel")
	}

	var r0 channels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (channels.Channel, error)); ok {
		return returnFunc(ctx, session, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) channels.Channel); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_EnableChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableChannel'
type MockService_EnableChannel_Call struct {
	*mock.Call
}

// EnableChannel is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) EnableChannel(ctx interface{}, session interface{}, id interface{}) *MockService_EnableChannel_Call {
	return &MockService_EnableChannel_Call{Call: _e.mock.On("EnableChannel", ctx, session, id)}
}

func (_c *MockService_EnableChannel_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_EnableChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_EnableChannel_Call) Return(channel channels.Channel, err error) *MockService_EnableChannel_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockService_EnableChannel_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) (channels.Channel, error)) *MockService_EnableChannel_Call {
	_c.Call.Return(run)
	return _c
}

// ListAvailableActions provides a mock function for the type MockService
func (_mock *MockService) ListAvailableActions(ctx context.Context, session authn.Session) ([]string, error) {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) ([]string, error)); ok {
		return returnFunc(ctx, session)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) []string); ok {
		r0 = returnFunc(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session) error); ok {
		r1 = returnFunc(ctx, session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListAvailableActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAvailableActions'
type MockService_ListAvailableActions_Call struct {
	*mock.Call
}

// ListAvailableActions is a helper method to define mock.On call
//   - ctx
//   - session
func (_e *MockService_Expecter) ListAvailableActions(ctx interface{}, session interface{}) *MockService_ListAvailableActions_Call {
	return &MockService_ListAvailableActions_Call{Call: _e.mock.On("ListAvailableActions", ctx, session)}
}

func (_c *MockService_ListAvailableActions_Call) Run(run func(ctx context.Context, session authn.Session)) *MockService_ListAvailableActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session))
	})
	return _c
}

func (_c *MockService_ListAvailableActions_Call) Return(strings []string, err error) *MockService_ListAvailableActions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockService_ListAvailableActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session) ([]string, error)) *MockService_ListAvailableActions_Call {
	_c.Call.Return(run)
	return _c
}

// ListChannels provides a mock function for the type MockService
func (_mock *MockService) ListChannels(ctx context.Context, session authn.Session, pm channels.Page) (channels.ChannelsPage, error) {
	ret := _mock.Called(ctx, session, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 channels.ChannelsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, channels.Page) (channels.ChannelsPage, error)); ok {
		return returnFunc(ctx, session, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, channels.Page) channels.ChannelsPage); ok {
		r0 = returnFunc(ctx, session, pm)
	} else {
		r0 = ret.Get(0).(channels.ChannelsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, channels.Page) error); ok {
		r1 = returnFunc(ctx, session, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChannels'
type MockService_ListChannels_Call struct {
	*mock.Call
}

// ListChannels is a helper method to define mock.On call
//   - ctx
//   - session
//   - pm
func (_e *MockService_Expecter) ListChannels(ctx interface{}, session interface{}, pm interface{}) *MockService_ListChannels_Call {
	return &MockService_ListChannels_Call{Call: _e.mock.On("ListChannels", ctx, session, pm)}
}

func (_c *MockService_ListChannels_Call) Run(run func(ctx context.Context, session authn.Session, pm channels.Page)) *MockService_ListChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(channels.Page))
	})
	return _c
}

func (_c *MockService_ListChannels_Call) Return(channelsPage channels.ChannelsPage, err error) *MockService_ListChannels_Call {
	_c.Call.Return(channelsPage, err)
	return _c
}

func (_c *MockService_ListChannels_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, pm channels.Page) (channels.ChannelsPage, error)) *MockService_ListChannels_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntityMembers provides a mock function for the type MockService
func (_mock *MockService) ListEntityMembers(ctx context.Context, session authn.Session, entityID string, pq roles.MembersRolePageQuery) (roles.MembersRolePage, error) {
	ret := _mock.Called(ctx, session, entityID, pq)

	if len(ret) == 0 {
		panic("no return value specified for ListEntityMembers")
	}

	var r0 roles.MembersRolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, roles.MembersRolePageQuery) (roles.MembersRolePage, error)); ok {
		return returnFunc(ctx, session, entityID, pq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, roles.MembersRolePageQuery) roles.MembersRolePage); ok {
		r0 = returnFunc(ctx, session, entityID, pq)
	} else {
		r0 = ret.Get(0).(roles.MembersRolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, roles.MembersRolePageQuery) error); ok {
		r1 = returnFunc(ctx, session, entityID, pq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntityMembers'
type MockService_ListEntityMembers_Call struct {
	*mock.Call
}

// ListEntityMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - pq
func (_e *MockService_Expecter) ListEntityMembers(ctx interface{}, session interface{}, entityID interface{}, pq interface{}) *MockService_ListEntityMembers_Call {
	return &MockService_ListEntityMembers_Call{Call: _e.mock.On("ListEntityMembers", ctx, session, entityID, pq)}
}

func (_c *MockService_ListEntityMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, pq roles.MembersRolePageQuery)) *MockService_ListEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(roles.MembersRolePageQuery))
	})
	return _c
}

func (_c *MockService_ListEntityMembers_Call) Return(membersRolePage roles.MembersRolePage, err error) *MockService_ListEntityMembers_Call {
	_c.Call.Return(membersRolePage, err)
	return _c
}

func (_c *MockService_ListEntityMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, pq roles.MembersRolePageQuery) (roles.MembersRolePage, error)) *MockService_ListEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserChannels provides a mock function for the type MockService
func (_mock *MockService) ListUserChannels(ctx context.Context, session authn.Session, userID string, pm channels.Page) (channels.ChannelsPage, error) {
	ret := _mock.Called(ctx, session, userID, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListUserChannels")
	}

	var r0 channels.ChannelsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, channels.Page) (channels.ChannelsPage, error)); ok {
		return returnFunc(ctx, session, userID, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, channels.Page) channels.ChannelsPage); ok {
		r0 = returnFunc(ctx, session, userID, pm)
	} else {
		r0 = ret.Get(0).(channels.ChannelsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, channels.Page) error); ok {
		r1 = returnFunc(ctx, session, userID, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListUserChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserChannels'
type MockService_ListUserChannels_Call struct {
	*mock.Call
}

// ListUserChannels is a helper method to define mock.On call
//   - ctx
//   - session
//   - userID
//   - pm
func (_e *MockService_Expecter) ListUserChannels(ctx interface{}, session interface{}, userID interface{}, pm interface{}) *MockService_ListUserChannels_Call {
	return &MockService_ListUserChannels_Call{Call: _e.mock.On("ListUserChannels", ctx, session, userID, pm)}
}

func (_c *MockService_ListUserChannels_Call) Run(run func(ctx context.Context, session authn.Session, userID string, pm channels.Page)) *MockService_ListUserChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(channels.Page))
	})
	return _c
}

func (_c *MockService_ListUserChannels_Call) Return(channelsPage channels.ChannelsPage, err error) *MockService_ListUserChannels_Call {
	_c.Call.Return(channelsPage, err)
	return _c
}

func (_c *MockService_ListUserChannels_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, userID string, pm channels.Page) (channels.ChannelsPage, error)) *MockService_ListUserChannels_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannel provides a mock function for the type MockService
func (_mock *MockService) RemoveChannel(ctx context.Context, session authn.Session, id string) error {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannel'
type MockService_RemoveChannel_Call struct {
	*mock.Call
}

// RemoveChannel is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) RemoveChannel(ctx interface{}, session interface{}, id interface{}) *MockService_RemoveChannel_Call {
	return &MockService_RemoveChannel_Call{Call: _e.mock.On("RemoveChannel", ctx, session, id)}
}

func (_c *MockService_RemoveChannel_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_RemoveChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemoveChannel_Call) Return(err error) *MockService_RemoveChannel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveChannel_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) error) *MockService_RemoveChannel_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEntityMembers provides a mock function for the type MockService
func (_mock *MockService) RemoveEntityMembers(ctx context.Context, session authn.Session, entityID string, members []string) error {
	ret := _mock.Called(ctx, session, entityID, members)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEntityMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, []string) error); ok {
		r0 = returnFunc(ctx, session, entityID, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEntityMembers'
type MockService_RemoveEntityMembers_Call struct {
	*mock.Call
}

// RemoveEntityMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - members
func (_e *MockService_Expecter) RemoveEntityMembers(ctx interface{}, session interface{}, entityID interface{}, members interface{}) *MockService_RemoveEntityMembers_Call {
	return &MockService_RemoveEntityMembers_Call{Call: _e.mock.On("RemoveEntityMembers", ctx, session, entityID, members)}
}

func (_c *MockService_RemoveEntityMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, members []string)) *MockService_RemoveEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockService_RemoveEntityMembers_Call) Return(err error) *MockService_RemoveEntityMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveEntityMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, members []string) error) *MockService_RemoveEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMemberFromAllRoles provides a mock function for the type MockService
func (_mock *MockService) RemoveMemberFromAllRoles(ctx context.Context, session authn.Session, memberID string) error {
	ret := _mock.Called(ctx, session, memberID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMemberFromAllRoles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = returnFunc(ctx, session, memberID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveMemberFromAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMemberFromAllRoles'
type MockService_RemoveMemberFromAllRoles_Call struct {
	*mock.Call
}

// RemoveMemberFromAllRoles is a helper method to define mock.On call
//   - ctx
//   - session
//   - memberID
func (_e *MockService_Expecter) RemoveMemberFromAllRoles(ctx interface{}, session interface{}, memberID interface{}) *MockService_RemoveMemberFromAllRoles_Call {
	return &MockService_RemoveMemberFromAllRoles_Call{Call: _e.mock.On("RemoveMemberFromAllRoles", ctx, session, memberID)}
}

func (_c *MockService_RemoveMemberFromAllRoles_Call) Run(run func(ctx context.Context, session authn.Session, memberID string)) *MockService_RemoveMemberFromAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemoveMemberFromAllRoles_Call) Return(err error) *MockService_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveMemberFromAllRoles_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, memberID string) error) *MockService_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveParentGroup provides a mock function for the type MockService
func (_mock *MockService) RemoveParentGroup(ctx context.Context, session authn.Session, id string) error {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveParentGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveParentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveParentGroup'
type MockService_RemoveParentGroup_Call struct {
	*mock.Call
}

// RemoveParentGroup is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) RemoveParentGroup(ctx interface{}, session interface{}, id interface{}) *MockService_RemoveParentGroup_Call {
	return &MockService_RemoveParentGroup_Call{Call: _e.mock.On("RemoveParentGroup", ctx, session, id)}
}

func (_c *MockService_RemoveParentGroup_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_RemoveParentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemoveParentGroup_Call) Return(err error) *MockService_RemoveParentGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveParentGroup_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) error) *MockService_RemoveParentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRole provides a mock function for the type MockService
func (_mock *MockService) RemoveRole(ctx context.Context, session authn.Session, entityID string, roleID string) error {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRole'
type MockService_RemoveRole_Call struct {
	*mock.Call
}

// RemoveRole is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RemoveRole(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RemoveRole_Call {
	return &MockService_RemoveRole_Call{Call: _e.mock.On("RemoveRole", ctx, session, entityID, roleID)}
}

func (_c *MockService_RemoveRole_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RemoveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RemoveRole_Call) Return(err error) *MockService_RemoveRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveRole_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) error) *MockService_RemoveRole_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllRoles provides a mock function for the type MockService
func (_mock *MockService) RetrieveAllRoles(ctx context.Context, session authn.Session, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _mock.Called(ctx, session, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllRoles")
	}

	var r0 roles.RolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, uint64, uint64) (roles.RolePage, error)); ok {
		return returnFunc(ctx, session, entityID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, uint64, uint64) roles.RolePage); ok {
		r0 = returnFunc(ctx, session, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, session, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllRoles'
type MockService_RetrieveAllRoles_Call struct {
	*mock.Call
}

// RetrieveAllRoles is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - limit
//   - offset
func (_e *MockService_Expecter) RetrieveAllRoles(ctx interface{}, session interface{}, entityID interface{}, limit interface{}, offset interface{}) *MockService_RetrieveAllRoles_Call {
	return &MockService_RetrieveAllRoles_Call{Call: _e.mock.On("RetrieveAllRoles", ctx, session, entityID, limit, offset)}
}

func (_c *MockService_RetrieveAllRoles_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, limit uint64, offset uint64)) *MockService_RetrieveAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(uint64), args[4].(uint64))
	})
	return _c
}

func (_c *MockService_RetrieveAllRoles_Call) Return(rolePage roles.RolePage, err error) *MockService_RetrieveAllRoles_Call {
	_c.Call.Return(rolePage, err)
	return _c
}

func (_c *MockService_RetrieveAllRoles_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, limit uint64, offset uint64) (roles.RolePage, error)) *MockService_RetrieveAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveRole provides a mock function for the type MockService
func (_mock *MockService) RetrieveRole(ctx context.Context, session authn.Session, entityID string, roleID string) (roles.Role, error) {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (roles.Role, error)); ok {
		return returnFunc(ctx, session, entityID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) roles.Role); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveRole'
type MockService_RetrieveRole_Call struct {
	*mock.Call
}

// RetrieveRole is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RetrieveRole(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RetrieveRole_Call {
	return &MockService_RetrieveRole_Call{Call: _e.mock.On("RetrieveRole", ctx, session, entityID, roleID)}
}

func (_c *MockService_RetrieveRole_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RetrieveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RetrieveRole_Call) Return(role roles.Role, err error) *MockService_RetrieveRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockService_RetrieveRole_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) (roles.Role, error)) *MockService_RetrieveRole_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddActions provides a mock function for the type MockService
func (_mock *MockService) RoleAddActions(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) ([]string, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) ([]string, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) []string); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleAddActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddActions'
type MockService_RoleAddActions_Call struct {
	*mock.Call
}

// RoleAddActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - actions
func (_e *MockService_Expecter) RoleAddActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, actions interface{}) *MockService_RoleAddActions_Call {
	return &MockService_RoleAddActions_Call{Call: _e.mock.On("RoleAddActions", ctx, session, entityID, roleID, actions)}
}

func (_c *MockService_RoleAddActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string)) *MockService_RoleAddActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleAddActions_Call) Return(ops []string, err error) *MockService_RoleAddActions_Call {
	_c.Call.Return(ops, err)
	return _c
}

func (_c *MockService_RoleAddActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) ([]string, error)) *MockService_RoleAddActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddMembers provides a mock function for the type MockService
func (_mock *MockService) RoleAddMembers(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) ([]string, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddMembers")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) ([]string, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) []string); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleAddMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddMembers'
type MockService_RoleAddMembers_Call struct {
	*mock.Call
}

// RoleAddMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - members
func (_e *MockService_Expecter) RoleAddMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, members interface{}) *MockService_RoleAddMembers_Call {
	return &MockService_RoleAddMembers_Call{Call: _e.mock.On("RoleAddMembers", ctx, session, entityID, roleID, members)}
}

func (_c *MockService_RoleAddMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string)) *MockService_RoleAddMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleAddMembers_Call) Return(strings []string, err error) *MockService_RoleAddMembers_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockService_RoleAddMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) ([]string, error)) *MockService_RoleAddMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckActionsExists provides a mock function for the type MockService
func (_mock *MockService) RoleCheckActionsExists(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) (bool, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckActionsExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) (bool, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) bool); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleCheckActionsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckActionsExists'
type MockService_RoleCheckActionsExists_Call struct {
	*mock.Call
}

// RoleCheckActionsExists is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - actions
func (_e *MockService_Expecter) RoleCheckActionsExists(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, actions interface{}) *MockService_RoleCheckActionsExists_Call {
	return &MockService_RoleCheckActionsExists_Call{Call: _e.mock.On("RoleCheckActionsExists", ctx, session, entityID, roleID, actions)}
}

func (_c *MockService_RoleCheckActionsExists_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string)) *MockService_RoleCheckActionsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleCheckActionsExists_Call) Return(b bool, err error) *MockService_RoleCheckActionsExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockService_RoleCheckActionsExists_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) (bool, error)) *MockService_RoleCheckActionsExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckMembersExists provides a mock function for the type MockService
func (_mock *MockService) RoleCheckMembersExists(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) (bool, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckMembersExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) (bool, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) bool); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleCheckMembersExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckMembersExists'
type MockService_RoleCheckMembersExists_Call struct {
	*mock.Call
}

// RoleCheckMembersExists is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - members
func (_e *MockService_Expecter) RoleCheckMembersExists(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, members interface{}) *MockService_RoleCheckMembersExists_Call {
	return &MockService_RoleCheckMembersExists_Call{Call: _e.mock.On("RoleCheckMembersExists", ctx, session, entityID, roleID, members)}
}

func (_c *MockService_RoleCheckMembersExists_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string)) *MockService_RoleCheckMembersExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleCheckMembersExists_Call) Return(b bool, err error) *MockService_RoleCheckMembersExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockService_RoleCheckMembersExists_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) (bool, error)) *MockService_RoleCheckMembersExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListActions provides a mock function for the type MockService
func (_mock *MockService) RoleListActions(ctx context.Context, session authn.Session, entityID string, roleID string) ([]string, error) {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleListActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) ([]string, error)); ok {
		return returnFunc(ctx, session, entityID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) []string); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListActions'
type MockService_RoleListActions_Call struct {
	*mock.Call
}

// RoleListActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RoleListActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RoleListActions_Call {
	return &MockService_RoleListActions_Call{Call: _e.mock.On("RoleListActions", ctx, session, entityID, roleID)}
}

func (_c *MockService_RoleListActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RoleListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RoleListActions_Call) Return(strings []string, err error) *MockService_RoleListActions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockService_RoleListActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) ([]string, error)) *MockService_RoleListActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListMembers provides a mock function for the type MockService
func (_mock *MockService) RoleListMembers(ctx context.Context, session authn.Session, entityID string, roleID string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RoleListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, uint64, uint64) roles.MembersPage); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListMembers'
type MockService_RoleListMembers_Call struct {
	*mock.Call
}

// RoleListMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - limit
//   - offset
func (_e *MockService_Expecter) RoleListMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, limit interface{}, offset interface{}) *MockService_RoleListMembers_Call {
	return &MockService_RoleListMembers_Call{Call: _e.mock.On("RoleListMembers", ctx, session, entityID, roleID, limit, offset)}
}

func (_c *MockService_RoleListMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, limit uint64, offset uint64)) *MockService_RoleListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].(uint64), args[5].(uint64))
	})
	return _c
}

func (_c *MockService_RoleListMembers_Call) Return(membersPage roles.MembersPage, err error) *MockService_RoleListMembers_Call {
	_c.Call.Return(membersPage, err)
	return _c
}

func (_c *MockService_RoleListMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, limit uint64, offset uint64) (roles.MembersPage, error)) *MockService_RoleListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveActions provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveActions(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) error {
	ret := _mock.Called(ctx, session, entityID, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveActions'
type MockService_RoleRemoveActions_Call struct {
	*mock.Call
}

// RoleRemoveActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - actions
func (_e *MockService_Expecter) RoleRemoveActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, actions interface{}) *MockService_RoleRemoveActions_Call {
	return &MockService_RoleRemoveActions_Call{Call: _e.mock.On("RoleRemoveActions", ctx, session, entityID, roleID, actions)}
}

func (_c *MockService_RoleRemoveActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string)) *MockService_RoleRemoveActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleRemoveActions_Call) Return(err error) *MockService_RoleRemoveActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) error) *MockService_RoleRemoveActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllActions provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveAllActions(ctx context.Context, session authn.Session, entityID string, roleID string) error {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveAllActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllActions'
type MockService_RoleRemoveAllActions_Call struct {
	*mock.Call
}

// RoleRemoveAllActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RoleRemoveAllActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RoleRemoveAllActions_Call {
	return &MockService_RoleRemoveAllActions_Call{Call: _e.mock.On("RoleRemoveAllActions", ctx, session, entityID, roleID)}
}

func (_c *MockService_RoleRemoveAllActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RoleRemoveAllActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RoleRemoveAllActions_Call) Return(err error) *MockService_RoleRemoveAllActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveAllActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) error) *MockService_RoleRemoveAllActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllMembers provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveAllMembers(ctx context.Context, session authn.Session, entityID string, roleID string) error {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveAllMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllMembers'
type MockService_RoleRemoveAllMembers_Call struct {
	*mock.Call
}

// RoleRemoveAllMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RoleRemoveAllMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RoleRemoveAllMembers_Call {
	return &MockService_RoleRemoveAllMembers_Call{Call: _e.mock.On("RoleRemoveAllMembers", ctx, session, entityID, roleID)}
}

func (_c *MockService_RoleRemoveAllMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RoleRemoveAllMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RoleRemoveAllMembers_Call) Return(err error) *MockService_RoleRemoveAllMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveAllMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) error) *MockService_RoleRemoveAllMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveMembers provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveMembers(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) error {
	ret := _mock.Called(ctx, session, entityID, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveMembers'
type MockService_RoleRemoveMembers_Call struct {
	*mock.Call
}

// RoleRemoveMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - members
func (_e *MockService_Expecter) RoleRemoveMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, members interface{}) *MockService_RoleRemoveMembers_Call {
	return &MockService_RoleRemoveMembers_Call{Call: _e.mock.On("RoleRemoveMembers", ctx, session, entityID, roleID, members)}
}

func (_c *MockService_RoleRemoveMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string)) *MockService_RoleRemoveMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleRemoveMembers_Call) Return(err error) *MockService_RoleRemoveMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) error) *MockService_RoleRemoveMembers_Call {
	_c.Call.Return(run)
	return _c
}

// SetParentGroup provides a mock function for the type MockService
func (_mock *MockService) SetParentGroup(ctx context.Context, session authn.Session, parentGroupID string, id string) error {
	ret := _mock.Called(ctx, session, parentGroupID, id)

	if len(ret) == 0 {
		panic("no return value specified for SetParentGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, parentGroupID, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_SetParentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParentGroup'
type MockService_SetParentGroup_Call struct {
	*mock.Call
}

// SetParentGroup is a helper method to define mock.On call
//   - ctx
//   - session
//   - parentGroupID
//   - id
func (_e *MockService_Expecter) SetParentGroup(ctx interface{}, session interface{}, parentGroupID interface{}, id interface{}) *MockService_SetParentGroup_Call {
	return &MockService_SetParentGroup_Call{Call: _e.mock.On("SetParentGroup", ctx, session, parentGroupID, id)}
}

func (_c *MockService_SetParentGroup_Call) Run(run func(ctx context.Context, session authn.Session, parentGroupID string, id string)) *MockService_SetParentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_SetParentGroup_Call) Return(err error) *MockService_SetParentGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_SetParentGroup_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, parentGroupID string, id string) error) *MockService_SetParentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannel provides a mock function for the type MockService
func (_mock *MockService) UpdateChannel(ctx context.Context, session authn.Session, channel channels.Channel) (channels.Channel, error) {
	ret := _mock.Called(ctx, session, channel)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 channels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, channels.Channel) (channels.Channel, error)); ok {
		return returnFunc(ctx, session, channel)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, channels.Channel) channels.Channel); ok {
		r0 = returnFunc(ctx, session, channel)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, channels.Channel) error); ok {
		r1 = returnFunc(ctx, session, channel)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannel'
type MockService_UpdateChannel_Call struct {
	*mock.Call
}

// UpdateChannel is a helper method to define mock.On call
//   - ctx
//   - session
//   - channel
func (_e *MockService_Expecter) UpdateChannel(ctx interface{}, session interface{}, channel interface{}) *MockService_UpdateChannel_Call {
	return &MockService_UpdateChannel_Call{Call: _e.mock.On("UpdateChannel", ctx, session, channel)}
}

func (_c *MockService_UpdateChannel_Call) Run(run func(ctx context.Context, session authn.Session, channel channels.Channel)) *MockService_UpdateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(channels.Channel))
	})
	return _c
}

func (_c *MockService_UpdateChannel_Call) Return(channel1 channels.Channel, err error) *MockService_UpdateChannel_Call {
	_c.Call.Return(channel1, err)
	return _c
}

func (_c *MockService_UpdateChannel_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, channel channels.Channel) (channels.Channel, error)) *MockService_UpdateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannelTags provides a mock function for the type MockService
func (_mock *MockService) UpdateChannelTags(ctx context.Context, session authn.Session, channel channels.Channel) (channels.Channel, error) {
	ret := _mock.Called(ctx, session, channel)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelTags")
	}

	var r0 channels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, channels.Channel) (channels.Channel, error)); ok {
		return returnFunc(ctx, session, channel)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, channels.Channel) channels.Channel); ok {
		r0 = returnFunc(ctx, session, channel)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, channels.Channel) error); ok {
		r1 = returnFunc(ctx, session, channel)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateChannelTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannelTags'
type MockService_UpdateChannelTags_Call struct {
	*mock.Call
}

// UpdateChannelTags is a helper method to define mock.On call
//   - ctx
//   - session
//   - channel
func (_e *MockService_Expecter) UpdateChannelTags(ctx interface{}, session interface{}, channel interface{}) *MockService_UpdateChannelTags_Call {
	return &MockService_UpdateChannelTags_Call{Call: _e.mock.On("UpdateChannelTags", ctx, session, channel)}
}

func (_c *MockService_UpdateChannelTags_Call) Run(run func(ctx context.Context, session authn.Session, channel channels.Channel)) *MockService_UpdateChannelTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(channels.Channel))
	})
	return _c
}

func (_c *MockService_UpdateChannelTags_Call) Return(channel1 channels.Channel, err error) *MockService_UpdateChannelTags_Call {
	_c.Call.Return(channel1, err)
	return _c
}

func (_c *MockService_UpdateChannelTags_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, channel channels.Channel) (channels.Channel, error)) *MockService_UpdateChannelTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleName provides a mock function for the type MockService
func (_mock *MockService) UpdateRoleName(ctx context.Context, session authn.Session, entityID string, roleID string, newRoleName string) (roles.Role, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, newRoleName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleName")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, string) (roles.Role, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, newRoleName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, string) roles.Role); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, newRoleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, newRoleName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateRoleName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleName'
type MockService_UpdateRoleName_Call struct {
	*mock.Call
}

// UpdateRoleName is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - newRoleName
func (_e *MockService_Expecter) UpdateRoleName(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, newRoleName interface{}) *MockService_UpdateRoleName_Call {
	return &MockService_UpdateRoleName_Call{Call: _e.mock.On("UpdateRoleName", ctx, session, entityID, roleID, newRoleName)}
}

func (_c *MockService_UpdateRoleName_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, newRoleName string)) *MockService_UpdateRoleName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_UpdateRoleName_Call) Return(role roles.Role, err error) *MockService_UpdateRoleName_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockService_UpdateRoleName_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, newRoleName string) (roles.Role, error)) *MockService_UpdateRoleName_Call {
	_c.Call.Return(run)
	return _c
}

// ViewChannel provides a mock function for the type MockService
func (_mock *MockService) ViewChannel(ctx context.Context, session authn.Session, id string, withRoles bool) (channels.Channel, error) {
	ret := _mock.Called(ctx, session, id, withRoles)

	if len(ret) == 0 {
		panic("no return value specified for ViewChannel")
	}

	var r0 channels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, bool) (channels.Channel, error)); ok {
		return returnFunc(ctx, session, id, withRoles)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, bool) channels.Channel); ok {
		r0 = returnFunc(ctx, session, id, withRoles)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, bool) error); ok {
		r1 = returnFunc(ctx, session, id, withRoles)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ViewChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewChannel'
type MockService_ViewChannel_Call struct {
	*mock.Call
}

// ViewChannel is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
//   - withRoles
func (_e *MockService_Expecter) ViewChannel(ctx interface{}, session interface{}, id interface{}, withRoles interface{}) *MockService_ViewChannel_Call {
	return &MockService_ViewChannel_Call{Call: _e.mock.On("ViewChannel", ctx, session, id, withRoles)}
}

func (_c *MockService_ViewChannel_Call) Run(run func(ctx context.Context, session authn.Session, id string, withRoles bool)) *MockService_ViewChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockService_ViewChannel_Call) Return(channel channels.Channel, err error) *MockService_ViewChannel_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockService_ViewChannel_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string, withRoles bool) (channels.Channel, error)) *MockService_ViewChannel_Call {
	_c.Call.Return(run)
	return _c
}
