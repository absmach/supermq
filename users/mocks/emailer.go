// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Emailer is an autogenerated mock type for the Emailer type
type Emailer struct {
	mock.Mock
}

type Emailer_Expecter struct {
	mock *mock.Mock
}

func (_m *Emailer) EXPECT() *Emailer_Expecter {
	return &Emailer_Expecter{mock: &_m.Mock}
}

// SendPasswordReset provides a mock function with given fields: To, host, user, token
func (_m *Emailer) SendPasswordReset(To []string, host string, user string, token string) error {
	ret := _m.Called(To, host, user, token)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string, string) error); ok {
		r0 = rf(To, host, user, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Emailer_SendPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPasswordReset'
type Emailer_SendPasswordReset_Call struct {
	*mock.Call
}

// SendPasswordReset is a helper method to define mock.On call
//   - To []string
//   - host string
//   - user string
//   - token string
func (_e *Emailer_Expecter) SendPasswordReset(To interface{}, host interface{}, user interface{}, token interface{}) *Emailer_SendPasswordReset_Call {
	return &Emailer_SendPasswordReset_Call{Call: _e.mock.On("SendPasswordReset", To, host, user, token)}
}

func (_c *Emailer_SendPasswordReset_Call) Run(run func(To []string, host string, user string, token string)) *Emailer_SendPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Emailer_SendPasswordReset_Call) Return(_a0 error) *Emailer_SendPasswordReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Emailer_SendPasswordReset_Call) RunAndReturn(run func([]string, string, string, string) error) *Emailer_SendPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailer creates a new instance of Emailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Emailer {
	mock := &Emailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
