// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	v1 "github.com/absmach/supermq/api/grpc/token/v1"
	"github.com/absmach/supermq/pkg/authn"
	"github.com/absmach/supermq/users"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockService
func (_mock *MockService) Delete(ctx context.Context, session authn.Session, id string) error {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) Delete(ctx interface{}, session interface{}, id interface{}) *MockService_Delete_Call {
	return &MockService_Delete_Call{Call: _e.mock.On("Delete", ctx, session, id)}
}

func (_c *MockService_Delete_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_Delete_Call) Return(err error) *MockService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Delete_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) error) *MockService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function for the type MockService
func (_mock *MockService) Disable(ctx context.Context, session authn.Session, id string) (users.User, error) {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (users.User, error)); ok {
		return returnFunc(ctx, session, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) users.User); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockService_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) Disable(ctx interface{}, session interface{}, id interface{}) *MockService_Disable_Call {
	return &MockService_Disable_Call{Call: _e.mock.On("Disable", ctx, session, id)}
}

func (_c *MockService_Disable_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_Disable_Call) Return(user users.User, err error) *MockService_Disable_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_Disable_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) (users.User, error)) *MockService_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Enable provides a mock function for the type MockService
func (_mock *MockService) Enable(ctx context.Context, session authn.Session, id string) (users.User, error) {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for Enable")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (users.User, error)); ok {
		return returnFunc(ctx, session, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) users.User); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type MockService_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) Enable(ctx interface{}, session interface{}, id interface{}) *MockService_Enable_Call {
	return &MockService_Enable_Call{Call: _e.mock.On("Enable", ctx, session, id)}
}

func (_c *MockService_Enable_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_Enable_Call) Return(user users.User, err error) *MockService_Enable_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_Enable_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) (users.User, error)) *MockService_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateResetToken provides a mock function for the type MockService
func (_mock *MockService) GenerateResetToken(ctx context.Context, email string, host string) error {
	ret := _mock.Called(ctx, email, host)

	if len(ret) == 0 {
		panic("no return value specified for GenerateResetToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, email, host)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_GenerateResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateResetToken'
type MockService_GenerateResetToken_Call struct {
	*mock.Call
}

// GenerateResetToken is a helper method to define mock.On call
//   - ctx
//   - email
//   - host
func (_e *MockService_Expecter) GenerateResetToken(ctx interface{}, email interface{}, host interface{}) *MockService_GenerateResetToken_Call {
	return &MockService_GenerateResetToken_Call{Call: _e.mock.On("GenerateResetToken", ctx, email, host)}
}

func (_c *MockService_GenerateResetToken_Call) Run(run func(ctx context.Context, email string, host string)) *MockService_GenerateResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_GenerateResetToken_Call) Return(err error) *MockService_GenerateResetToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_GenerateResetToken_Call) RunAndReturn(run func(ctx context.Context, email string, host string) error) *MockService_GenerateResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// Identify provides a mock function for the type MockService
func (_mock *MockService) Identify(ctx context.Context, session authn.Session) (string, error) {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Identify")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) (string, error)); ok {
		return returnFunc(ctx, session)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) string); ok {
		r0 = returnFunc(ctx, session)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session) error); ok {
		r1 = returnFunc(ctx, session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Identify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identify'
type MockService_Identify_Call struct {
	*mock.Call
}

// Identify is a helper method to define mock.On call
//   - ctx
//   - session
func (_e *MockService_Expecter) Identify(ctx interface{}, session interface{}) *MockService_Identify_Call {
	return &MockService_Identify_Call{Call: _e.mock.On("Identify", ctx, session)}
}

func (_c *MockService_Identify_Call) Run(run func(ctx context.Context, session authn.Session)) *MockService_Identify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session))
	})
	return _c
}

func (_c *MockService_Identify_Call) Return(s string, err error) *MockService_Identify_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_Identify_Call) RunAndReturn(run func(ctx context.Context, session authn.Session) (string, error)) *MockService_Identify_Call {
	_c.Call.Return(run)
	return _c
}

// IssueToken provides a mock function for the type MockService
func (_mock *MockService) IssueToken(ctx context.Context, identity string, secret string) (*v1.Token, error) {
	ret := _mock.Called(ctx, identity, secret)

	if len(ret) == 0 {
		panic("no return value specified for IssueToken")
	}

	var r0 *v1.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*v1.Token, error)); ok {
		return returnFunc(ctx, identity, secret)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *v1.Token); ok {
		r0 = returnFunc(ctx, identity, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, identity, secret)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_IssueToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueToken'
type MockService_IssueToken_Call struct {
	*mock.Call
}

// IssueToken is a helper method to define mock.On call
//   - ctx
//   - identity
//   - secret
func (_e *MockService_Expecter) IssueToken(ctx interface{}, identity interface{}, secret interface{}) *MockService_IssueToken_Call {
	return &MockService_IssueToken_Call{Call: _e.mock.On("IssueToken", ctx, identity, secret)}
}

func (_c *MockService_IssueToken_Call) Run(run func(ctx context.Context, identity string, secret string)) *MockService_IssueToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_IssueToken_Call) Return(token *v1.Token, err error) *MockService_IssueToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockService_IssueToken_Call) RunAndReturn(run func(ctx context.Context, identity string, secret string) (*v1.Token, error)) *MockService_IssueToken_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockService
func (_mock *MockService) ListUsers(ctx context.Context, session authn.Session, pm users.Page) (users.UsersPage, error) {
	ret := _mock.Called(ctx, session, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 users.UsersPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, users.Page) (users.UsersPage, error)); ok {
		return returnFunc(ctx, session, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, users.Page) users.UsersPage); ok {
		r0 = returnFunc(ctx, session, pm)
	} else {
		r0 = ret.Get(0).(users.UsersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, users.Page) error); ok {
		r1 = returnFunc(ctx, session, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx
//   - session
//   - pm
func (_e *MockService_Expecter) ListUsers(ctx interface{}, session interface{}, pm interface{}) *MockService_ListUsers_Call {
	return &MockService_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, session, pm)}
}

func (_c *MockService_ListUsers_Call) Run(run func(ctx context.Context, session authn.Session, pm users.Page)) *MockService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(users.Page))
	})
	return _c
}

func (_c *MockService_ListUsers_Call) Return(usersPage users.UsersPage, err error) *MockService_ListUsers_Call {
	_c.Call.Return(usersPage, err)
	return _c
}

func (_c *MockService_ListUsers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, pm users.Page) (users.UsersPage, error)) *MockService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// OAuthAddUserPolicy provides a mock function for the type MockService
func (_mock *MockService) OAuthAddUserPolicy(ctx context.Context, user users.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for OAuthAddUserPolicy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_OAuthAddUserPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuthAddUserPolicy'
type MockService_OAuthAddUserPolicy_Call struct {
	*mock.Call
}

// OAuthAddUserPolicy is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockService_Expecter) OAuthAddUserPolicy(ctx interface{}, user interface{}) *MockService_OAuthAddUserPolicy_Call {
	return &MockService_OAuthAddUserPolicy_Call{Call: _e.mock.On("OAuthAddUserPolicy", ctx, user)}
}

func (_c *MockService_OAuthAddUserPolicy_Call) Run(run func(ctx context.Context, user users.User)) *MockService_OAuthAddUserPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(users.User))
	})
	return _c
}

func (_c *MockService_OAuthAddUserPolicy_Call) Return(err error) *MockService_OAuthAddUserPolicy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_OAuthAddUserPolicy_Call) RunAndReturn(run func(ctx context.Context, user users.User) error) *MockService_OAuthAddUserPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// OAuthCallback provides a mock function for the type MockService
func (_mock *MockService) OAuthCallback(ctx context.Context, user users.User) (users.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for OAuthCallback")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.User) (users.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.User) users.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, users.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_OAuthCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuthCallback'
type MockService_OAuthCallback_Call struct {
	*mock.Call
}

// OAuthCallback is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockService_Expecter) OAuthCallback(ctx interface{}, user interface{}) *MockService_OAuthCallback_Call {
	return &MockService_OAuthCallback_Call{Call: _e.mock.On("OAuthCallback", ctx, user)}
}

func (_c *MockService_OAuthCallback_Call) Run(run func(ctx context.Context, user users.User)) *MockService_OAuthCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(users.User))
	})
	return _c
}

func (_c *MockService_OAuthCallback_Call) Return(user1 users.User, err error) *MockService_OAuthCallback_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockService_OAuthCallback_Call) RunAndReturn(run func(ctx context.Context, user users.User) (users.User, error)) *MockService_OAuthCallback_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockService
func (_mock *MockService) RefreshToken(ctx context.Context, session authn.Session, refreshToken string) (*v1.Token, error) {
	ret := _mock.Called(ctx, session, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *v1.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (*v1.Token, error)); ok {
		return returnFunc(ctx, session, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) *v1.Token); ok {
		r0 = returnFunc(ctx, session, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, refreshToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockService_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx
//   - session
//   - refreshToken
func (_e *MockService_Expecter) RefreshToken(ctx interface{}, session interface{}, refreshToken interface{}) *MockService_RefreshToken_Call {
	return &MockService_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, session, refreshToken)}
}

func (_c *MockService_RefreshToken_Call) Run(run func(ctx context.Context, session authn.Session, refreshToken string)) *MockService_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_RefreshToken_Call) Return(token *v1.Token, err error) *MockService_RefreshToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockService_RefreshToken_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, refreshToken string) (*v1.Token, error)) *MockService_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockService
func (_mock *MockService) Register(ctx context.Context, session authn.Session, user users.User, selfRegister bool) (users.User, error) {
	ret := _mock.Called(ctx, session, user, selfRegister)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, users.User, bool) (users.User, error)); ok {
		return returnFunc(ctx, session, user, selfRegister)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, users.User, bool) users.User); ok {
		r0 = returnFunc(ctx, session, user, selfRegister)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, users.User, bool) error); ok {
		r1 = returnFunc(ctx, session, user, selfRegister)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - session
//   - user
//   - selfRegister
func (_e *MockService_Expecter) Register(ctx interface{}, session interface{}, user interface{}, selfRegister interface{}) *MockService_Register_Call {
	return &MockService_Register_Call{Call: _e.mock.On("Register", ctx, session, user, selfRegister)}
}

func (_c *MockService_Register_Call) Run(run func(ctx context.Context, session authn.Session, user users.User, selfRegister bool)) *MockService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(users.User), args[3].(bool))
	})
	return _c
}

func (_c *MockService_Register_Call) Return(user1 users.User, err error) *MockService_Register_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockService_Register_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, user users.User, selfRegister bool) (users.User, error)) *MockService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// ResetSecret provides a mock function for the type MockService
func (_mock *MockService) ResetSecret(ctx context.Context, session authn.Session, secret string) error {
	ret := _mock.Called(ctx, session, secret)

	if len(ret) == 0 {
		panic("no return value specified for ResetSecret")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = returnFunc(ctx, session, secret)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_ResetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetSecret'
type MockService_ResetSecret_Call struct {
	*mock.Call
}

// ResetSecret is a helper method to define mock.On call
//   - ctx
//   - session
//   - secret
func (_e *MockService_Expecter) ResetSecret(ctx interface{}, session interface{}, secret interface{}) *MockService_ResetSecret_Call {
	return &MockService_ResetSecret_Call{Call: _e.mock.On("ResetSecret", ctx, session, secret)}
}

func (_c *MockService_ResetSecret_Call) Run(run func(ctx context.Context, session authn.Session, secret string)) *MockService_ResetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_ResetSecret_Call) Return(err error) *MockService_ResetSecret_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_ResetSecret_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, secret string) error) *MockService_ResetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUsers provides a mock function for the type MockService
func (_mock *MockService) SearchUsers(ctx context.Context, pm users.Page) (users.UsersPage, error) {
	ret := _mock.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 users.UsersPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.Page) (users.UsersPage, error)); ok {
		return returnFunc(ctx, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.Page) users.UsersPage); ok {
		r0 = returnFunc(ctx, pm)
	} else {
		r0 = ret.Get(0).(users.UsersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, users.Page) error); ok {
		r1 = returnFunc(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_SearchUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUsers'
type MockService_SearchUsers_Call struct {
	*mock.Call
}

// SearchUsers is a helper method to define mock.On call
//   - ctx
//   - pm
func (_e *MockService_Expecter) SearchUsers(ctx interface{}, pm interface{}) *MockService_SearchUsers_Call {
	return &MockService_SearchUsers_Call{Call: _e.mock.On("SearchUsers", ctx, pm)}
}

func (_c *MockService_SearchUsers_Call) Run(run func(ctx context.Context, pm users.Page)) *MockService_SearchUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(users.Page))
	})
	return _c
}

func (_c *MockService_SearchUsers_Call) Return(usersPage users.UsersPage, err error) *MockService_SearchUsers_Call {
	_c.Call.Return(usersPage, err)
	return _c
}

func (_c *MockService_SearchUsers_Call) RunAndReturn(run func(ctx context.Context, pm users.Page) (users.UsersPage, error)) *MockService_SearchUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SendPasswordReset provides a mock function for the type MockService
func (_mock *MockService) SendPasswordReset(ctx context.Context, host string, email string, user string, token string) error {
	ret := _mock.Called(ctx, host, email, user, token)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordReset")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, host, email, user, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_SendPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPasswordReset'
type MockService_SendPasswordReset_Call struct {
	*mock.Call
}

// SendPasswordReset is a helper method to define mock.On call
//   - ctx
//   - host
//   - email
//   - user
//   - token
func (_e *MockService_Expecter) SendPasswordReset(ctx interface{}, host interface{}, email interface{}, user interface{}, token interface{}) *MockService_SendPasswordReset_Call {
	return &MockService_SendPasswordReset_Call{Call: _e.mock.On("SendPasswordReset", ctx, host, email, user, token)}
}

func (_c *MockService_SendPasswordReset_Call) Run(run func(ctx context.Context, host string, email string, user string, token string)) *MockService_SendPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_SendPasswordReset_Call) Return(err error) *MockService_SendPasswordReset_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_SendPasswordReset_Call) RunAndReturn(run func(ctx context.Context, host string, email string, user string, token string) error) *MockService_SendPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockService
func (_mock *MockService) Update(ctx context.Context, session authn.Session, id string, user users.UserReq) (users.User, error) {
	ret := _mock.Called(ctx, session, id, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, users.UserReq) (users.User, error)); ok {
		return returnFunc(ctx, session, id, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, users.UserReq) users.User); ok {
		r0 = returnFunc(ctx, session, id, user)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, users.UserReq) error); ok {
		r1 = returnFunc(ctx, session, id, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
//   - user
func (_e *MockService_Expecter) Update(ctx interface{}, session interface{}, id interface{}, user interface{}) *MockService_Update_Call {
	return &MockService_Update_Call{Call: _e.mock.On("Update", ctx, session, id, user)}
}

func (_c *MockService_Update_Call) Run(run func(ctx context.Context, session authn.Session, id string, user users.UserReq)) *MockService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(users.UserReq))
	})
	return _c
}

func (_c *MockService_Update_Call) Return(user1 users.User, err error) *MockService_Update_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockService_Update_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string, user users.UserReq) (users.User, error)) *MockService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function for the type MockService
func (_mock *MockService) UpdateEmail(ctx context.Context, session authn.Session, id string, email string) (users.User, error) {
	ret := _mock.Called(ctx, session, id, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (users.User, error)); ok {
		return returnFunc(ctx, session, id, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) users.User); ok {
		r0 = returnFunc(ctx, session, id, email)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, id, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type MockService_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
//   - email
func (_e *MockService_Expecter) UpdateEmail(ctx interface{}, session interface{}, id interface{}, email interface{}) *MockService_UpdateEmail_Call {
	return &MockService_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, session, id, email)}
}

func (_c *MockService_UpdateEmail_Call) Run(run func(ctx context.Context, session authn.Session, id string, email string)) *MockService_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_UpdateEmail_Call) Return(user users.User, err error) *MockService_UpdateEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_UpdateEmail_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string, email string) (users.User, error)) *MockService_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfilePicture provides a mock function for the type MockService
func (_mock *MockService) UpdateProfilePicture(ctx context.Context, session authn.Session, id string, usr users.UserReq) (users.User, error) {
	ret := _mock.Called(ctx, session, id, usr)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilePicture")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, users.UserReq) (users.User, error)); ok {
		return returnFunc(ctx, session, id, usr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, users.UserReq) users.User); ok {
		r0 = returnFunc(ctx, session, id, usr)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, users.UserReq) error); ok {
		r1 = returnFunc(ctx, session, id, usr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateProfilePicture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfilePicture'
type MockService_UpdateProfilePicture_Call struct {
	*mock.Call
}

// UpdateProfilePicture is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
//   - usr
func (_e *MockService_Expecter) UpdateProfilePicture(ctx interface{}, session interface{}, id interface{}, usr interface{}) *MockService_UpdateProfilePicture_Call {
	return &MockService_UpdateProfilePicture_Call{Call: _e.mock.On("UpdateProfilePicture", ctx, session, id, usr)}
}

func (_c *MockService_UpdateProfilePicture_Call) Run(run func(ctx context.Context, session authn.Session, id string, usr users.UserReq)) *MockService_UpdateProfilePicture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(users.UserReq))
	})
	return _c
}

func (_c *MockService_UpdateProfilePicture_Call) Return(user users.User, err error) *MockService_UpdateProfilePicture_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_UpdateProfilePicture_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string, usr users.UserReq) (users.User, error)) *MockService_UpdateProfilePicture_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function for the type MockService
func (_mock *MockService) UpdateRole(ctx context.Context, session authn.Session, user users.User) (users.User, error) {
	ret := _mock.Called(ctx, session, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, users.User) (users.User, error)); ok {
		return returnFunc(ctx, session, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, users.User) users.User); ok {
		r0 = returnFunc(ctx, session, user)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, users.User) error); ok {
		r1 = returnFunc(ctx, session, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockService_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx
//   - session
//   - user
func (_e *MockService_Expecter) UpdateRole(ctx interface{}, session interface{}, user interface{}) *MockService_UpdateRole_Call {
	return &MockService_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, session, user)}
}

func (_c *MockService_UpdateRole_Call) Run(run func(ctx context.Context, session authn.Session, user users.User)) *MockService_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(users.User))
	})
	return _c
}

func (_c *MockService_UpdateRole_Call) Return(user1 users.User, err error) *MockService_UpdateRole_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockService_UpdateRole_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, user users.User) (users.User, error)) *MockService_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSecret provides a mock function for the type MockService
func (_mock *MockService) UpdateSecret(ctx context.Context, session authn.Session, oldSecret string, newSecret string) (users.User, error) {
	ret := _mock.Called(ctx, session, oldSecret, newSecret)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecret")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (users.User, error)); ok {
		return returnFunc(ctx, session, oldSecret, newSecret)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) users.User); ok {
		r0 = returnFunc(ctx, session, oldSecret, newSecret)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, oldSecret, newSecret)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSecret'
type MockService_UpdateSecret_Call struct {
	*mock.Call
}

// UpdateSecret is a helper method to define mock.On call
//   - ctx
//   - session
//   - oldSecret
//   - newSecret
func (_e *MockService_Expecter) UpdateSecret(ctx interface{}, session interface{}, oldSecret interface{}, newSecret interface{}) *MockService_UpdateSecret_Call {
	return &MockService_UpdateSecret_Call{Call: _e.mock.On("UpdateSecret", ctx, session, oldSecret, newSecret)}
}

func (_c *MockService_UpdateSecret_Call) Run(run func(ctx context.Context, session authn.Session, oldSecret string, newSecret string)) *MockService_UpdateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_UpdateSecret_Call) Return(user users.User, err error) *MockService_UpdateSecret_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_UpdateSecret_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, oldSecret string, newSecret string) (users.User, error)) *MockService_UpdateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTags provides a mock function for the type MockService
func (_mock *MockService) UpdateTags(ctx context.Context, session authn.Session, id string, user users.UserReq) (users.User, error) {
	ret := _mock.Called(ctx, session, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTags")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, users.UserReq) (users.User, error)); ok {
		return returnFunc(ctx, session, id, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, users.UserReq) users.User); ok {
		r0 = returnFunc(ctx, session, id, user)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, users.UserReq) error); ok {
		r1 = returnFunc(ctx, session, id, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTags'
type MockService_UpdateTags_Call struct {
	*mock.Call
}

// UpdateTags is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
//   - user
func (_e *MockService_Expecter) UpdateTags(ctx interface{}, session interface{}, id interface{}, user interface{}) *MockService_UpdateTags_Call {
	return &MockService_UpdateTags_Call{Call: _e.mock.On("UpdateTags", ctx, session, id, user)}
}

func (_c *MockService_UpdateTags_Call) Run(run func(ctx context.Context, session authn.Session, id string, user users.UserReq)) *MockService_UpdateTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(users.UserReq))
	})
	return _c
}

func (_c *MockService_UpdateTags_Call) Return(user1 users.User, err error) *MockService_UpdateTags_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockService_UpdateTags_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string, user users.UserReq) (users.User, error)) *MockService_UpdateTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsername provides a mock function for the type MockService
func (_mock *MockService) UpdateUsername(ctx context.Context, session authn.Session, id string, username string) (users.User, error) {
	ret := _mock.Called(ctx, session, id, username)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (users.User, error)); ok {
		return returnFunc(ctx, session, id, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) users.User); ok {
		r0 = returnFunc(ctx, session, id, username)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, id, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsername'
type MockService_UpdateUsername_Call struct {
	*mock.Call
}

// UpdateUsername is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
//   - username
func (_e *MockService_Expecter) UpdateUsername(ctx interface{}, session interface{}, id interface{}, username interface{}) *MockService_UpdateUsername_Call {
	return &MockService_UpdateUsername_Call{Call: _e.mock.On("UpdateUsername", ctx, session, id, username)}
}

func (_c *MockService_UpdateUsername_Call) Run(run func(ctx context.Context, session authn.Session, id string, username string)) *MockService_UpdateUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_UpdateUsername_Call) Return(user users.User, err error) *MockService_UpdateUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_UpdateUsername_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string, username string) (users.User, error)) *MockService_UpdateUsername_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function for the type MockService
func (_mock *MockService) View(ctx context.Context, session authn.Session, id string) (users.User, error) {
	ret := _mock.Called(ctx, session, id)

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (users.User, error)); ok {
		return returnFunc(ctx, session, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) users.User); ok {
		r0 = returnFunc(ctx, session, id)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockService_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
//   - ctx
//   - session
//   - id
func (_e *MockService_Expecter) View(ctx interface{}, session interface{}, id interface{}) *MockService_View_Call {
	return &MockService_View_Call{Call: _e.mock.On("View", ctx, session, id)}
}

func (_c *MockService_View_Call) Run(run func(ctx context.Context, session authn.Session, id string)) *MockService_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_View_Call) Return(user users.User, err error) *MockService_View_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_View_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, id string) (users.User, error)) *MockService_View_Call {
	_c.Call.Return(run)
	return _c
}

// ViewProfile provides a mock function for the type MockService
func (_mock *MockService) ViewProfile(ctx context.Context, session authn.Session) (users.User, error) {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for ViewProfile")
	}

	var r0 users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) (users.User, error)); ok {
		return returnFunc(ctx, session)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) users.User); ok {
		r0 = returnFunc(ctx, session)
	} else {
		r0 = ret.Get(0).(users.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session) error); ok {
		r1 = returnFunc(ctx, session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ViewProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewProfile'
type MockService_ViewProfile_Call struct {
	*mock.Call
}

// ViewProfile is a helper method to define mock.On call
//   - ctx
//   - session
func (_e *MockService_Expecter) ViewProfile(ctx interface{}, session interface{}) *MockService_ViewProfile_Call {
	return &MockService_ViewProfile_Call{Call: _e.mock.On("ViewProfile", ctx, session)}
}

func (_c *MockService_ViewProfile_Call) Run(run func(ctx context.Context, session authn.Session)) *MockService_ViewProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session))
	})
	return _c
}

func (_c *MockService_ViewProfile_Call) Return(user users.User, err error) *MockService_ViewProfile_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_ViewProfile_Call) RunAndReturn(run func(ctx context.Context, session authn.Session) (users.User, error)) *MockService_ViewProfile_Call {
	_c.Call.Return(run)
	return _c
}
