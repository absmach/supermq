// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	clients "github.com/absmach/supermq/clients"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// AddConnections provides a mock function with given fields: ctx, conns
func (_m *Service) AddConnections(ctx context.Context, conns []clients.Connection) error {
	ret := _m.Called(ctx, conns)

	if len(ret) == 0 {
		panic("no return value specified for AddConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []clients.Connection) error); ok {
		r0 = rf(ctx, conns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_AddConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnections'
type Service_AddConnections_Call struct {
	*mock.Call
}

// AddConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - conns []clients.Connection
func (_e *Service_Expecter) AddConnections(ctx interface{}, conns interface{}) *Service_AddConnections_Call {
	return &Service_AddConnections_Call{Call: _e.mock.On("AddConnections", ctx, conns)}
}

func (_c *Service_AddConnections_Call) Run(run func(ctx context.Context, conns []clients.Connection)) *Service_AddConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]clients.Connection))
	})
	return _c
}

func (_c *Service_AddConnections_Call) Return(_a0 error) *Service_AddConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_AddConnections_Call) RunAndReturn(run func(context.Context, []clients.Connection) error) *Service_AddConnections_Call {
	_c.Call.Return(run)
	return _c
}

// Authenticate provides a mock function with given fields: ctx, key
func (_m *Service) Authenticate(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Service_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Service_Expecter) Authenticate(ctx interface{}, key interface{}) *Service_Authenticate_Call {
	return &Service_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, key)}
}

func (_c *Service_Authenticate_Call) Run(run func(ctx context.Context, key string)) *Service_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Authenticate_Call) Return(_a0 string, _a1 error) *Service_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Authenticate_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Service_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannelConnections provides a mock function with given fields: ctx, channelID
func (_m *Service) RemoveChannelConnections(ctx context.Context, channelID string) error {
	ret := _m.Called(ctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_RemoveChannelConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannelConnections'
type Service_RemoveChannelConnections_Call struct {
	*mock.Call
}

// RemoveChannelConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - channelID string
func (_e *Service_Expecter) RemoveChannelConnections(ctx interface{}, channelID interface{}) *Service_RemoveChannelConnections_Call {
	return &Service_RemoveChannelConnections_Call{Call: _e.mock.On("RemoveChannelConnections", ctx, channelID)}
}

func (_c *Service_RemoveChannelConnections_Call) Run(run func(ctx context.Context, channelID string)) *Service_RemoveChannelConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_RemoveChannelConnections_Call) Return(_a0 error) *Service_RemoveChannelConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_RemoveChannelConnections_Call) RunAndReturn(run func(context.Context, string) error) *Service_RemoveChannelConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnections provides a mock function with given fields: ctx, conns
func (_m *Service) RemoveConnections(ctx context.Context, conns []clients.Connection) error {
	ret := _m.Called(ctx, conns)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []clients.Connection) error); ok {
		r0 = rf(ctx, conns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_RemoveConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnections'
type Service_RemoveConnections_Call struct {
	*mock.Call
}

// RemoveConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - conns []clients.Connection
func (_e *Service_Expecter) RemoveConnections(ctx interface{}, conns interface{}) *Service_RemoveConnections_Call {
	return &Service_RemoveConnections_Call{Call: _e.mock.On("RemoveConnections", ctx, conns)}
}

func (_c *Service_RemoveConnections_Call) Run(run func(ctx context.Context, conns []clients.Connection)) *Service_RemoveConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]clients.Connection))
	})
	return _c
}

func (_c *Service_RemoveConnections_Call) Return(_a0 error) *Service_RemoveConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_RemoveConnections_Call) RunAndReturn(run func(context.Context, []clients.Connection) error) *Service_RemoveConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveById provides a mock function with given fields: ctx, id
func (_m *Service) RetrieveById(ctx context.Context, id string) (clients.Client, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveById")
	}

	var r0 clients.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (clients.Client, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) clients.Client); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_RetrieveById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveById'
type Service_RetrieveById_Call struct {
	*mock.Call
}

// RetrieveById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Service_Expecter) RetrieveById(ctx interface{}, id interface{}) *Service_RetrieveById_Call {
	return &Service_RetrieveById_Call{Call: _e.mock.On("RetrieveById", ctx, id)}
}

func (_c *Service_RetrieveById_Call) Run(run func(ctx context.Context, id string)) *Service_RetrieveById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_RetrieveById_Call) Return(_a0 clients.Client, _a1 error) *Service_RetrieveById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_RetrieveById_Call) RunAndReturn(run func(context.Context, string) (clients.Client, error)) *Service_RetrieveById_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByIds provides a mock function with given fields: ctx, ids
func (_m *Service) RetrieveByIds(ctx context.Context, ids []string) (clients.ClientsPage, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByIds")
	}

	var r0 clients.ClientsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (clients.ClientsPage, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) clients.ClientsPage); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(clients.ClientsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_RetrieveByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByIds'
type Service_RetrieveByIds_Call struct {
	*mock.Call
}

// RetrieveByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *Service_Expecter) RetrieveByIds(ctx interface{}, ids interface{}) *Service_RetrieveByIds_Call {
	return &Service_RetrieveByIds_Call{Call: _e.mock.On("RetrieveByIds", ctx, ids)}
}

func (_c *Service_RetrieveByIds_Call) Run(run func(ctx context.Context, ids []string)) *Service_RetrieveByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Service_RetrieveByIds_Call) Return(_a0 clients.ClientsPage, _a1 error) *Service_RetrieveByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_RetrieveByIds_Call) RunAndReturn(run func(context.Context, []string) (clients.ClientsPage, error)) *Service_RetrieveByIds_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetParentGroupFromClient provides a mock function with given fields: ctx, parentGroupID
func (_m *Service) UnsetParentGroupFromClient(ctx context.Context, parentGroupID string) error {
	ret := _m.Called(ctx, parentGroupID)

	if len(ret) == 0 {
		panic("no return value specified for UnsetParentGroupFromClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, parentGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UnsetParentGroupFromClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetParentGroupFromClient'
type Service_UnsetParentGroupFromClient_Call struct {
	*mock.Call
}

// UnsetParentGroupFromClient is a helper method to define mock.On call
//   - ctx context.Context
//   - parentGroupID string
func (_e *Service_Expecter) UnsetParentGroupFromClient(ctx interface{}, parentGroupID interface{}) *Service_UnsetParentGroupFromClient_Call {
	return &Service_UnsetParentGroupFromClient_Call{Call: _e.mock.On("UnsetParentGroupFromClient", ctx, parentGroupID)}
}

func (_c *Service_UnsetParentGroupFromClient_Call) Run(run func(ctx context.Context, parentGroupID string)) *Service_UnsetParentGroupFromClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_UnsetParentGroupFromClient_Call) Return(_a0 error) *Service_UnsetParentGroupFromClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UnsetParentGroupFromClient_Call) RunAndReturn(run func(context.Context, string) error) *Service_UnsetParentGroupFromClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
