// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	v10 "github.com/absmach/supermq/api/grpc/clients/v1"
	v1 "github.com/absmach/supermq/api/grpc/common/v1"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockClientsServiceClient creates a new instance of MockClientsServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientsServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientsServiceClient {
	mock := &MockClientsServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientsServiceClient is an autogenerated mock type for the ClientsServiceClient type
type MockClientsServiceClient struct {
	mock.Mock
}

type MockClientsServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientsServiceClient) EXPECT() *MockClientsServiceClient_Expecter {
	return &MockClientsServiceClient_Expecter{mock: &_m.Mock}
}

// AddConnections provides a mock function for the type MockClientsServiceClient
func (_mock *MockClientsServiceClient) AddConnections(ctx context.Context, in *v1.AddConnectionsReq, opts ...grpc.CallOption) (*v1.AddConnectionsRes, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddConnections")
	}

	var r0 *v1.AddConnectionsRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.AddConnectionsReq, []grpc.CallOption) (*v1.AddConnectionsRes, error)); ok {
		return returnFunc(ctx, in, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.AddConnectionsReq, ...grpc.CallOption) *v1.AddConnectionsRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AddConnectionsRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.AddConnectionsReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientsServiceClient_AddConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnections'
type MockClientsServiceClient_AddConnections_Call struct {
	*mock.Call
}

// AddConnections is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockClientsServiceClient_Expecter) AddConnections(ctx interface{}, in interface{}, opts ...interface{}) *MockClientsServiceClient_AddConnections_Call {
	return &MockClientsServiceClient_AddConnections_Call{Call: _e.mock.On("AddConnections",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClientsServiceClient_AddConnections_Call) Run(run func(ctx context.Context, in *v1.AddConnectionsReq, opts ...grpc.CallOption)) *MockClientsServiceClient_AddConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.AddConnectionsReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClientsServiceClient_AddConnections_Call) Return(addConnectionsRes *v1.AddConnectionsRes, err error) *MockClientsServiceClient_AddConnections_Call {
	_c.Call.Return(addConnectionsRes, err)
	return _c
}

func (_c *MockClientsServiceClient_AddConnections_Call) RunAndReturn(run func(ctx context.Context, in *v1.AddConnectionsReq, opts ...grpc.CallOption) (*v1.AddConnectionsRes, error)) *MockClientsServiceClient_AddConnections_Call {
	_c.Call.Return(run)
	return _c
}

// Authenticate provides a mock function for the type MockClientsServiceClient
func (_mock *MockClientsServiceClient) Authenticate(ctx context.Context, in *v10.AuthnReq, opts ...grpc.CallOption) (*v10.AuthnRes, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *v10.AuthnRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v10.AuthnReq, []grpc.CallOption) (*v10.AuthnRes, error)); ok {
		return returnFunc(ctx, in, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v10.AuthnReq, ...grpc.CallOption) *v10.AuthnRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v10.AuthnRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v10.AuthnReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientsServiceClient_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockClientsServiceClient_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockClientsServiceClient_Expecter) Authenticate(ctx interface{}, in interface{}, opts ...interface{}) *MockClientsServiceClient_Authenticate_Call {
	return &MockClientsServiceClient_Authenticate_Call{Call: _e.mock.On("Authenticate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClientsServiceClient_Authenticate_Call) Run(run func(ctx context.Context, in *v10.AuthnReq, opts ...grpc.CallOption)) *MockClientsServiceClient_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v10.AuthnReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClientsServiceClient_Authenticate_Call) Return(authnRes *v10.AuthnRes, err error) *MockClientsServiceClient_Authenticate_Call {
	_c.Call.Return(authnRes, err)
	return _c
}

func (_c *MockClientsServiceClient_Authenticate_Call) RunAndReturn(run func(ctx context.Context, in *v10.AuthnReq, opts ...grpc.CallOption) (*v10.AuthnRes, error)) *MockClientsServiceClient_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannelConnections provides a mock function for the type MockClientsServiceClient
func (_mock *MockClientsServiceClient) RemoveChannelConnections(ctx context.Context, in *v10.RemoveChannelConnectionsReq, opts ...grpc.CallOption) (*v10.RemoveChannelConnectionsRes, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelConnections")
	}

	var r0 *v10.RemoveChannelConnectionsRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v10.RemoveChannelConnectionsReq, []grpc.CallOption) (*v10.RemoveChannelConnectionsRes, error)); ok {
		return returnFunc(ctx, in, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v10.RemoveChannelConnectionsReq, ...grpc.CallOption) *v10.RemoveChannelConnectionsRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v10.RemoveChannelConnectionsRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v10.RemoveChannelConnectionsReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientsServiceClient_RemoveChannelConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannelConnections'
type MockClientsServiceClient_RemoveChannelConnections_Call struct {
	*mock.Call
}

// RemoveChannelConnections is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockClientsServiceClient_Expecter) RemoveChannelConnections(ctx interface{}, in interface{}, opts ...interface{}) *MockClientsServiceClient_RemoveChannelConnections_Call {
	return &MockClientsServiceClient_RemoveChannelConnections_Call{Call: _e.mock.On("RemoveChannelConnections",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClientsServiceClient_RemoveChannelConnections_Call) Run(run func(ctx context.Context, in *v10.RemoveChannelConnectionsReq, opts ...grpc.CallOption)) *MockClientsServiceClient_RemoveChannelConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v10.RemoveChannelConnectionsReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClientsServiceClient_RemoveChannelConnections_Call) Return(removeChannelConnectionsRes *v10.RemoveChannelConnectionsRes, err error) *MockClientsServiceClient_RemoveChannelConnections_Call {
	_c.Call.Return(removeChannelConnectionsRes, err)
	return _c
}

func (_c *MockClientsServiceClient_RemoveChannelConnections_Call) RunAndReturn(run func(ctx context.Context, in *v10.RemoveChannelConnectionsReq, opts ...grpc.CallOption) (*v10.RemoveChannelConnectionsRes, error)) *MockClientsServiceClient_RemoveChannelConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnections provides a mock function for the type MockClientsServiceClient
func (_mock *MockClientsServiceClient) RemoveConnections(ctx context.Context, in *v1.RemoveConnectionsReq, opts ...grpc.CallOption) (*v1.RemoveConnectionsRes, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveConnections")
	}

	var r0 *v1.RemoveConnectionsRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemoveConnectionsReq, []grpc.CallOption) (*v1.RemoveConnectionsRes, error)); ok {
		return returnFunc(ctx, in, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemoveConnectionsReq, ...grpc.CallOption) *v1.RemoveConnectionsRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RemoveConnectionsRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RemoveConnectionsReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientsServiceClient_RemoveConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnections'
type MockClientsServiceClient_RemoveConnections_Call struct {
	*mock.Call
}

// RemoveConnections is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockClientsServiceClient_Expecter) RemoveConnections(ctx interface{}, in interface{}, opts ...interface{}) *MockClientsServiceClient_RemoveConnections_Call {
	return &MockClientsServiceClient_RemoveConnections_Call{Call: _e.mock.On("RemoveConnections",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClientsServiceClient_RemoveConnections_Call) Run(run func(ctx context.Context, in *v1.RemoveConnectionsReq, opts ...grpc.CallOption)) *MockClientsServiceClient_RemoveConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.RemoveConnectionsReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClientsServiceClient_RemoveConnections_Call) Return(removeConnectionsRes *v1.RemoveConnectionsRes, err error) *MockClientsServiceClient_RemoveConnections_Call {
	_c.Call.Return(removeConnectionsRes, err)
	return _c
}

func (_c *MockClientsServiceClient_RemoveConnections_Call) RunAndReturn(run func(ctx context.Context, in *v1.RemoveConnectionsReq, opts ...grpc.CallOption) (*v1.RemoveConnectionsRes, error)) *MockClientsServiceClient_RemoveConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntities provides a mock function for the type MockClientsServiceClient
func (_mock *MockClientsServiceClient) RetrieveEntities(ctx context.Context, in *v1.RetrieveEntitiesReq, opts ...grpc.CallOption) (*v1.RetrieveEntitiesRes, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntities")
	}

	var r0 *v1.RetrieveEntitiesRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RetrieveEntitiesReq, []grpc.CallOption) (*v1.RetrieveEntitiesRes, error)); ok {
		return returnFunc(ctx, in, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RetrieveEntitiesReq, ...grpc.CallOption) *v1.RetrieveEntitiesRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RetrieveEntitiesRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RetrieveEntitiesReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientsServiceClient_RetrieveEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntities'
type MockClientsServiceClient_RetrieveEntities_Call struct {
	*mock.Call
}

// RetrieveEntities is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockClientsServiceClient_Expecter) RetrieveEntities(ctx interface{}, in interface{}, opts ...interface{}) *MockClientsServiceClient_RetrieveEntities_Call {
	return &MockClientsServiceClient_RetrieveEntities_Call{Call: _e.mock.On("RetrieveEntities",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClientsServiceClient_RetrieveEntities_Call) Run(run func(ctx context.Context, in *v1.RetrieveEntitiesReq, opts ...grpc.CallOption)) *MockClientsServiceClient_RetrieveEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.RetrieveEntitiesReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClientsServiceClient_RetrieveEntities_Call) Return(retrieveEntitiesRes *v1.RetrieveEntitiesRes, err error) *MockClientsServiceClient_RetrieveEntities_Call {
	_c.Call.Return(retrieveEntitiesRes, err)
	return _c
}

func (_c *MockClientsServiceClient_RetrieveEntities_Call) RunAndReturn(run func(ctx context.Context, in *v1.RetrieveEntitiesReq, opts ...grpc.CallOption) (*v1.RetrieveEntitiesRes, error)) *MockClientsServiceClient_RetrieveEntities_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntity provides a mock function for the type MockClientsServiceClient
func (_mock *MockClientsServiceClient) RetrieveEntity(ctx context.Context, in *v1.RetrieveEntityReq, opts ...grpc.CallOption) (*v1.RetrieveEntityRes, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntity")
	}

	var r0 *v1.RetrieveEntityRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RetrieveEntityReq, []grpc.CallOption) (*v1.RetrieveEntityRes, error)); ok {
		return returnFunc(ctx, in, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RetrieveEntityReq, ...grpc.CallOption) *v1.RetrieveEntityRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RetrieveEntityRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RetrieveEntityReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientsServiceClient_RetrieveEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntity'
type MockClientsServiceClient_RetrieveEntity_Call struct {
	*mock.Call
}

// RetrieveEntity is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockClientsServiceClient_Expecter) RetrieveEntity(ctx interface{}, in interface{}, opts ...interface{}) *MockClientsServiceClient_RetrieveEntity_Call {
	return &MockClientsServiceClient_RetrieveEntity_Call{Call: _e.mock.On("RetrieveEntity",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClientsServiceClient_RetrieveEntity_Call) Run(run func(ctx context.Context, in *v1.RetrieveEntityReq, opts ...grpc.CallOption)) *MockClientsServiceClient_RetrieveEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.RetrieveEntityReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClientsServiceClient_RetrieveEntity_Call) Return(retrieveEntityRes *v1.RetrieveEntityRes, err error) *MockClientsServiceClient_RetrieveEntity_Call {
	_c.Call.Return(retrieveEntityRes, err)
	return _c
}

func (_c *MockClientsServiceClient_RetrieveEntity_Call) RunAndReturn(run func(ctx context.Context, in *v1.RetrieveEntityReq, opts ...grpc.CallOption) (*v1.RetrieveEntityRes, error)) *MockClientsServiceClient_RetrieveEntity_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetParentGroupFromClient provides a mock function for the type MockClientsServiceClient
func (_mock *MockClientsServiceClient) UnsetParentGroupFromClient(ctx context.Context, in *v10.UnsetParentGroupFromClientReq, opts ...grpc.CallOption) (*v10.UnsetParentGroupFromClientRes, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UnsetParentGroupFromClient")
	}

	var r0 *v10.UnsetParentGroupFromClientRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v10.UnsetParentGroupFromClientReq, []grpc.CallOption) (*v10.UnsetParentGroupFromClientRes, error)); ok {
		return returnFunc(ctx, in, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v10.UnsetParentGroupFromClientReq, ...grpc.CallOption) *v10.UnsetParentGroupFromClientRes); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v10.UnsetParentGroupFromClientRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v10.UnsetParentGroupFromClientReq, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientsServiceClient_UnsetParentGroupFromClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetParentGroupFromClient'
type MockClientsServiceClient_UnsetParentGroupFromClient_Call struct {
	*mock.Call
}

// UnsetParentGroupFromClient is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockClientsServiceClient_Expecter) UnsetParentGroupFromClient(ctx interface{}, in interface{}, opts ...interface{}) *MockClientsServiceClient_UnsetParentGroupFromClient_Call {
	return &MockClientsServiceClient_UnsetParentGroupFromClient_Call{Call: _e.mock.On("UnsetParentGroupFromClient",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClientsServiceClient_UnsetParentGroupFromClient_Call) Run(run func(ctx context.Context, in *v10.UnsetParentGroupFromClientReq, opts ...grpc.CallOption)) *MockClientsServiceClient_UnsetParentGroupFromClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v10.UnsetParentGroupFromClientReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClientsServiceClient_UnsetParentGroupFromClient_Call) Return(unsetParentGroupFromClientRes *v10.UnsetParentGroupFromClientRes, err error) *MockClientsServiceClient_UnsetParentGroupFromClient_Call {
	_c.Call.Return(unsetParentGroupFromClientRes, err)
	return _c
}

func (_c *MockClientsServiceClient_UnsetParentGroupFromClient_Call) RunAndReturn(run func(ctx context.Context, in *v10.UnsetParentGroupFromClientReq, opts ...grpc.CallOption) (*v10.UnsetParentGroupFromClientRes, error)) *MockClientsServiceClient_UnsetParentGroupFromClient_Call {
	_c.Call.Return(run)
	return _c
}
