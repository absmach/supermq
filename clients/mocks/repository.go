// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/clients"
	"github.com/absmach/supermq/pkg/roles"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddConnections provides a mock function for the type MockRepository
func (_mock *MockRepository) AddConnections(ctx context.Context, conns []clients.Connection) error {
	ret := _mock.Called(ctx, conns)

	if len(ret) == 0 {
		panic("no return value specified for AddConnections")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []clients.Connection) error); ok {
		r0 = returnFunc(ctx, conns)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_AddConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnections'
type MockRepository_AddConnections_Call struct {
	*mock.Call
}

// AddConnections is a helper method to define mock.On call
//   - ctx
//   - conns
func (_e *MockRepository_Expecter) AddConnections(ctx interface{}, conns interface{}) *MockRepository_AddConnections_Call {
	return &MockRepository_AddConnections_Call{Call: _e.mock.On("AddConnections", ctx, conns)}
}

func (_c *MockRepository_AddConnections_Call) Run(run func(ctx context.Context, conns []clients.Connection)) *MockRepository_AddConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]clients.Connection))
	})
	return _c
}

func (_c *MockRepository_AddConnections_Call) Return(err error) *MockRepository_AddConnections_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_AddConnections_Call) RunAndReturn(run func(ctx context.Context, conns []clients.Connection) error) *MockRepository_AddConnections_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) AddRoles(ctx context.Context, rps []roles.RoleProvision) ([]roles.RoleProvision, error) {
	ret := _mock.Called(ctx, rps)

	if len(ret) == 0 {
		panic("no return value specified for AddRoles")
	}

	var r0 []roles.RoleProvision
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []roles.RoleProvision) ([]roles.RoleProvision, error)); ok {
		return returnFunc(ctx, rps)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []roles.RoleProvision) []roles.RoleProvision); ok {
		r0 = returnFunc(ctx, rps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.RoleProvision)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []roles.RoleProvision) error); ok {
		r1 = returnFunc(ctx, rps)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_AddRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoles'
type MockRepository_AddRoles_Call struct {
	*mock.Call
}

// AddRoles is a helper method to define mock.On call
//   - ctx
//   - rps
func (_e *MockRepository_Expecter) AddRoles(ctx interface{}, rps interface{}) *MockRepository_AddRoles_Call {
	return &MockRepository_AddRoles_Call{Call: _e.mock.On("AddRoles", ctx, rps)}
}

func (_c *MockRepository_AddRoles_Call) Run(run func(ctx context.Context, rps []roles.RoleProvision)) *MockRepository_AddRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]roles.RoleProvision))
	})
	return _c
}

func (_c *MockRepository_AddRoles_Call) Return(roleProvisions []roles.RoleProvision, err error) *MockRepository_AddRoles_Call {
	_c.Call.Return(roleProvisions, err)
	return _c
}

func (_c *MockRepository_AddRoles_Call) RunAndReturn(run func(ctx context.Context, rps []roles.RoleProvision) ([]roles.RoleProvision, error)) *MockRepository_AddRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeStatus provides a mock function for the type MockRepository
func (_mock *MockRepository) ChangeStatus(ctx context.Context, client clients.Client) (clients.Client, error) {
	ret := _mock.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for ChangeStatus")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) (clients.Client, error)); ok {
		return returnFunc(ctx, client)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) clients.Client); ok {
		r0 = returnFunc(ctx, client)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, clients.Client) error); ok {
		r1 = returnFunc(ctx, client)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ChangeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeStatus'
type MockRepository_ChangeStatus_Call struct {
	*mock.Call
}

// ChangeStatus is a helper method to define mock.On call
//   - ctx
//   - client
func (_e *MockRepository_Expecter) ChangeStatus(ctx interface{}, client interface{}) *MockRepository_ChangeStatus_Call {
	return &MockRepository_ChangeStatus_Call{Call: _e.mock.On("ChangeStatus", ctx, client)}
}

func (_c *MockRepository_ChangeStatus_Call) Run(run func(ctx context.Context, client clients.Client)) *MockRepository_ChangeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Client))
	})
	return _c
}

func (_c *MockRepository_ChangeStatus_Call) Return(client1 clients.Client, err error) *MockRepository_ChangeStatus_Call {
	_c.Call.Return(client1, err)
	return _c
}

func (_c *MockRepository_ChangeStatus_Call) RunAndReturn(run func(ctx context.Context, client clients.Client) (clients.Client, error)) *MockRepository_ChangeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ClientConnectionsCount provides a mock function for the type MockRepository
func (_mock *MockRepository) ClientConnectionsCount(ctx context.Context, id string) (uint64, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ClientConnectionsCount")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ClientConnectionsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientConnectionsCount'
type MockRepository_ClientConnectionsCount_Call struct {
	*mock.Call
}

// ClientConnectionsCount is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockRepository_Expecter) ClientConnectionsCount(ctx interface{}, id interface{}) *MockRepository_ClientConnectionsCount_Call {
	return &MockRepository_ClientConnectionsCount_Call{Call: _e.mock.On("ClientConnectionsCount", ctx, id)}
}

func (_c *MockRepository_ClientConnectionsCount_Call) Run(run func(ctx context.Context, id string)) *MockRepository_ClientConnectionsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_ClientConnectionsCount_Call) Return(v uint64, err error) *MockRepository_ClientConnectionsCount_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockRepository_ClientConnectionsCount_Call) RunAndReturn(run func(ctx context.Context, id string) (uint64, error)) *MockRepository_ClientConnectionsCount_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository) Delete(ctx context.Context, clientIDs ...string) error {
	var tmpRet mock.Arguments
	if len(clientIDs) > 0 {
		tmpRet = _mock.Called(ctx, clientIDs)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = returnFunc(ctx, clientIDs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - clientIDs
func (_e *MockRepository_Expecter) Delete(ctx interface{}, clientIDs ...interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx}, clientIDs...)...)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, clientIDs ...string)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(err error) *MockRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, clientIDs ...string) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DoesClientHaveConnections provides a mock function for the type MockRepository
func (_mock *MockRepository) DoesClientHaveConnections(ctx context.Context, id string) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DoesClientHaveConnections")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_DoesClientHaveConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesClientHaveConnections'
type MockRepository_DoesClientHaveConnections_Call struct {
	*mock.Call
}

// DoesClientHaveConnections is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockRepository_Expecter) DoesClientHaveConnections(ctx interface{}, id interface{}) *MockRepository_DoesClientHaveConnections_Call {
	return &MockRepository_DoesClientHaveConnections_Call{Call: _e.mock.On("DoesClientHaveConnections", ctx, id)}
}

func (_c *MockRepository_DoesClientHaveConnections_Call) Run(run func(ctx context.Context, id string)) *MockRepository_DoesClientHaveConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_DoesClientHaveConnections_Call) Return(b bool, err error) *MockRepository_DoesClientHaveConnections_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_DoesClientHaveConnections_Call) RunAndReturn(run func(ctx context.Context, id string) (bool, error)) *MockRepository_DoesClientHaveConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntityMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) ListEntityMembers(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery) (roles.MembersRolePage, error) {
	ret := _mock.Called(ctx, entityID, pageQuery)

	if len(ret) == 0 {
		panic("no return value specified for ListEntityMembers")
	}

	var r0 roles.MembersRolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, roles.MembersRolePageQuery) (roles.MembersRolePage, error)); ok {
		return returnFunc(ctx, entityID, pageQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, roles.MembersRolePageQuery) roles.MembersRolePage); ok {
		r0 = returnFunc(ctx, entityID, pageQuery)
	} else {
		r0 = ret.Get(0).(roles.MembersRolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, roles.MembersRolePageQuery) error); ok {
		r1 = returnFunc(ctx, entityID, pageQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ListEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntityMembers'
type MockRepository_ListEntityMembers_Call struct {
	*mock.Call
}

// ListEntityMembers is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - pageQuery
func (_e *MockRepository_Expecter) ListEntityMembers(ctx interface{}, entityID interface{}, pageQuery interface{}) *MockRepository_ListEntityMembers_Call {
	return &MockRepository_ListEntityMembers_Call{Call: _e.mock.On("ListEntityMembers", ctx, entityID, pageQuery)}
}

func (_c *MockRepository_ListEntityMembers_Call) Run(run func(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery)) *MockRepository_ListEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(roles.MembersRolePageQuery))
	})
	return _c
}

func (_c *MockRepository_ListEntityMembers_Call) Return(membersRolePage roles.MembersRolePage, err error) *MockRepository_ListEntityMembers_Call {
	_c.Call.Return(membersRolePage, err)
	return _c
}

func (_c *MockRepository_ListEntityMembers_Call) RunAndReturn(run func(ctx context.Context, entityID string, pageQuery roles.MembersRolePageQuery) (roles.MembersRolePage, error)) *MockRepository_ListEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannelConnections provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveChannelConnections(ctx context.Context, channelID string) error {
	ret := _mock.Called(ctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelConnections")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, channelID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveChannelConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannelConnections'
type MockRepository_RemoveChannelConnections_Call struct {
	*mock.Call
}

// RemoveChannelConnections is a helper method to define mock.On call
//   - ctx
//   - channelID
func (_e *MockRepository_Expecter) RemoveChannelConnections(ctx interface{}, channelID interface{}) *MockRepository_RemoveChannelConnections_Call {
	return &MockRepository_RemoveChannelConnections_Call{Call: _e.mock.On("RemoveChannelConnections", ctx, channelID)}
}

func (_c *MockRepository_RemoveChannelConnections_Call) Run(run func(ctx context.Context, channelID string)) *MockRepository_RemoveChannelConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RemoveChannelConnections_Call) Return(err error) *MockRepository_RemoveChannelConnections_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveChannelConnections_Call) RunAndReturn(run func(ctx context.Context, channelID string) error) *MockRepository_RemoveChannelConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientConnections provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveClientConnections(ctx context.Context, clientID string) error {
	ret := _mock.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientConnections")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveClientConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientConnections'
type MockRepository_RemoveClientConnections_Call struct {
	*mock.Call
}

// RemoveClientConnections is a helper method to define mock.On call
//   - ctx
//   - clientID
func (_e *MockRepository_Expecter) RemoveClientConnections(ctx interface{}, clientID interface{}) *MockRepository_RemoveClientConnections_Call {
	return &MockRepository_RemoveClientConnections_Call{Call: _e.mock.On("RemoveClientConnections", ctx, clientID)}
}

func (_c *MockRepository_RemoveClientConnections_Call) Run(run func(ctx context.Context, clientID string)) *MockRepository_RemoveClientConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RemoveClientConnections_Call) Return(err error) *MockRepository_RemoveClientConnections_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveClientConnections_Call) RunAndReturn(run func(ctx context.Context, clientID string) error) *MockRepository_RemoveClientConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnections provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveConnections(ctx context.Context, conns []clients.Connection) error {
	ret := _mock.Called(ctx, conns)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConnections")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []clients.Connection) error); ok {
		r0 = returnFunc(ctx, conns)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnections'
type MockRepository_RemoveConnections_Call struct {
	*mock.Call
}

// RemoveConnections is a helper method to define mock.On call
//   - ctx
//   - conns
func (_e *MockRepository_Expecter) RemoveConnections(ctx interface{}, conns interface{}) *MockRepository_RemoveConnections_Call {
	return &MockRepository_RemoveConnections_Call{Call: _e.mock.On("RemoveConnections", ctx, conns)}
}

func (_c *MockRepository_RemoveConnections_Call) Run(run func(ctx context.Context, conns []clients.Connection)) *MockRepository_RemoveConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]clients.Connection))
	})
	return _c
}

func (_c *MockRepository_RemoveConnections_Call) Return(err error) *MockRepository_RemoveConnections_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveConnections_Call) RunAndReturn(run func(ctx context.Context, conns []clients.Connection) error) *MockRepository_RemoveConnections_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEntityMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveEntityMembers(ctx context.Context, entityID string, members []string) error {
	ret := _mock.Called(ctx, entityID, members)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEntityMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, entityID, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEntityMembers'
type MockRepository_RemoveEntityMembers_Call struct {
	*mock.Call
}

// RemoveEntityMembers is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - members
func (_e *MockRepository_Expecter) RemoveEntityMembers(ctx interface{}, entityID interface{}, members interface{}) *MockRepository_RemoveEntityMembers_Call {
	return &MockRepository_RemoveEntityMembers_Call{Call: _e.mock.On("RemoveEntityMembers", ctx, entityID, members)}
}

func (_c *MockRepository_RemoveEntityMembers_Call) Run(run func(ctx context.Context, entityID string, members []string)) *MockRepository_RemoveEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RemoveEntityMembers_Call) Return(err error) *MockRepository_RemoveEntityMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveEntityMembers_Call) RunAndReturn(run func(ctx context.Context, entityID string, members []string) error) *MockRepository_RemoveEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMemberFromAllRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveMemberFromAllRoles(ctx context.Context, memberID string) error {
	ret := _mock.Called(ctx, memberID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMemberFromAllRoles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, memberID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveMemberFromAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMemberFromAllRoles'
type MockRepository_RemoveMemberFromAllRoles_Call struct {
	*mock.Call
}

// RemoveMemberFromAllRoles is a helper method to define mock.On call
//   - ctx
//   - memberID
func (_e *MockRepository_Expecter) RemoveMemberFromAllRoles(ctx interface{}, memberID interface{}) *MockRepository_RemoveMemberFromAllRoles_Call {
	return &MockRepository_RemoveMemberFromAllRoles_Call{Call: _e.mock.On("RemoveMemberFromAllRoles", ctx, memberID)}
}

func (_c *MockRepository_RemoveMemberFromAllRoles_Call) Run(run func(ctx context.Context, memberID string)) *MockRepository_RemoveMemberFromAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RemoveMemberFromAllRoles_Call) Return(err error) *MockRepository_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveMemberFromAllRoles_Call) RunAndReturn(run func(ctx context.Context, memberID string) error) *MockRepository_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveParentGroup provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveParentGroup(ctx context.Context, cli clients.Client) error {
	ret := _mock.Called(ctx, cli)

	if len(ret) == 0 {
		panic("no return value specified for RemoveParentGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) error); ok {
		r0 = returnFunc(ctx, cli)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveParentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveParentGroup'
type MockRepository_RemoveParentGroup_Call struct {
	*mock.Call
}

// RemoveParentGroup is a helper method to define mock.On call
//   - ctx
//   - cli
func (_e *MockRepository_Expecter) RemoveParentGroup(ctx interface{}, cli interface{}) *MockRepository_RemoveParentGroup_Call {
	return &MockRepository_RemoveParentGroup_Call{Call: _e.mock.On("RemoveParentGroup", ctx, cli)}
}

func (_c *MockRepository_RemoveParentGroup_Call) Run(run func(ctx context.Context, cli clients.Client)) *MockRepository_RemoveParentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Client))
	})
	return _c
}

func (_c *MockRepository_RemoveParentGroup_Call) Return(err error) *MockRepository_RemoveParentGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveParentGroup_Call) RunAndReturn(run func(ctx context.Context, cli clients.Client) error) *MockRepository_RemoveParentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) RemoveRoles(ctx context.Context, roleIDs []string) error {
	ret := _mock.Called(ctx, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctx, roleIDs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RemoveRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoles'
type MockRepository_RemoveRoles_Call struct {
	*mock.Call
}

// RemoveRoles is a helper method to define mock.On call
//   - ctx
//   - roleIDs
func (_e *MockRepository_Expecter) RemoveRoles(ctx interface{}, roleIDs interface{}) *MockRepository_RemoveRoles_Call {
	return &MockRepository_RemoveRoles_Call{Call: _e.mock.On("RemoveRoles", ctx, roleIDs)}
}

func (_c *MockRepository_RemoveRoles_Call) Run(run func(ctx context.Context, roleIDs []string)) *MockRepository_RemoveRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockRepository_RemoveRoles_Call) Return(err error) *MockRepository_RemoveRoles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RemoveRoles_Call) RunAndReturn(run func(ctx context.Context, roleIDs []string) error) *MockRepository_RemoveRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAll provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveAll(ctx context.Context, pm clients.Page) (clients.ClientsPage, error) {
	ret := _mock.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 clients.ClientsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Page) (clients.ClientsPage, error)); ok {
		return returnFunc(ctx, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Page) clients.ClientsPage); ok {
		r0 = returnFunc(ctx, pm)
	} else {
		r0 = ret.Get(0).(clients.ClientsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, clients.Page) error); ok {
		r1 = returnFunc(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAll'
type MockRepository_RetrieveAll_Call struct {
	*mock.Call
}

// RetrieveAll is a helper method to define mock.On call
//   - ctx
//   - pm
func (_e *MockRepository_Expecter) RetrieveAll(ctx interface{}, pm interface{}) *MockRepository_RetrieveAll_Call {
	return &MockRepository_RetrieveAll_Call{Call: _e.mock.On("RetrieveAll", ctx, pm)}
}

func (_c *MockRepository_RetrieveAll_Call) Run(run func(ctx context.Context, pm clients.Page)) *MockRepository_RetrieveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Page))
	})
	return _c
}

func (_c *MockRepository_RetrieveAll_Call) Return(clientsPage clients.ClientsPage, err error) *MockRepository_RetrieveAll_Call {
	_c.Call.Return(clientsPage, err)
	return _c
}

func (_c *MockRepository_RetrieveAll_Call) RunAndReturn(run func(ctx context.Context, pm clients.Page) (clients.ClientsPage, error)) *MockRepository_RetrieveAll_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveAllRoles(ctx context.Context, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _mock.Called(ctx, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllRoles")
	}

	var r0 roles.RolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.RolePage, error)); ok {
		return returnFunc(ctx, entityID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.RolePage); ok {
		r0 = returnFunc(ctx, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllRoles'
type MockRepository_RetrieveAllRoles_Call struct {
	*mock.Call
}

// RetrieveAllRoles is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - limit
//   - offset
func (_e *MockRepository_Expecter) RetrieveAllRoles(ctx interface{}, entityID interface{}, limit interface{}, offset interface{}) *MockRepository_RetrieveAllRoles_Call {
	return &MockRepository_RetrieveAllRoles_Call{Call: _e.mock.On("RetrieveAllRoles", ctx, entityID, limit, offset)}
}

func (_c *MockRepository_RetrieveAllRoles_Call) Run(run func(ctx context.Context, entityID string, limit uint64, offset uint64)) *MockRepository_RetrieveAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockRepository_RetrieveAllRoles_Call) Return(rolePage roles.RolePage, err error) *MockRepository_RetrieveAllRoles_Call {
	_c.Call.Return(rolePage, err)
	return _c
}

func (_c *MockRepository_RetrieveAllRoles_Call) RunAndReturn(run func(ctx context.Context, entityID string, limit uint64, offset uint64) (roles.RolePage, error)) *MockRepository_RetrieveAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByID provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveByID(ctx context.Context, id string) (clients.Client, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (clients.Client, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) clients.Client); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByID'
type MockRepository_RetrieveByID_Call struct {
	*mock.Call
}

// RetrieveByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockRepository_Expecter) RetrieveByID(ctx interface{}, id interface{}) *MockRepository_RetrieveByID_Call {
	return &MockRepository_RetrieveByID_Call{Call: _e.mock.On("RetrieveByID", ctx, id)}
}

func (_c *MockRepository_RetrieveByID_Call) Run(run func(ctx context.Context, id string)) *MockRepository_RetrieveByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveByID_Call) Return(client clients.Client, err error) *MockRepository_RetrieveByID_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *MockRepository_RetrieveByID_Call) RunAndReturn(run func(ctx context.Context, id string) (clients.Client, error)) *MockRepository_RetrieveByID_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByIDWithRoles provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveByIDWithRoles(ctx context.Context, id string, memberID string) (clients.Client, error) {
	ret := _mock.Called(ctx, id, memberID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByIDWithRoles")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (clients.Client, error)); ok {
		return returnFunc(ctx, id, memberID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) clients.Client); ok {
		r0 = returnFunc(ctx, id, memberID)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, id, memberID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveByIDWithRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByIDWithRoles'
type MockRepository_RetrieveByIDWithRoles_Call struct {
	*mock.Call
}

// RetrieveByIDWithRoles is a helper method to define mock.On call
//   - ctx
//   - id
//   - memberID
func (_e *MockRepository_Expecter) RetrieveByIDWithRoles(ctx interface{}, id interface{}, memberID interface{}) *MockRepository_RetrieveByIDWithRoles_Call {
	return &MockRepository_RetrieveByIDWithRoles_Call{Call: _e.mock.On("RetrieveByIDWithRoles", ctx, id, memberID)}
}

func (_c *MockRepository_RetrieveByIDWithRoles_Call) Run(run func(ctx context.Context, id string, memberID string)) *MockRepository_RetrieveByIDWithRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveByIDWithRoles_Call) Return(client clients.Client, err error) *MockRepository_RetrieveByIDWithRoles_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *MockRepository_RetrieveByIDWithRoles_Call) RunAndReturn(run func(ctx context.Context, id string, memberID string) (clients.Client, error)) *MockRepository_RetrieveByIDWithRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByIds provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveByIds(ctx context.Context, ids []string) (clients.ClientsPage, error) {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByIds")
	}

	var r0 clients.ClientsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) (clients.ClientsPage, error)); ok {
		return returnFunc(ctx, ids)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) clients.ClientsPage); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Get(0).(clients.ClientsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = returnFunc(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByIds'
type MockRepository_RetrieveByIds_Call struct {
	*mock.Call
}

// RetrieveByIds is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockRepository_Expecter) RetrieveByIds(ctx interface{}, ids interface{}) *MockRepository_RetrieveByIds_Call {
	return &MockRepository_RetrieveByIds_Call{Call: _e.mock.On("RetrieveByIds", ctx, ids)}
}

func (_c *MockRepository_RetrieveByIds_Call) Run(run func(ctx context.Context, ids []string)) *MockRepository_RetrieveByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockRepository_RetrieveByIds_Call) Return(clientsPage clients.ClientsPage, err error) *MockRepository_RetrieveByIds_Call {
	_c.Call.Return(clientsPage, err)
	return _c
}

func (_c *MockRepository_RetrieveByIds_Call) RunAndReturn(run func(ctx context.Context, ids []string) (clients.ClientsPage, error)) *MockRepository_RetrieveByIds_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveBySecret provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveBySecret(ctx context.Context, key string) (clients.Client, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveBySecret")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (clients.Client, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) clients.Client); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveBySecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveBySecret'
type MockRepository_RetrieveBySecret_Call struct {
	*mock.Call
}

// RetrieveBySecret is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *MockRepository_Expecter) RetrieveBySecret(ctx interface{}, key interface{}) *MockRepository_RetrieveBySecret_Call {
	return &MockRepository_RetrieveBySecret_Call{Call: _e.mock.On("RetrieveBySecret", ctx, key)}
}

func (_c *MockRepository_RetrieveBySecret_Call) Run(run func(ctx context.Context, key string)) *MockRepository_RetrieveBySecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveBySecret_Call) Return(client clients.Client, err error) *MockRepository_RetrieveBySecret_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *MockRepository_RetrieveBySecret_Call) RunAndReturn(run func(ctx context.Context, key string) (clients.Client, error)) *MockRepository_RetrieveBySecret_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntitiesRolesActionsMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveEntitiesRolesActionsMembers(ctx context.Context, entityIDs []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error) {
	ret := _mock.Called(ctx, entityIDs)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntitiesRolesActionsMembers")
	}

	var r0 []roles.EntityActionRole
	var r1 []roles.EntityMemberRole
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error)); ok {
		return returnFunc(ctx, entityIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) []roles.EntityActionRole); ok {
		r0 = returnFunc(ctx, entityIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.EntityActionRole)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string) []roles.EntityMemberRole); ok {
		r1 = returnFunc(ctx, entityIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]roles.EntityMemberRole)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, []string) error); ok {
		r2 = returnFunc(ctx, entityIDs)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_RetrieveEntitiesRolesActionsMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntitiesRolesActionsMembers'
type MockRepository_RetrieveEntitiesRolesActionsMembers_Call struct {
	*mock.Call
}

// RetrieveEntitiesRolesActionsMembers is a helper method to define mock.On call
//   - ctx
//   - entityIDs
func (_e *MockRepository_Expecter) RetrieveEntitiesRolesActionsMembers(ctx interface{}, entityIDs interface{}) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	return &MockRepository_RetrieveEntitiesRolesActionsMembers_Call{Call: _e.mock.On("RetrieveEntitiesRolesActionsMembers", ctx, entityIDs)}
}

func (_c *MockRepository_RetrieveEntitiesRolesActionsMembers_Call) Run(run func(ctx context.Context, entityIDs []string)) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockRepository_RetrieveEntitiesRolesActionsMembers_Call) Return(entityActionRoles []roles.EntityActionRole, entityMemberRoles []roles.EntityMemberRole, err error) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Return(entityActionRoles, entityMemberRoles, err)
	return _c
}

func (_c *MockRepository_RetrieveEntitiesRolesActionsMembers_Call) RunAndReturn(run func(ctx context.Context, entityIDs []string) ([]roles.EntityActionRole, []roles.EntityMemberRole, error)) *MockRepository_RetrieveEntitiesRolesActionsMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntityRole provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveEntityRole(ctx context.Context, entityID string, roleID string) (roles.Role, error) {
	ret := _mock.Called(ctx, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntityRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (roles.Role, error)); ok {
		return returnFunc(ctx, entityID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) roles.Role); ok {
		r0 = returnFunc(ctx, entityID, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, entityID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveEntityRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntityRole'
type MockRepository_RetrieveEntityRole_Call struct {
	*mock.Call
}

// RetrieveEntityRole is a helper method to define mock.On call
//   - ctx
//   - entityID
//   - roleID
func (_e *MockRepository_Expecter) RetrieveEntityRole(ctx interface{}, entityID interface{}, roleID interface{}) *MockRepository_RetrieveEntityRole_Call {
	return &MockRepository_RetrieveEntityRole_Call{Call: _e.mock.On("RetrieveEntityRole", ctx, entityID, roleID)}
}

func (_c *MockRepository_RetrieveEntityRole_Call) Run(run func(ctx context.Context, entityID string, roleID string)) *MockRepository_RetrieveEntityRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveEntityRole_Call) Return(role roles.Role, err error) *MockRepository_RetrieveEntityRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRepository_RetrieveEntityRole_Call) RunAndReturn(run func(ctx context.Context, entityID string, roleID string) (roles.Role, error)) *MockRepository_RetrieveEntityRole_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveParentGroupClients provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveParentGroupClients(ctx context.Context, parentGroupID string) ([]clients.Client, error) {
	ret := _mock.Called(ctx, parentGroupID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveParentGroupClients")
	}

	var r0 []clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]clients.Client, error)); ok {
		return returnFunc(ctx, parentGroupID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []clients.Client); ok {
		r0 = returnFunc(ctx, parentGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, parentGroupID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveParentGroupClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveParentGroupClients'
type MockRepository_RetrieveParentGroupClients_Call struct {
	*mock.Call
}

// RetrieveParentGroupClients is a helper method to define mock.On call
//   - ctx
//   - parentGroupID
func (_e *MockRepository_Expecter) RetrieveParentGroupClients(ctx interface{}, parentGroupID interface{}) *MockRepository_RetrieveParentGroupClients_Call {
	return &MockRepository_RetrieveParentGroupClients_Call{Call: _e.mock.On("RetrieveParentGroupClients", ctx, parentGroupID)}
}

func (_c *MockRepository_RetrieveParentGroupClients_Call) Run(run func(ctx context.Context, parentGroupID string)) *MockRepository_RetrieveParentGroupClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveParentGroupClients_Call) Return(clients1 []clients.Client, err error) *MockRepository_RetrieveParentGroupClients_Call {
	_c.Call.Return(clients1, err)
	return _c
}

func (_c *MockRepository_RetrieveParentGroupClients_Call) RunAndReturn(run func(ctx context.Context, parentGroupID string) ([]clients.Client, error)) *MockRepository_RetrieveParentGroupClients_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveRole provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveRole(ctx context.Context, roleID string) (roles.Role, error) {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (roles.Role, error)); ok {
		return returnFunc(ctx, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) roles.Role); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveRole'
type MockRepository_RetrieveRole_Call struct {
	*mock.Call
}

// RetrieveRole is a helper method to define mock.On call
//   - ctx
//   - roleID
func (_e *MockRepository_Expecter) RetrieveRole(ctx interface{}, roleID interface{}) *MockRepository_RetrieveRole_Call {
	return &MockRepository_RetrieveRole_Call{Call: _e.mock.On("RetrieveRole", ctx, roleID)}
}

func (_c *MockRepository_RetrieveRole_Call) Run(run func(ctx context.Context, roleID string)) *MockRepository_RetrieveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RetrieveRole_Call) Return(role roles.Role, err error) *MockRepository_RetrieveRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRepository_RetrieveRole_Call) RunAndReturn(run func(ctx context.Context, roleID string) (roles.Role, error)) *MockRepository_RetrieveRole_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveUserClients provides a mock function for the type MockRepository
func (_mock *MockRepository) RetrieveUserClients(ctx context.Context, domainID string, userID string, pm clients.Page) (clients.ClientsPage, error) {
	ret := _mock.Called(ctx, domainID, userID, pm)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveUserClients")
	}

	var r0 clients.ClientsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, clients.Page) (clients.ClientsPage, error)); ok {
		return returnFunc(ctx, domainID, userID, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, clients.Page) clients.ClientsPage); ok {
		r0 = returnFunc(ctx, domainID, userID, pm)
	} else {
		r0 = ret.Get(0).(clients.ClientsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, clients.Page) error); ok {
		r1 = returnFunc(ctx, domainID, userID, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RetrieveUserClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveUserClients'
type MockRepository_RetrieveUserClients_Call struct {
	*mock.Call
}

// RetrieveUserClients is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - userID
//   - pm
func (_e *MockRepository_Expecter) RetrieveUserClients(ctx interface{}, domainID interface{}, userID interface{}, pm interface{}) *MockRepository_RetrieveUserClients_Call {
	return &MockRepository_RetrieveUserClients_Call{Call: _e.mock.On("RetrieveUserClients", ctx, domainID, userID, pm)}
}

func (_c *MockRepository_RetrieveUserClients_Call) Run(run func(ctx context.Context, domainID string, userID string, pm clients.Page)) *MockRepository_RetrieveUserClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(clients.Page))
	})
	return _c
}

func (_c *MockRepository_RetrieveUserClients_Call) Return(clientsPage clients.ClientsPage, err error) *MockRepository_RetrieveUserClients_Call {
	_c.Call.Return(clientsPage, err)
	return _c
}

func (_c *MockRepository_RetrieveUserClients_Call) RunAndReturn(run func(ctx context.Context, domainID string, userID string, pm clients.Page) (clients.ClientsPage, error)) *MockRepository_RetrieveUserClients_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleAddActions(ctx context.Context, role roles.Role, actions []string) ([]string, error) {
	ret := _mock.Called(ctx, role, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) ([]string, error)); ok {
		return returnFunc(ctx, role, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) []string); ok {
		r0 = returnFunc(ctx, role, actions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, roles.Role, []string) error); ok {
		r1 = returnFunc(ctx, role, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleAddActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddActions'
type MockRepository_RoleAddActions_Call struct {
	*mock.Call
}

// RoleAddActions is a helper method to define mock.On call
//   - ctx
//   - role
//   - actions
func (_e *MockRepository_Expecter) RoleAddActions(ctx interface{}, role interface{}, actions interface{}) *MockRepository_RoleAddActions_Call {
	return &MockRepository_RoleAddActions_Call{Call: _e.mock.On("RoleAddActions", ctx, role, actions)}
}

func (_c *MockRepository_RoleAddActions_Call) Run(run func(ctx context.Context, role roles.Role, actions []string)) *MockRepository_RoleAddActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleAddActions_Call) Return(ops []string, err error) *MockRepository_RoleAddActions_Call {
	_c.Call.Return(ops, err)
	return _c
}

func (_c *MockRepository_RoleAddActions_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, actions []string) ([]string, error)) *MockRepository_RoleAddActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleAddMembers(ctx context.Context, role roles.Role, members []string) ([]string, error) {
	ret := _mock.Called(ctx, role, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddMembers")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) ([]string, error)); ok {
		return returnFunc(ctx, role, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) []string); ok {
		r0 = returnFunc(ctx, role, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, roles.Role, []string) error); ok {
		r1 = returnFunc(ctx, role, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleAddMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddMembers'
type MockRepository_RoleAddMembers_Call struct {
	*mock.Call
}

// RoleAddMembers is a helper method to define mock.On call
//   - ctx
//   - role
//   - members
func (_e *MockRepository_Expecter) RoleAddMembers(ctx interface{}, role interface{}, members interface{}) *MockRepository_RoleAddMembers_Call {
	return &MockRepository_RoleAddMembers_Call{Call: _e.mock.On("RoleAddMembers", ctx, role, members)}
}

func (_c *MockRepository_RoleAddMembers_Call) Run(run func(ctx context.Context, role roles.Role, members []string)) *MockRepository_RoleAddMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleAddMembers_Call) Return(strings []string, err error) *MockRepository_RoleAddMembers_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRepository_RoleAddMembers_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, members []string) ([]string, error)) *MockRepository_RoleAddMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckActionsExists provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleCheckActionsExists(ctx context.Context, roleID string, actions []string) (bool, error) {
	ret := _mock.Called(ctx, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckActionsExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) (bool, error)); ok {
		return returnFunc(ctx, roleID, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) bool); ok {
		r0 = returnFunc(ctx, roleID, actions)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, roleID, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleCheckActionsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckActionsExists'
type MockRepository_RoleCheckActionsExists_Call struct {
	*mock.Call
}

// RoleCheckActionsExists is a helper method to define mock.On call
//   - ctx
//   - roleID
//   - actions
func (_e *MockRepository_Expecter) RoleCheckActionsExists(ctx interface{}, roleID interface{}, actions interface{}) *MockRepository_RoleCheckActionsExists_Call {
	return &MockRepository_RoleCheckActionsExists_Call{Call: _e.mock.On("RoleCheckActionsExists", ctx, roleID, actions)}
}

func (_c *MockRepository_RoleCheckActionsExists_Call) Run(run func(ctx context.Context, roleID string, actions []string)) *MockRepository_RoleCheckActionsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleCheckActionsExists_Call) Return(b bool, err error) *MockRepository_RoleCheckActionsExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_RoleCheckActionsExists_Call) RunAndReturn(run func(ctx context.Context, roleID string, actions []string) (bool, error)) *MockRepository_RoleCheckActionsExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckMembersExists provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleCheckMembersExists(ctx context.Context, roleID string, members []string) (bool, error) {
	ret := _mock.Called(ctx, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckMembersExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) (bool, error)); ok {
		return returnFunc(ctx, roleID, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) bool); ok {
		r0 = returnFunc(ctx, roleID, members)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, roleID, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleCheckMembersExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckMembersExists'
type MockRepository_RoleCheckMembersExists_Call struct {
	*mock.Call
}

// RoleCheckMembersExists is a helper method to define mock.On call
//   - ctx
//   - roleID
//   - members
func (_e *MockRepository_Expecter) RoleCheckMembersExists(ctx interface{}, roleID interface{}, members interface{}) *MockRepository_RoleCheckMembersExists_Call {
	return &MockRepository_RoleCheckMembersExists_Call{Call: _e.mock.On("RoleCheckMembersExists", ctx, roleID, members)}
}

func (_c *MockRepository_RoleCheckMembersExists_Call) Run(run func(ctx context.Context, roleID string, members []string)) *MockRepository_RoleCheckMembersExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleCheckMembersExists_Call) Return(b bool, err error) *MockRepository_RoleCheckMembersExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_RoleCheckMembersExists_Call) RunAndReturn(run func(ctx context.Context, roleID string, members []string) (bool, error)) *MockRepository_RoleCheckMembersExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleListActions(ctx context.Context, roleID string) ([]string, error) {
	ret := _mock.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleListActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListActions'
type MockRepository_RoleListActions_Call struct {
	*mock.Call
}

// RoleListActions is a helper method to define mock.On call
//   - ctx
//   - roleID
func (_e *MockRepository_Expecter) RoleListActions(ctx interface{}, roleID interface{}) *MockRepository_RoleListActions_Call {
	return &MockRepository_RoleListActions_Call{Call: _e.mock.On("RoleListActions", ctx, roleID)}
}

func (_c *MockRepository_RoleListActions_Call) Run(run func(ctx context.Context, roleID string)) *MockRepository_RoleListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_RoleListActions_Call) Return(strings []string, err error) *MockRepository_RoleListActions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockRepository_RoleListActions_Call) RunAndReturn(run func(ctx context.Context, roleID string) ([]string, error)) *MockRepository_RoleListActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleListMembers(ctx context.Context, roleID string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _mock.Called(ctx, roleID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RoleListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return returnFunc(ctx, roleID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.MembersPage); ok {
		r0 = returnFunc(ctx, roleID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, roleID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_RoleListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListMembers'
type MockRepository_RoleListMembers_Call struct {
	*mock.Call
}

// RoleListMembers is a helper method to define mock.On call
//   - ctx
//   - roleID
//   - limit
//   - offset
func (_e *MockRepository_Expecter) RoleListMembers(ctx interface{}, roleID interface{}, limit interface{}, offset interface{}) *MockRepository_RoleListMembers_Call {
	return &MockRepository_RoleListMembers_Call{Call: _e.mock.On("RoleListMembers", ctx, roleID, limit, offset)}
}

func (_c *MockRepository_RoleListMembers_Call) Run(run func(ctx context.Context, roleID string, limit uint64, offset uint64)) *MockRepository_RoleListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockRepository_RoleListMembers_Call) Return(membersPage roles.MembersPage, err error) *MockRepository_RoleListMembers_Call {
	_c.Call.Return(membersPage, err)
	return _c
}

func (_c *MockRepository_RoleListMembers_Call) RunAndReturn(run func(ctx context.Context, roleID string, limit uint64, offset uint64) (roles.MembersPage, error)) *MockRepository_RoleListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveActions(ctx context.Context, role roles.Role, actions []string) error {
	ret := _mock.Called(ctx, role, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) error); ok {
		r0 = returnFunc(ctx, role, actions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveActions'
type MockRepository_RoleRemoveActions_Call struct {
	*mock.Call
}

// RoleRemoveActions is a helper method to define mock.On call
//   - ctx
//   - role
//   - actions
func (_e *MockRepository_Expecter) RoleRemoveActions(ctx interface{}, role interface{}, actions interface{}) *MockRepository_RoleRemoveActions_Call {
	return &MockRepository_RoleRemoveActions_Call{Call: _e.mock.On("RoleRemoveActions", ctx, role, actions)}
}

func (_c *MockRepository_RoleRemoveActions_Call) Run(run func(ctx context.Context, role roles.Role, actions []string)) *MockRepository_RoleRemoveActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveActions_Call) Return(err error) *MockRepository_RoleRemoveActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveActions_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, actions []string) error) *MockRepository_RoleRemoveActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllActions provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveAllActions(ctx context.Context, role roles.Role) error {
	ret := _mock.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) error); ok {
		r0 = returnFunc(ctx, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveAllActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllActions'
type MockRepository_RoleRemoveAllActions_Call struct {
	*mock.Call
}

// RoleRemoveAllActions is a helper method to define mock.On call
//   - ctx
//   - role
func (_e *MockRepository_Expecter) RoleRemoveAllActions(ctx interface{}, role interface{}) *MockRepository_RoleRemoveAllActions_Call {
	return &MockRepository_RoleRemoveAllActions_Call{Call: _e.mock.On("RoleRemoveAllActions", ctx, role)}
}

func (_c *MockRepository_RoleRemoveAllActions_Call) Run(run func(ctx context.Context, role roles.Role)) *MockRepository_RoleRemoveAllActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveAllActions_Call) Return(err error) *MockRepository_RoleRemoveAllActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveAllActions_Call) RunAndReturn(run func(ctx context.Context, role roles.Role) error) *MockRepository_RoleRemoveAllActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveAllMembers(ctx context.Context, role roles.Role) error {
	ret := _mock.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) error); ok {
		r0 = returnFunc(ctx, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveAllMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllMembers'
type MockRepository_RoleRemoveAllMembers_Call struct {
	*mock.Call
}

// RoleRemoveAllMembers is a helper method to define mock.On call
//   - ctx
//   - role
func (_e *MockRepository_Expecter) RoleRemoveAllMembers(ctx interface{}, role interface{}) *MockRepository_RoleRemoveAllMembers_Call {
	return &MockRepository_RoleRemoveAllMembers_Call{Call: _e.mock.On("RoleRemoveAllMembers", ctx, role)}
}

func (_c *MockRepository_RoleRemoveAllMembers_Call) Run(run func(ctx context.Context, role roles.Role)) *MockRepository_RoleRemoveAllMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveAllMembers_Call) Return(err error) *MockRepository_RoleRemoveAllMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveAllMembers_Call) RunAndReturn(run func(ctx context.Context, role roles.Role) error) *MockRepository_RoleRemoveAllMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) RoleRemoveMembers(ctx context.Context, role roles.Role, members []string) error {
	ret := _mock.Called(ctx, role, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role, []string) error); ok {
		r0 = returnFunc(ctx, role, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_RoleRemoveMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveMembers'
type MockRepository_RoleRemoveMembers_Call struct {
	*mock.Call
}

// RoleRemoveMembers is a helper method to define mock.On call
//   - ctx
//   - role
//   - members
func (_e *MockRepository_Expecter) RoleRemoveMembers(ctx interface{}, role interface{}, members interface{}) *MockRepository_RoleRemoveMembers_Call {
	return &MockRepository_RoleRemoveMembers_Call{Call: _e.mock.On("RoleRemoveMembers", ctx, role, members)}
}

func (_c *MockRepository_RoleRemoveMembers_Call) Run(run func(ctx context.Context, role roles.Role, members []string)) *MockRepository_RoleRemoveMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role), args[2].([]string))
	})
	return _c
}

func (_c *MockRepository_RoleRemoveMembers_Call) Return(err error) *MockRepository_RoleRemoveMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_RoleRemoveMembers_Call) RunAndReturn(run func(ctx context.Context, role roles.Role, members []string) error) *MockRepository_RoleRemoveMembers_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockRepository
func (_mock *MockRepository) Save(ctx context.Context, client ...clients.Client) ([]clients.Client, error) {
	var tmpRet mock.Arguments
	if len(client) > 0 {
		tmpRet = _mock.Called(ctx, client)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 []clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []clients.Client) ([]clients.Client, error)); ok {
		return returnFunc(ctx, client)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...clients.Client) []clients.Client); ok {
		r0 = returnFunc(ctx, client...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...clients.Client) error); ok {
		r1 = returnFunc(ctx, client...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx
//   - client
func (_e *MockRepository_Expecter) Save(ctx interface{}, client ...interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{ctx}, client...)...)}
}

func (_c *MockRepository_Save_Call) Run(run func(ctx context.Context, client ...clients.Client)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]clients.Client, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(clients.Client)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(clients1 []clients.Client, err error) *MockRepository_Save_Call {
	_c.Call.Return(clients1, err)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(ctx context.Context, client ...clients.Client) ([]clients.Client, error)) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SearchClients provides a mock function for the type MockRepository
func (_mock *MockRepository) SearchClients(ctx context.Context, pm clients.Page) (clients.ClientsPage, error) {
	ret := _mock.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for SearchClients")
	}

	var r0 clients.ClientsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Page) (clients.ClientsPage, error)); ok {
		return returnFunc(ctx, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Page) clients.ClientsPage); ok {
		r0 = returnFunc(ctx, pm)
	} else {
		r0 = ret.Get(0).(clients.ClientsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, clients.Page) error); ok {
		r1 = returnFunc(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_SearchClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchClients'
type MockRepository_SearchClients_Call struct {
	*mock.Call
}

// SearchClients is a helper method to define mock.On call
//   - ctx
//   - pm
func (_e *MockRepository_Expecter) SearchClients(ctx interface{}, pm interface{}) *MockRepository_SearchClients_Call {
	return &MockRepository_SearchClients_Call{Call: _e.mock.On("SearchClients", ctx, pm)}
}

func (_c *MockRepository_SearchClients_Call) Run(run func(ctx context.Context, pm clients.Page)) *MockRepository_SearchClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Page))
	})
	return _c
}

func (_c *MockRepository_SearchClients_Call) Return(clientsPage clients.ClientsPage, err error) *MockRepository_SearchClients_Call {
	_c.Call.Return(clientsPage, err)
	return _c
}

func (_c *MockRepository_SearchClients_Call) RunAndReturn(run func(ctx context.Context, pm clients.Page) (clients.ClientsPage, error)) *MockRepository_SearchClients_Call {
	_c.Call.Return(run)
	return _c
}

// SetParentGroup provides a mock function for the type MockRepository
func (_mock *MockRepository) SetParentGroup(ctx context.Context, cli clients.Client) error {
	ret := _mock.Called(ctx, cli)

	if len(ret) == 0 {
		panic("no return value specified for SetParentGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) error); ok {
		r0 = returnFunc(ctx, cli)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_SetParentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParentGroup'
type MockRepository_SetParentGroup_Call struct {
	*mock.Call
}

// SetParentGroup is a helper method to define mock.On call
//   - ctx
//   - cli
func (_e *MockRepository_Expecter) SetParentGroup(ctx interface{}, cli interface{}) *MockRepository_SetParentGroup_Call {
	return &MockRepository_SetParentGroup_Call{Call: _e.mock.On("SetParentGroup", ctx, cli)}
}

func (_c *MockRepository_SetParentGroup_Call) Run(run func(ctx context.Context, cli clients.Client)) *MockRepository_SetParentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Client))
	})
	return _c
}

func (_c *MockRepository_SetParentGroup_Call) Return(err error) *MockRepository_SetParentGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_SetParentGroup_Call) RunAndReturn(run func(ctx context.Context, cli clients.Client) error) *MockRepository_SetParentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetParentGroupFromClient provides a mock function for the type MockRepository
func (_mock *MockRepository) UnsetParentGroupFromClient(ctx context.Context, parentGroupID string) error {
	ret := _mock.Called(ctx, parentGroupID)

	if len(ret) == 0 {
		panic("no return value specified for UnsetParentGroupFromClient")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, parentGroupID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UnsetParentGroupFromClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetParentGroupFromClient'
type MockRepository_UnsetParentGroupFromClient_Call struct {
	*mock.Call
}

// UnsetParentGroupFromClient is a helper method to define mock.On call
//   - ctx
//   - parentGroupID
func (_e *MockRepository_Expecter) UnsetParentGroupFromClient(ctx interface{}, parentGroupID interface{}) *MockRepository_UnsetParentGroupFromClient_Call {
	return &MockRepository_UnsetParentGroupFromClient_Call{Call: _e.mock.On("UnsetParentGroupFromClient", ctx, parentGroupID)}
}

func (_c *MockRepository_UnsetParentGroupFromClient_Call) Run(run func(ctx context.Context, parentGroupID string)) *MockRepository_UnsetParentGroupFromClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_UnsetParentGroupFromClient_Call) Return(err error) *MockRepository_UnsetParentGroupFromClient_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UnsetParentGroupFromClient_Call) RunAndReturn(run func(ctx context.Context, parentGroupID string) error) *MockRepository_UnsetParentGroupFromClient_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository) Update(ctx context.Context, client clients.Client) (clients.Client, error) {
	ret := _mock.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) (clients.Client, error)); ok {
		return returnFunc(ctx, client)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) clients.Client); ok {
		r0 = returnFunc(ctx, client)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, clients.Client) error); ok {
		r1 = returnFunc(ctx, client)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - client
func (_e *MockRepository_Expecter) Update(ctx interface{}, client interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, client)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, client clients.Client)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Client))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(client1 clients.Client, err error) *MockRepository_Update_Call {
	_c.Call.Return(client1, err)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(ctx context.Context, client clients.Client) (clients.Client, error)) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIdentity provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateIdentity(ctx context.Context, client clients.Client) (clients.Client, error) {
	ret := _mock.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentity")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) (clients.Client, error)); ok {
		return returnFunc(ctx, client)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) clients.Client); ok {
		r0 = returnFunc(ctx, client)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, clients.Client) error); ok {
		r1 = returnFunc(ctx, client)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIdentity'
type MockRepository_UpdateIdentity_Call struct {
	*mock.Call
}

// UpdateIdentity is a helper method to define mock.On call
//   - ctx
//   - client
func (_e *MockRepository_Expecter) UpdateIdentity(ctx interface{}, client interface{}) *MockRepository_UpdateIdentity_Call {
	return &MockRepository_UpdateIdentity_Call{Call: _e.mock.On("UpdateIdentity", ctx, client)}
}

func (_c *MockRepository_UpdateIdentity_Call) Run(run func(ctx context.Context, client clients.Client)) *MockRepository_UpdateIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Client))
	})
	return _c
}

func (_c *MockRepository_UpdateIdentity_Call) Return(client1 clients.Client, err error) *MockRepository_UpdateIdentity_Call {
	_c.Call.Return(client1, err)
	return _c
}

func (_c *MockRepository_UpdateIdentity_Call) RunAndReturn(run func(ctx context.Context, client clients.Client) (clients.Client, error)) *MockRepository_UpdateIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateRole(ctx context.Context, ro roles.Role) (roles.Role, error) {
	ret := _mock.Called(ctx, ro)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) (roles.Role, error)); ok {
		return returnFunc(ctx, ro)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, roles.Role) roles.Role); ok {
		r0 = returnFunc(ctx, ro)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, roles.Role) error); ok {
		r1 = returnFunc(ctx, ro)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockRepository_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx
//   - ro
func (_e *MockRepository_Expecter) UpdateRole(ctx interface{}, ro interface{}) *MockRepository_UpdateRole_Call {
	return &MockRepository_UpdateRole_Call{Call: _e.mock.On("UpdateRole", ctx, ro)}
}

func (_c *MockRepository_UpdateRole_Call) Run(run func(ctx context.Context, ro roles.Role)) *MockRepository_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(roles.Role))
	})
	return _c
}

func (_c *MockRepository_UpdateRole_Call) Return(role roles.Role, err error) *MockRepository_UpdateRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRepository_UpdateRole_Call) RunAndReturn(run func(ctx context.Context, ro roles.Role) (roles.Role, error)) *MockRepository_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSecret provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateSecret(ctx context.Context, client clients.Client) (clients.Client, error) {
	ret := _mock.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecret")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) (clients.Client, error)); ok {
		return returnFunc(ctx, client)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) clients.Client); ok {
		r0 = returnFunc(ctx, client)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, clients.Client) error); ok {
		r1 = returnFunc(ctx, client)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSecret'
type MockRepository_UpdateSecret_Call struct {
	*mock.Call
}

// UpdateSecret is a helper method to define mock.On call
//   - ctx
//   - client
func (_e *MockRepository_Expecter) UpdateSecret(ctx interface{}, client interface{}) *MockRepository_UpdateSecret_Call {
	return &MockRepository_UpdateSecret_Call{Call: _e.mock.On("UpdateSecret", ctx, client)}
}

func (_c *MockRepository_UpdateSecret_Call) Run(run func(ctx context.Context, client clients.Client)) *MockRepository_UpdateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Client))
	})
	return _c
}

func (_c *MockRepository_UpdateSecret_Call) Return(client1 clients.Client, err error) *MockRepository_UpdateSecret_Call {
	_c.Call.Return(client1, err)
	return _c
}

func (_c *MockRepository_UpdateSecret_Call) RunAndReturn(run func(ctx context.Context, client clients.Client) (clients.Client, error)) *MockRepository_UpdateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTags provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateTags(ctx context.Context, client clients.Client) (clients.Client, error) {
	ret := _mock.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTags")
	}

	var r0 clients.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) (clients.Client, error)); ok {
		return returnFunc(ctx, client)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, clients.Client) clients.Client); ok {
		r0 = returnFunc(ctx, client)
	} else {
		r0 = ret.Get(0).(clients.Client)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, clients.Client) error); ok {
		r1 = returnFunc(ctx, client)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTags'
type MockRepository_UpdateTags_Call struct {
	*mock.Call
}

// UpdateTags is a helper method to define mock.On call
//   - ctx
//   - client
func (_e *MockRepository_Expecter) UpdateTags(ctx interface{}, client interface{}) *MockRepository_UpdateTags_Call {
	return &MockRepository_UpdateTags_Call{Call: _e.mock.On("UpdateTags", ctx, client)}
}

func (_c *MockRepository_UpdateTags_Call) Run(run func(ctx context.Context, client clients.Client)) *MockRepository_UpdateTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clients.Client))
	})
	return _c
}

func (_c *MockRepository_UpdateTags_Call) Return(client1 clients.Client, err error) *MockRepository_UpdateTags_Call {
	_c.Call.Return(client1, err)
	return _c
}

func (_c *MockRepository_UpdateTags_Call) RunAndReturn(run func(ctx context.Context, client clients.Client) (clients.Client, error)) *MockRepository_UpdateTags_Call {
	_c.Call.Return(run)
	return _c
}
