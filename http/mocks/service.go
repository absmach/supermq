// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/http"
	mock "github.com/stretchr/testify/mock"
)

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function for the type Service
func (_mock *Service) Subscribe(ctx context.Context, sessionID string, clientKey string, domainID string, chanID string, subtopic string, client *http.Client) error {
	ret := _mock.Called(ctx, sessionID, clientKey, domainID, chanID, subtopic, client)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, *http.Client) error); ok {
		r0 = returnFunc(ctx, sessionID, clientKey, domainID, chanID, subtopic, client)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Service_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
//   - clientKey string
//   - domainID string
//   - chanID string
//   - subtopic string
//   - client *http.Client
func (_e *Service_Expecter) Subscribe(ctx interface{}, sessionID interface{}, clientKey interface{}, domainID interface{}, chanID interface{}, subtopic interface{}, client interface{}) *Service_Subscribe_Call {
	return &Service_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, sessionID, clientKey, domainID, chanID, subtopic, client)}
}

func (_c *Service_Subscribe_Call) Run(run func(ctx context.Context, sessionID string, clientKey string, domainID string, chanID string, subtopic string, client *http.Client)) *Service_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 *http.Client
		if args[6] != nil {
			arg6 = args[6].(*http.Client)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *Service_Subscribe_Call) Return(err error) *Service_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_Subscribe_Call) RunAndReturn(run func(ctx context.Context, sessionID string, clientKey string, domainID string, chanID string, subtopic string, client *http.Client) error) *Service_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type Service
func (_mock *Service) Unsubscribe(ctx context.Context, sessionID string, domainID string, chanID string, subtopic string) error {
	ret := _mock.Called(ctx, sessionID, domainID, chanID, subtopic)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, sessionID, domainID, chanID, subtopic)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type Service_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
//   - domainID string
//   - chanID string
//   - subtopic string
func (_e *Service_Expecter) Unsubscribe(ctx interface{}, sessionID interface{}, domainID interface{}, chanID interface{}, subtopic interface{}) *Service_Unsubscribe_Call {
	return &Service_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", ctx, sessionID, domainID, chanID, subtopic)}
}

func (_c *Service_Unsubscribe_Call) Run(run func(ctx context.Context, sessionID string, domainID string, chanID string, subtopic string)) *Service_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *Service_Unsubscribe_Call) Return(err error) *Service_Unsubscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_Unsubscribe_Call) RunAndReturn(run func(ctx context.Context, sessionID string, domainID string, chanID string, subtopic string) error) *Service_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}
