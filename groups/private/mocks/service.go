// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/groups"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// RetrieveById provides a mock function for the type MockService
func (_mock *MockService) RetrieveById(ctx context.Context, id string) (groups.Group, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveById")
	}

	var r0 groups.Group
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (groups.Group, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) groups.Group); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveById'
type MockService_RetrieveById_Call struct {
	*mock.Call
}

// RetrieveById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockService_Expecter) RetrieveById(ctx interface{}, id interface{}) *MockService_RetrieveById_Call {
	return &MockService_RetrieveById_Call{Call: _e.mock.On("RetrieveById", ctx, id)}
}

func (_c *MockService_RetrieveById_Call) Run(run func(ctx context.Context, id string)) *MockService_RetrieveById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_RetrieveById_Call) Return(group groups.Group, err error) *MockService_RetrieveById_Call {
	_c.Call.Return(group, err)
	return _c
}

func (_c *MockService_RetrieveById_Call) RunAndReturn(run func(ctx context.Context, id string) (groups.Group, error)) *MockService_RetrieveById_Call {
	_c.Call.Return(run)
	return _c
}
