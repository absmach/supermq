// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/domains"
	"github.com/absmach/supermq/pkg/authn"
	"github.com/absmach/supermq/pkg/roles"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AcceptInvitation provides a mock function for the type MockService
func (_mock *MockService) AcceptInvitation(ctx context.Context, session authn.Session, domainID string) (domains.Invitation, error) {
	ret := _mock.Called(ctx, session, domainID)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 domains.Invitation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (domains.Invitation, error)); ok {
		return returnFunc(ctx, session, domainID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) domains.Invitation); ok {
		r0 = returnFunc(ctx, session, domainID)
	} else {
		r0 = ret.Get(0).(domains.Invitation)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, session, domainID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_AcceptInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptInvitation'
type MockService_AcceptInvitation_Call struct {
	*mock.Call
}

// AcceptInvitation is a helper method to define mock.On call
//   - ctx
//   - session
//   - domainID
func (_e *MockService_Expecter) AcceptInvitation(ctx interface{}, session interface{}, domainID interface{}) *MockService_AcceptInvitation_Call {
	return &MockService_AcceptInvitation_Call{Call: _e.mock.On("AcceptInvitation", ctx, session, domainID)}
}

func (_c *MockService_AcceptInvitation_Call) Run(run func(ctx context.Context, session authn.Session, domainID string)) *MockService_AcceptInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_AcceptInvitation_Call) Return(invitation domains.Invitation, err error) *MockService_AcceptInvitation_Call {
	_c.Call.Return(invitation, err)
	return _c
}

func (_c *MockService_AcceptInvitation_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, domainID string) (domains.Invitation, error)) *MockService_AcceptInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// AddRole provides a mock function for the type MockService
func (_mock *MockService) AddRole(ctx context.Context, session authn.Session, entityID string, roleName string, optionalActions []string, optionalMembers []string) (roles.RoleProvision, error) {
	ret := _mock.Called(ctx, session, entityID, roleName, optionalActions, optionalMembers)

	if len(ret) == 0 {
		panic("no return value specified for AddRole")
	}

	var r0 roles.RoleProvision
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string, []string) (roles.RoleProvision, error)); ok {
		return returnFunc(ctx, session, entityID, roleName, optionalActions, optionalMembers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string, []string) roles.RoleProvision); ok {
		r0 = returnFunc(ctx, session, entityID, roleName, optionalActions, optionalMembers)
	} else {
		r0 = ret.Get(0).(roles.RoleProvision)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleName, optionalActions, optionalMembers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_AddRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRole'
type MockService_AddRole_Call struct {
	*mock.Call
}

// AddRole is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleName
//   - optionalActions
//   - optionalMembers
func (_e *MockService_Expecter) AddRole(ctx interface{}, session interface{}, entityID interface{}, roleName interface{}, optionalActions interface{}, optionalMembers interface{}) *MockService_AddRole_Call {
	return &MockService_AddRole_Call{Call: _e.mock.On("AddRole", ctx, session, entityID, roleName, optionalActions, optionalMembers)}
}

func (_c *MockService_AddRole_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleName string, optionalActions []string, optionalMembers []string)) *MockService_AddRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string), args[5].([]string))
	})
	return _c
}

func (_c *MockService_AddRole_Call) Return(roleProvision roles.RoleProvision, err error) *MockService_AddRole_Call {
	_c.Call.Return(roleProvision, err)
	return _c
}

func (_c *MockService_AddRole_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleName string, optionalActions []string, optionalMembers []string) (roles.RoleProvision, error)) *MockService_AddRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDomain provides a mock function for the type MockService
func (_mock *MockService) CreateDomain(ctx context.Context, sesssion authn.Session, d domains.Domain) (domains.Domain, []roles.RoleProvision, error) {
	ret := _mock.Called(ctx, sesssion, d)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 domains.Domain
	var r1 []roles.RoleProvision
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.Domain) (domains.Domain, []roles.RoleProvision, error)); ok {
		return returnFunc(ctx, sesssion, d)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.Domain) domains.Domain); ok {
		r0 = returnFunc(ctx, sesssion, d)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, domains.Domain) []roles.RoleProvision); ok {
		r1 = returnFunc(ctx, sesssion, d)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]roles.RoleProvision)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, authn.Session, domains.Domain) error); ok {
		r2 = returnFunc(ctx, sesssion, d)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockService_CreateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDomain'
type MockService_CreateDomain_Call struct {
	*mock.Call
}

// CreateDomain is a helper method to define mock.On call
//   - ctx
//   - sesssion
//   - d
func (_e *MockService_Expecter) CreateDomain(ctx interface{}, sesssion interface{}, d interface{}) *MockService_CreateDomain_Call {
	return &MockService_CreateDomain_Call{Call: _e.mock.On("CreateDomain", ctx, sesssion, d)}
}

func (_c *MockService_CreateDomain_Call) Run(run func(ctx context.Context, sesssion authn.Session, d domains.Domain)) *MockService_CreateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(domains.Domain))
	})
	return _c
}

func (_c *MockService_CreateDomain_Call) Return(domain domains.Domain, roleProvisions []roles.RoleProvision, err error) *MockService_CreateDomain_Call {
	_c.Call.Return(domain, roleProvisions, err)
	return _c
}

func (_c *MockService_CreateDomain_Call) RunAndReturn(run func(ctx context.Context, sesssion authn.Session, d domains.Domain) (domains.Domain, []roles.RoleProvision, error)) *MockService_CreateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvitation provides a mock function for the type MockService
func (_mock *MockService) DeleteInvitation(ctx context.Context, session authn.Session, inviteeUserID string, domainID string) error {
	ret := _mock.Called(ctx, session, inviteeUserID, domainID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, inviteeUserID, domainID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvitation'
type MockService_DeleteInvitation_Call struct {
	*mock.Call
}

// DeleteInvitation is a helper method to define mock.On call
//   - ctx
//   - session
//   - inviteeUserID
//   - domainID
func (_e *MockService_Expecter) DeleteInvitation(ctx interface{}, session interface{}, inviteeUserID interface{}, domainID interface{}) *MockService_DeleteInvitation_Call {
	return &MockService_DeleteInvitation_Call{Call: _e.mock.On("DeleteInvitation", ctx, session, inviteeUserID, domainID)}
}

func (_c *MockService_DeleteInvitation_Call) Run(run func(ctx context.Context, session authn.Session, inviteeUserID string, domainID string)) *MockService_DeleteInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_DeleteInvitation_Call) Return(err error) *MockService_DeleteInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteInvitation_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, inviteeUserID string, domainID string) error) *MockService_DeleteInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// DisableDomain provides a mock function for the type MockService
func (_mock *MockService) DisableDomain(ctx context.Context, sesssion authn.Session, id string) (domains.Domain, error) {
	ret := _mock.Called(ctx, sesssion, id)

	if len(ret) == 0 {
		panic("no return value specified for DisableDomain")
	}

	var r0 domains.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (domains.Domain, error)); ok {
		return returnFunc(ctx, sesssion, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) domains.Domain); ok {
		r0 = returnFunc(ctx, sesssion, id)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, sesssion, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_DisableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableDomain'
type MockService_DisableDomain_Call struct {
	*mock.Call
}

// DisableDomain is a helper method to define mock.On call
//   - ctx
//   - sesssion
//   - id
func (_e *MockService_Expecter) DisableDomain(ctx interface{}, sesssion interface{}, id interface{}) *MockService_DisableDomain_Call {
	return &MockService_DisableDomain_Call{Call: _e.mock.On("DisableDomain", ctx, sesssion, id)}
}

func (_c *MockService_DisableDomain_Call) Run(run func(ctx context.Context, sesssion authn.Session, id string)) *MockService_DisableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_DisableDomain_Call) Return(domain domains.Domain, err error) *MockService_DisableDomain_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockService_DisableDomain_Call) RunAndReturn(run func(ctx context.Context, sesssion authn.Session, id string) (domains.Domain, error)) *MockService_DisableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// EnableDomain provides a mock function for the type MockService
func (_mock *MockService) EnableDomain(ctx context.Context, sesssion authn.Session, id string) (domains.Domain, error) {
	ret := _mock.Called(ctx, sesssion, id)

	if len(ret) == 0 {
		panic("no return value specified for EnableDomain")
	}

	var r0 domains.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (domains.Domain, error)); ok {
		return returnFunc(ctx, sesssion, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) domains.Domain); ok {
		r0 = returnFunc(ctx, sesssion, id)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, sesssion, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_EnableDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableDomain'
type MockService_EnableDomain_Call struct {
	*mock.Call
}

// EnableDomain is a helper method to define mock.On call
//   - ctx
//   - sesssion
//   - id
func (_e *MockService_Expecter) EnableDomain(ctx interface{}, sesssion interface{}, id interface{}) *MockService_EnableDomain_Call {
	return &MockService_EnableDomain_Call{Call: _e.mock.On("EnableDomain", ctx, sesssion, id)}
}

func (_c *MockService_EnableDomain_Call) Run(run func(ctx context.Context, sesssion authn.Session, id string)) *MockService_EnableDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_EnableDomain_Call) Return(domain domains.Domain, err error) *MockService_EnableDomain_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockService_EnableDomain_Call) RunAndReturn(run func(ctx context.Context, sesssion authn.Session, id string) (domains.Domain, error)) *MockService_EnableDomain_Call {
	_c.Call.Return(run)
	return _c
}

// FreezeDomain provides a mock function for the type MockService
func (_mock *MockService) FreezeDomain(ctx context.Context, sesssion authn.Session, id string) (domains.Domain, error) {
	ret := _mock.Called(ctx, sesssion, id)

	if len(ret) == 0 {
		panic("no return value specified for FreezeDomain")
	}

	var r0 domains.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) (domains.Domain, error)); ok {
		return returnFunc(ctx, sesssion, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) domains.Domain); ok {
		r0 = returnFunc(ctx, sesssion, id)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = returnFunc(ctx, sesssion, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_FreezeDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FreezeDomain'
type MockService_FreezeDomain_Call struct {
	*mock.Call
}

// FreezeDomain is a helper method to define mock.On call
//   - ctx
//   - sesssion
//   - id
func (_e *MockService_Expecter) FreezeDomain(ctx interface{}, sesssion interface{}, id interface{}) *MockService_FreezeDomain_Call {
	return &MockService_FreezeDomain_Call{Call: _e.mock.On("FreezeDomain", ctx, sesssion, id)}
}

func (_c *MockService_FreezeDomain_Call) Run(run func(ctx context.Context, sesssion authn.Session, id string)) *MockService_FreezeDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_FreezeDomain_Call) Return(domain domains.Domain, err error) *MockService_FreezeDomain_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockService_FreezeDomain_Call) RunAndReturn(run func(ctx context.Context, sesssion authn.Session, id string) (domains.Domain, error)) *MockService_FreezeDomain_Call {
	_c.Call.Return(run)
	return _c
}

// ListAvailableActions provides a mock function for the type MockService
func (_mock *MockService) ListAvailableActions(ctx context.Context, session authn.Session) ([]string, error) {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) ([]string, error)); ok {
		return returnFunc(ctx, session)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session) []string); ok {
		r0 = returnFunc(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session) error); ok {
		r1 = returnFunc(ctx, session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListAvailableActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAvailableActions'
type MockService_ListAvailableActions_Call struct {
	*mock.Call
}

// ListAvailableActions is a helper method to define mock.On call
//   - ctx
//   - session
func (_e *MockService_Expecter) ListAvailableActions(ctx interface{}, session interface{}) *MockService_ListAvailableActions_Call {
	return &MockService_ListAvailableActions_Call{Call: _e.mock.On("ListAvailableActions", ctx, session)}
}

func (_c *MockService_ListAvailableActions_Call) Run(run func(ctx context.Context, session authn.Session)) *MockService_ListAvailableActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session))
	})
	return _c
}

func (_c *MockService_ListAvailableActions_Call) Return(strings []string, err error) *MockService_ListAvailableActions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockService_ListAvailableActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session) ([]string, error)) *MockService_ListAvailableActions_Call {
	_c.Call.Return(run)
	return _c
}

// ListDomainInvitations provides a mock function for the type MockService
func (_mock *MockService) ListDomainInvitations(ctx context.Context, session authn.Session, page domains.InvitationPageMeta) (domains.InvitationPage, error) {
	ret := _mock.Called(ctx, session, page)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainInvitations")
	}

	var r0 domains.InvitationPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.InvitationPageMeta) (domains.InvitationPage, error)); ok {
		return returnFunc(ctx, session, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.InvitationPageMeta) domains.InvitationPage); ok {
		r0 = returnFunc(ctx, session, page)
	} else {
		r0 = ret.Get(0).(domains.InvitationPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, domains.InvitationPageMeta) error); ok {
		r1 = returnFunc(ctx, session, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListDomainInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDomainInvitations'
type MockService_ListDomainInvitations_Call struct {
	*mock.Call
}

// ListDomainInvitations is a helper method to define mock.On call
//   - ctx context.Context
//   - session authn.Session
//   - page domains.InvitationPageMeta
func (_e *Service_Expecter) ListDomainInvitations(ctx interface{}, session interface{}, page interface{}) *Service_ListDomainInvitations_Call {
	return &Service_ListDomainInvitations_Call{Call: _e.mock.On("ListDomainInvitations", ctx, session, page)}
}

func (_c *MockService_ListDomainInvitations_Call) Run(run func(ctx context.Context, session authn.Session, page domains.InvitationPageMeta)) *MockService_ListDomainInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 authn.Session
		if args[1] != nil {
			arg1 = args[1].(authn.Session)
		}
		var arg2 domains.InvitationPageMeta
		if args[2] != nil {
			arg2 = args[2].(domains.InvitationPageMeta)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_ListDomainInvitations_Call) Return(invitations domains.InvitationPage, err error) *MockService_ListDomainInvitations_Call {
	_c.Call.Return(invitations, err)
	return _c
}

func (_c *MockService_ListDomainInvitations_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, page domains.InvitationPageMeta) (domains.InvitationPage, error)) *MockService_ListDomainInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// ListDomains provides a mock function for the type MockService
func (_mock *MockService) ListDomains(ctx context.Context, sesssion authn.Session, page domains.Page) (domains.DomainsPage, error) {
	ret := _mock.Called(ctx, sesssion, page)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 domains.DomainsPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.Page) (domains.DomainsPage, error)); ok {
		return returnFunc(ctx, sesssion, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.Page) domains.DomainsPage); ok {
		r0 = returnFunc(ctx, sesssion, page)
	} else {
		r0 = ret.Get(0).(domains.DomainsPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, domains.Page) error); ok {
		r1 = returnFunc(ctx, sesssion, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDomains'
type MockService_ListDomains_Call struct {
	*mock.Call
}

// ListDomains is a helper method to define mock.On call
//   - ctx
//   - sesssion
//   - page
func (_e *MockService_Expecter) ListDomains(ctx interface{}, sesssion interface{}, page interface{}) *MockService_ListDomains_Call {
	return &MockService_ListDomains_Call{Call: _e.mock.On("ListDomains", ctx, sesssion, page)}
}

func (_c *MockService_ListDomains_Call) Run(run func(ctx context.Context, sesssion authn.Session, page domains.Page)) *MockService_ListDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(domains.Page))
	})
	return _c
}

func (_c *MockService_ListDomains_Call) Return(domainsPage domains.DomainsPage, err error) *MockService_ListDomains_Call {
	_c.Call.Return(domainsPage, err)
	return _c
}

func (_c *MockService_ListDomains_Call) RunAndReturn(run func(ctx context.Context, sesssion authn.Session, page domains.Page) (domains.DomainsPage, error)) *MockService_ListDomains_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntityMembers provides a mock function for the type MockService
func (_mock *MockService) ListEntityMembers(ctx context.Context, session authn.Session, entityID string, pq roles.MembersRolePageQuery) (roles.MembersRolePage, error) {
	ret := _mock.Called(ctx, session, entityID, pq)

	if len(ret) == 0 {
		panic("no return value specified for ListEntityMembers")
	}

	var r0 roles.MembersRolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, roles.MembersRolePageQuery) (roles.MembersRolePage, error)); ok {
		return returnFunc(ctx, session, entityID, pq)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, roles.MembersRolePageQuery) roles.MembersRolePage); ok {
		r0 = returnFunc(ctx, session, entityID, pq)
	} else {
		r0 = ret.Get(0).(roles.MembersRolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, roles.MembersRolePageQuery) error); ok {
		r1 = returnFunc(ctx, session, entityID, pq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntityMembers'
type MockService_ListEntityMembers_Call struct {
	*mock.Call
}

// ListEntityMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - pq
func (_e *MockService_Expecter) ListEntityMembers(ctx interface{}, session interface{}, entityID interface{}, pq interface{}) *MockService_ListEntityMembers_Call {
	return &MockService_ListEntityMembers_Call{Call: _e.mock.On("ListEntityMembers", ctx, session, entityID, pq)}
}

func (_c *MockService_ListEntityMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, pq roles.MembersRolePageQuery)) *MockService_ListEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(roles.MembersRolePageQuery))
	})
	return _c
}

func (_c *MockService_ListEntityMembers_Call) Return(membersRolePage roles.MembersRolePage, err error) *MockService_ListEntityMembers_Call {
	_c.Call.Return(membersRolePage, err)
	return _c
}

func (_c *MockService_ListEntityMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, pq roles.MembersRolePageQuery) (roles.MembersRolePage, error)) *MockService_ListEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvitations provides a mock function for the type MockService
func (_mock *MockService) ListInvitations(ctx context.Context, session authn.Session, page domains.InvitationPageMeta) (domains.InvitationPage, error) {
	ret := _mock.Called(ctx, session, page)

	if len(ret) == 0 {
		panic("no return value specified for ListInvitations")
	}

	var r0 domains.InvitationPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.InvitationPageMeta) (domains.InvitationPage, error)); ok {
		return returnFunc(ctx, session, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.InvitationPageMeta) domains.InvitationPage); ok {
		r0 = returnFunc(ctx, session, page)
	} else {
		r0 = ret.Get(0).(domains.InvitationPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, domains.InvitationPageMeta) error); ok {
		r1 = returnFunc(ctx, session, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ListInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvitations'
type MockService_ListInvitations_Call struct {
	*mock.Call
}

// ListInvitations is a helper method to define mock.On call
//   - ctx
//   - session
//   - page
func (_e *MockService_Expecter) ListInvitations(ctx interface{}, session interface{}, page interface{}) *MockService_ListInvitations_Call {
	return &MockService_ListInvitations_Call{Call: _e.mock.On("ListInvitations", ctx, session, page)}
}

func (_c *MockService_ListInvitations_Call) Run(run func(ctx context.Context, session authn.Session, page domains.InvitationPageMeta)) *MockService_ListInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(domains.InvitationPageMeta))
	})
	return _c
}

func (_c *MockService_ListInvitations_Call) Return(invitations domains.InvitationPage, err error) *MockService_ListInvitations_Call {
	_c.Call.Return(invitations, err)
	return _c
}

func (_c *MockService_ListInvitations_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, page domains.InvitationPageMeta) (domains.InvitationPage, error)) *MockService_ListInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// RejectInvitation provides a mock function for the type MockService
func (_mock *MockService) RejectInvitation(ctx context.Context, session authn.Session, domainID string) error {
	ret := _mock.Called(ctx, session, domainID)

	if len(ret) == 0 {
		panic("no return value specified for RejectInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = returnFunc(ctx, session, domainID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RejectInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectInvitation'
type MockService_RejectInvitation_Call struct {
	*mock.Call
}

// RejectInvitation is a helper method to define mock.On call
//   - ctx
//   - session
//   - domainID
func (_e *MockService_Expecter) RejectInvitation(ctx interface{}, session interface{}, domainID interface{}) *MockService_RejectInvitation_Call {
	return &MockService_RejectInvitation_Call{Call: _e.mock.On("RejectInvitation", ctx, session, domainID)}
}

func (_c *MockService_RejectInvitation_Call) Run(run func(ctx context.Context, session authn.Session, domainID string)) *MockService_RejectInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_RejectInvitation_Call) Return(err error) *MockService_RejectInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RejectInvitation_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, domainID string) error) *MockService_RejectInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEntityMembers provides a mock function for the type MockService
func (_mock *MockService) RemoveEntityMembers(ctx context.Context, session authn.Session, entityID string, members []string) error {
	ret := _mock.Called(ctx, session, entityID, members)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEntityMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, []string) error); ok {
		r0 = returnFunc(ctx, session, entityID, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveEntityMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEntityMembers'
type MockService_RemoveEntityMembers_Call struct {
	*mock.Call
}

// RemoveEntityMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - members
func (_e *MockService_Expecter) RemoveEntityMembers(ctx interface{}, session interface{}, entityID interface{}, members interface{}) *MockService_RemoveEntityMembers_Call {
	return &MockService_RemoveEntityMembers_Call{Call: _e.mock.On("RemoveEntityMembers", ctx, session, entityID, members)}
}

func (_c *MockService_RemoveEntityMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, members []string)) *MockService_RemoveEntityMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockService_RemoveEntityMembers_Call) Return(err error) *MockService_RemoveEntityMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveEntityMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, members []string) error) *MockService_RemoveEntityMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMemberFromAllRoles provides a mock function for the type MockService
func (_mock *MockService) RemoveMemberFromAllRoles(ctx context.Context, session authn.Session, memberID string) error {
	ret := _mock.Called(ctx, session, memberID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMemberFromAllRoles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = returnFunc(ctx, session, memberID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveMemberFromAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMemberFromAllRoles'
type MockService_RemoveMemberFromAllRoles_Call struct {
	*mock.Call
}

// RemoveMemberFromAllRoles is a helper method to define mock.On call
//   - ctx
//   - session
//   - memberID
func (_e *MockService_Expecter) RemoveMemberFromAllRoles(ctx interface{}, session interface{}, memberID interface{}) *MockService_RemoveMemberFromAllRoles_Call {
	return &MockService_RemoveMemberFromAllRoles_Call{Call: _e.mock.On("RemoveMemberFromAllRoles", ctx, session, memberID)}
}

func (_c *MockService_RemoveMemberFromAllRoles_Call) Run(run func(ctx context.Context, session authn.Session, memberID string)) *MockService_RemoveMemberFromAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string))
	})
	return _c
}

func (_c *MockService_RemoveMemberFromAllRoles_Call) Return(err error) *MockService_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveMemberFromAllRoles_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, memberID string) error) *MockService_RemoveMemberFromAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRole provides a mock function for the type MockService
func (_mock *MockService) RemoveRole(ctx context.Context, session authn.Session, entityID string, roleID string) error {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RemoveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRole'
type MockService_RemoveRole_Call struct {
	*mock.Call
}

// RemoveRole is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RemoveRole(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RemoveRole_Call {
	return &MockService_RemoveRole_Call{Call: _e.mock.On("RemoveRole", ctx, session, entityID, roleID)}
}

func (_c *MockService_RemoveRole_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RemoveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RemoveRole_Call) Return(err error) *MockService_RemoveRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RemoveRole_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) error) *MockService_RemoveRole_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAllRoles provides a mock function for the type MockService
func (_mock *MockService) RetrieveAllRoles(ctx context.Context, session authn.Session, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _mock.Called(ctx, session, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllRoles")
	}

	var r0 roles.RolePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, uint64, uint64) (roles.RolePage, error)); ok {
		return returnFunc(ctx, session, entityID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, uint64, uint64) roles.RolePage); ok {
		r0 = returnFunc(ctx, session, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, session, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAllRoles'
type MockService_RetrieveAllRoles_Call struct {
	*mock.Call
}

// RetrieveAllRoles is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - limit
//   - offset
func (_e *MockService_Expecter) RetrieveAllRoles(ctx interface{}, session interface{}, entityID interface{}, limit interface{}, offset interface{}) *MockService_RetrieveAllRoles_Call {
	return &MockService_RetrieveAllRoles_Call{Call: _e.mock.On("RetrieveAllRoles", ctx, session, entityID, limit, offset)}
}

func (_c *MockService_RetrieveAllRoles_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, limit uint64, offset uint64)) *MockService_RetrieveAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(uint64), args[4].(uint64))
	})
	return _c
}

func (_c *MockService_RetrieveAllRoles_Call) Return(rolePage roles.RolePage, err error) *MockService_RetrieveAllRoles_Call {
	_c.Call.Return(rolePage, err)
	return _c
}

func (_c *MockService_RetrieveAllRoles_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, limit uint64, offset uint64) (roles.RolePage, error)) *MockService_RetrieveAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveDomain provides a mock function for the type MockService
func (_mock *MockService) RetrieveDomain(ctx context.Context, sesssion authn.Session, id string, withRoles bool) (domains.Domain, error) {
	ret := _mock.Called(ctx, sesssion, id, withRoles)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveDomain")
	}

	var r0 domains.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, bool) (domains.Domain, error)); ok {
		return returnFunc(ctx, sesssion, id, withRoles)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, bool) domains.Domain); ok {
		r0 = returnFunc(ctx, sesssion, id, withRoles)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, bool) error); ok {
		r1 = returnFunc(ctx, sesssion, id, withRoles)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveDomain'
type MockService_RetrieveDomain_Call struct {
	*mock.Call
}

// RetrieveDomain is a helper method to define mock.On call
//   - ctx
//   - sesssion
//   - id
//   - withRoles
func (_e *MockService_Expecter) RetrieveDomain(ctx interface{}, sesssion interface{}, id interface{}, withRoles interface{}) *MockService_RetrieveDomain_Call {
	return &MockService_RetrieveDomain_Call{Call: _e.mock.On("RetrieveDomain", ctx, sesssion, id, withRoles)}
}

func (_c *MockService_RetrieveDomain_Call) Run(run func(ctx context.Context, sesssion authn.Session, id string, withRoles bool)) *MockService_RetrieveDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockService_RetrieveDomain_Call) Return(domain domains.Domain, err error) *MockService_RetrieveDomain_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockService_RetrieveDomain_Call) RunAndReturn(run func(ctx context.Context, sesssion authn.Session, id string, withRoles bool) (domains.Domain, error)) *MockService_RetrieveDomain_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveRole provides a mock function for the type MockService
func (_mock *MockService) RetrieveRole(ctx context.Context, session authn.Session, entityID string, roleID string) (roles.Role, error) {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRole")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (roles.Role, error)); ok {
		return returnFunc(ctx, session, entityID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) roles.Role); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveRole'
type MockService_RetrieveRole_Call struct {
	*mock.Call
}

// RetrieveRole is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RetrieveRole(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RetrieveRole_Call {
	return &MockService_RetrieveRole_Call{Call: _e.mock.On("RetrieveRole", ctx, session, entityID, roleID)}
}

func (_c *MockService_RetrieveRole_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RetrieveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RetrieveRole_Call) Return(role roles.Role, err error) *MockService_RetrieveRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockService_RetrieveRole_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) (roles.Role, error)) *MockService_RetrieveRole_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddActions provides a mock function for the type MockService
func (_mock *MockService) RoleAddActions(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) ([]string, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) ([]string, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) []string); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleAddActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddActions'
type MockService_RoleAddActions_Call struct {
	*mock.Call
}

// RoleAddActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - actions
func (_e *MockService_Expecter) RoleAddActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, actions interface{}) *MockService_RoleAddActions_Call {
	return &MockService_RoleAddActions_Call{Call: _e.mock.On("RoleAddActions", ctx, session, entityID, roleID, actions)}
}

func (_c *MockService_RoleAddActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string)) *MockService_RoleAddActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleAddActions_Call) Return(ops []string, err error) *MockService_RoleAddActions_Call {
	_c.Call.Return(ops, err)
	return _c
}

func (_c *MockService_RoleAddActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) ([]string, error)) *MockService_RoleAddActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleAddMembers provides a mock function for the type MockService
func (_mock *MockService) RoleAddMembers(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) ([]string, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddMembers")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) ([]string, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) []string); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleAddMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleAddMembers'
type MockService_RoleAddMembers_Call struct {
	*mock.Call
}

// RoleAddMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - members
func (_e *MockService_Expecter) RoleAddMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, members interface{}) *MockService_RoleAddMembers_Call {
	return &MockService_RoleAddMembers_Call{Call: _e.mock.On("RoleAddMembers", ctx, session, entityID, roleID, members)}
}

func (_c *MockService_RoleAddMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string)) *MockService_RoleAddMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleAddMembers_Call) Return(strings []string, err error) *MockService_RoleAddMembers_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockService_RoleAddMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) ([]string, error)) *MockService_RoleAddMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckActionsExists provides a mock function for the type MockService
func (_mock *MockService) RoleCheckActionsExists(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) (bool, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckActionsExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) (bool, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, actions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) bool); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleCheckActionsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckActionsExists'
type MockService_RoleCheckActionsExists_Call struct {
	*mock.Call
}

// RoleCheckActionsExists is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - actions
func (_e *MockService_Expecter) RoleCheckActionsExists(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, actions interface{}) *MockService_RoleCheckActionsExists_Call {
	return &MockService_RoleCheckActionsExists_Call{Call: _e.mock.On("RoleCheckActionsExists", ctx, session, entityID, roleID, actions)}
}

func (_c *MockService_RoleCheckActionsExists_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string)) *MockService_RoleCheckActionsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleCheckActionsExists_Call) Return(b bool, err error) *MockService_RoleCheckActionsExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockService_RoleCheckActionsExists_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) (bool, error)) *MockService_RoleCheckActionsExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleCheckMembersExists provides a mock function for the type MockService
func (_mock *MockService) RoleCheckMembersExists(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) (bool, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckMembersExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) (bool, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, members)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) bool); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleCheckMembersExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleCheckMembersExists'
type MockService_RoleCheckMembersExists_Call struct {
	*mock.Call
}

// RoleCheckMembersExists is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - members
func (_e *MockService_Expecter) RoleCheckMembersExists(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, members interface{}) *MockService_RoleCheckMembersExists_Call {
	return &MockService_RoleCheckMembersExists_Call{Call: _e.mock.On("RoleCheckMembersExists", ctx, session, entityID, roleID, members)}
}

func (_c *MockService_RoleCheckMembersExists_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string)) *MockService_RoleCheckMembersExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleCheckMembersExists_Call) Return(b bool, err error) *MockService_RoleCheckMembersExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockService_RoleCheckMembersExists_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) (bool, error)) *MockService_RoleCheckMembersExists_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListActions provides a mock function for the type MockService
func (_mock *MockService) RoleListActions(ctx context.Context, session authn.Session, entityID string, roleID string) ([]string, error) {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleListActions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) ([]string, error)); ok {
		return returnFunc(ctx, session, entityID, roleID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) []string); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListActions'
type MockService_RoleListActions_Call struct {
	*mock.Call
}

// RoleListActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RoleListActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RoleListActions_Call {
	return &MockService_RoleListActions_Call{Call: _e.mock.On("RoleListActions", ctx, session, entityID, roleID)}
}

func (_c *MockService_RoleListActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RoleListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RoleListActions_Call) Return(strings []string, err error) *MockService_RoleListActions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockService_RoleListActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) ([]string, error)) *MockService_RoleListActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleListMembers provides a mock function for the type MockService
func (_mock *MockService) RoleListMembers(ctx context.Context, session authn.Session, entityID string, roleID string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RoleListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, uint64, uint64) roles.MembersPage); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, uint64, uint64) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RoleListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleListMembers'
type MockService_RoleListMembers_Call struct {
	*mock.Call
}

// RoleListMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - limit
//   - offset
func (_e *MockService_Expecter) RoleListMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, limit interface{}, offset interface{}) *MockService_RoleListMembers_Call {
	return &MockService_RoleListMembers_Call{Call: _e.mock.On("RoleListMembers", ctx, session, entityID, roleID, limit, offset)}
}

func (_c *MockService_RoleListMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, limit uint64, offset uint64)) *MockService_RoleListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].(uint64), args[5].(uint64))
	})
	return _c
}

func (_c *MockService_RoleListMembers_Call) Return(membersPage roles.MembersPage, err error) *MockService_RoleListMembers_Call {
	_c.Call.Return(membersPage, err)
	return _c
}

func (_c *MockService_RoleListMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, limit uint64, offset uint64) (roles.MembersPage, error)) *MockService_RoleListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveActions provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveActions(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) error {
	ret := _mock.Called(ctx, session, entityID, roleID, actions)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, actions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveActions'
type MockService_RoleRemoveActions_Call struct {
	*mock.Call
}

// RoleRemoveActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - actions
func (_e *MockService_Expecter) RoleRemoveActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, actions interface{}) *MockService_RoleRemoveActions_Call {
	return &MockService_RoleRemoveActions_Call{Call: _e.mock.On("RoleRemoveActions", ctx, session, entityID, roleID, actions)}
}

func (_c *MockService_RoleRemoveActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string)) *MockService_RoleRemoveActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleRemoveActions_Call) Return(err error) *MockService_RoleRemoveActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, actions []string) error) *MockService_RoleRemoveActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllActions provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveAllActions(ctx context.Context, session authn.Session, entityID string, roleID string) error {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllActions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveAllActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllActions'
type MockService_RoleRemoveAllActions_Call struct {
	*mock.Call
}

// RoleRemoveAllActions is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RoleRemoveAllActions(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RoleRemoveAllActions_Call {
	return &MockService_RoleRemoveAllActions_Call{Call: _e.mock.On("RoleRemoveAllActions", ctx, session, entityID, roleID)}
}

func (_c *MockService_RoleRemoveAllActions_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RoleRemoveAllActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RoleRemoveAllActions_Call) Return(err error) *MockService_RoleRemoveAllActions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveAllActions_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) error) *MockService_RoleRemoveAllActions_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveAllMembers provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveAllMembers(ctx context.Context, session authn.Session, entityID string, roleID string) error {
	ret := _mock.Called(ctx, session, entityID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveAllMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveAllMembers'
type MockService_RoleRemoveAllMembers_Call struct {
	*mock.Call
}

// RoleRemoveAllMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
func (_e *MockService_Expecter) RoleRemoveAllMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}) *MockService_RoleRemoveAllMembers_Call {
	return &MockService_RoleRemoveAllMembers_Call{Call: _e.mock.On("RoleRemoveAllMembers", ctx, session, entityID, roleID)}
}

func (_c *MockService_RoleRemoveAllMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string)) *MockService_RoleRemoveAllMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_RoleRemoveAllMembers_Call) Return(err error) *MockService_RoleRemoveAllMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveAllMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string) error) *MockService_RoleRemoveAllMembers_Call {
	_c.Call.Return(run)
	return _c
}

// RoleRemoveMembers provides a mock function for the type MockService
func (_mock *MockService) RoleRemoveMembers(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) error {
	ret := _mock.Called(ctx, session, entityID, roleID, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveMembers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, []string) error); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, members)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RoleRemoveMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleRemoveMembers'
type MockService_RoleRemoveMembers_Call struct {
	*mock.Call
}

// RoleRemoveMembers is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - members
func (_e *MockService_Expecter) RoleRemoveMembers(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, members interface{}) *MockService_RoleRemoveMembers_Call {
	return &MockService_RoleRemoveMembers_Call{Call: _e.mock.On("RoleRemoveMembers", ctx, session, entityID, roleID, members)}
}

func (_c *MockService_RoleRemoveMembers_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string)) *MockService_RoleRemoveMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockService_RoleRemoveMembers_Call) Return(err error) *MockService_RoleRemoveMembers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RoleRemoveMembers_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, members []string) error) *MockService_RoleRemoveMembers_Call {
	_c.Call.Return(run)
	return _c
}

// SendInvitation provides a mock function for the type MockService
func (_mock *MockService) SendInvitation(ctx context.Context, session authn.Session, invitation domains.Invitation) error {
	ret := _mock.Called(ctx, session, invitation)

	if len(ret) == 0 {
		panic("no return value specified for SendInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, domains.Invitation) error); ok {
		r0 = returnFunc(ctx, session, invitation)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_SendInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInvitation'
type MockService_SendInvitation_Call struct {
	*mock.Call
}

// SendInvitation is a helper method to define mock.On call
//   - ctx
//   - session
//   - invitation
func (_e *MockService_Expecter) SendInvitation(ctx interface{}, session interface{}, invitation interface{}) *MockService_SendInvitation_Call {
	return &MockService_SendInvitation_Call{Call: _e.mock.On("SendInvitation", ctx, session, invitation)}
}

func (_c *MockService_SendInvitation_Call) Run(run func(ctx context.Context, session authn.Session, invitation domains.Invitation)) *MockService_SendInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(domains.Invitation))
	})
	return _c
}

func (_c *MockService_SendInvitation_Call) Return(err error) *MockService_SendInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_SendInvitation_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, invitation domains.Invitation) error) *MockService_SendInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDomain provides a mock function for the type MockService
func (_mock *MockService) UpdateDomain(ctx context.Context, sesssion authn.Session, id string, d domains.DomainReq) (domains.Domain, error) {
	ret := _mock.Called(ctx, sesssion, id, d)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 domains.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, domains.DomainReq) (domains.Domain, error)); ok {
		return returnFunc(ctx, sesssion, id, d)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, domains.DomainReq) domains.Domain); ok {
		r0 = returnFunc(ctx, sesssion, id, d)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, domains.DomainReq) error); ok {
		r1 = returnFunc(ctx, sesssion, id, d)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDomain'
type MockService_UpdateDomain_Call struct {
	*mock.Call
}

// UpdateDomain is a helper method to define mock.On call
//   - ctx
//   - sesssion
//   - id
//   - d
func (_e *MockService_Expecter) UpdateDomain(ctx interface{}, sesssion interface{}, id interface{}, d interface{}) *MockService_UpdateDomain_Call {
	return &MockService_UpdateDomain_Call{Call: _e.mock.On("UpdateDomain", ctx, sesssion, id, d)}
}

func (_c *MockService_UpdateDomain_Call) Run(run func(ctx context.Context, sesssion authn.Session, id string, d domains.DomainReq)) *MockService_UpdateDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(domains.DomainReq))
	})
	return _c
}

func (_c *MockService_UpdateDomain_Call) Return(domain domains.Domain, err error) *MockService_UpdateDomain_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockService_UpdateDomain_Call) RunAndReturn(run func(ctx context.Context, sesssion authn.Session, id string, d domains.DomainReq) (domains.Domain, error)) *MockService_UpdateDomain_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleName provides a mock function for the type MockService
func (_mock *MockService) UpdateRoleName(ctx context.Context, session authn.Session, entityID string, roleID string, newRoleName string) (roles.Role, error) {
	ret := _mock.Called(ctx, session, entityID, roleID, newRoleName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleName")
	}

	var r0 roles.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, string) (roles.Role, error)); ok {
		return returnFunc(ctx, session, entityID, roleID, newRoleName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, string) roles.Role); ok {
		r0 = returnFunc(ctx, session, entityID, roleID, newRoleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, string) error); ok {
		r1 = returnFunc(ctx, session, entityID, roleID, newRoleName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateRoleName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleName'
type MockService_UpdateRoleName_Call struct {
	*mock.Call
}

// UpdateRoleName is a helper method to define mock.On call
//   - ctx
//   - session
//   - entityID
//   - roleID
//   - newRoleName
func (_e *MockService_Expecter) UpdateRoleName(ctx interface{}, session interface{}, entityID interface{}, roleID interface{}, newRoleName interface{}) *MockService_UpdateRoleName_Call {
	return &MockService_UpdateRoleName_Call{Call: _e.mock.On("UpdateRoleName", ctx, session, entityID, roleID, newRoleName)}
}

func (_c *MockService_UpdateRoleName_Call) Run(run func(ctx context.Context, session authn.Session, entityID string, roleID string, newRoleName string)) *MockService_UpdateRoleName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_UpdateRoleName_Call) Return(role roles.Role, err error) *MockService_UpdateRoleName_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockService_UpdateRoleName_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, entityID string, roleID string, newRoleName string) (roles.Role, error)) *MockService_UpdateRoleName_Call {
	_c.Call.Return(run)
	return _c
}

// ViewInvitation provides a mock function for the type MockService
func (_mock *MockService) ViewInvitation(ctx context.Context, session authn.Session, inviteeUserID string, domainID string) (domains.Invitation, error) {
	ret := _mock.Called(ctx, session, inviteeUserID, domainID)

	if len(ret) == 0 {
		panic("no return value specified for ViewInvitation")
	}

	var r0 domains.Invitation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (domains.Invitation, error)); ok {
		return returnFunc(ctx, session, inviteeUserID, domainID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) domains.Invitation); ok {
		r0 = returnFunc(ctx, session, inviteeUserID, domainID)
	} else {
		r0 = ret.Get(0).(domains.Invitation)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = returnFunc(ctx, session, inviteeUserID, domainID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ViewInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewInvitation'
type MockService_ViewInvitation_Call struct {
	*mock.Call
}

// ViewInvitation is a helper method to define mock.On call
//   - ctx
//   - session
//   - inviteeUserID
//   - domainID
func (_e *MockService_Expecter) ViewInvitation(ctx interface{}, session interface{}, inviteeUserID interface{}, domainID interface{}) *MockService_ViewInvitation_Call {
	return &MockService_ViewInvitation_Call{Call: _e.mock.On("ViewInvitation", ctx, session, inviteeUserID, domainID)}
}

func (_c *MockService_ViewInvitation_Call) Run(run func(ctx context.Context, session authn.Session, inviteeUserID string, domainID string)) *MockService_ViewInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(authn.Session), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_ViewInvitation_Call) Return(invitation domains.Invitation, err error) *MockService_ViewInvitation_Call {
	_c.Call.Return(invitation, err)
	return _c
}

func (_c *MockService_ViewInvitation_Call) RunAndReturn(run func(ctx context.Context, session authn.Session, inviteeUserID string, domainID string) (domains.Invitation, error)) *MockService_ViewInvitation_Call {
	_c.Call.Return(run)
	return _c
}
