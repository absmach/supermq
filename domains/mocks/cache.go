// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/domains"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type MockCache
func (_mock *MockCache) ID(ctx context.Context, route string) (string, error) {
	ret := _mock.Called(ctx, route)

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, route)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, route)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, route)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockCache_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
//   - ctx
//   - route
func (_e *MockCache_Expecter) ID(ctx interface{}, route interface{}) *MockCache_ID_Call {
	return &MockCache_ID_Call{Call: _e.mock.On("ID", ctx, route)}
}

func (_c *MockCache_ID_Call) Run(run func(ctx context.Context, route string)) *MockCache_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCache_ID_Call) Return(s string, err error) *MockCache_ID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCache_ID_Call) RunAndReturn(run func(ctx context.Context, route string) (string, error)) *MockCache_ID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveID provides a mock function for the type MockCache
func (_mock *MockCache) RemoveID(ctx context.Context, route string) error {
	ret := _mock.Called(ctx, route)

	if len(ret) == 0 {
		panic("no return value specified for RemoveID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, route)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_RemoveID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveID'
type MockCache_RemoveID_Call struct {
	*mock.Call
}

// RemoveID is a helper method to define mock.On call
//   - ctx
//   - route
func (_e *MockCache_Expecter) RemoveID(ctx interface{}, route interface{}) *MockCache_RemoveID_Call {
	return &MockCache_RemoveID_Call{Call: _e.mock.On("RemoveID", ctx, route)}
}

func (_c *MockCache_RemoveID_Call) Run(run func(ctx context.Context, route string)) *MockCache_RemoveID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCache_RemoveID_Call) Return(err error) *MockCache_RemoveID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_RemoveID_Call) RunAndReturn(run func(ctx context.Context, route string) error) *MockCache_RemoveID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveStatus provides a mock function for the type MockCache
func (_mock *MockCache) RemoveStatus(ctx context.Context, domainID string) error {
	ret := _mock.Called(ctx, domainID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, domainID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_RemoveStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveStatus'
type MockCache_RemoveStatus_Call struct {
	*mock.Call
}

// RemoveStatus is a helper method to define mock.On call
//   - ctx
//   - domainID
func (_e *MockCache_Expecter) RemoveStatus(ctx interface{}, domainID interface{}) *MockCache_RemoveStatus_Call {
	return &MockCache_RemoveStatus_Call{Call: _e.mock.On("RemoveStatus", ctx, domainID)}
}

func (_c *MockCache_RemoveStatus_Call) Run(run func(ctx context.Context, domainID string)) *MockCache_RemoveStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCache_RemoveStatus_Call) Return(err error) *MockCache_RemoveStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_RemoveStatus_Call) RunAndReturn(run func(ctx context.Context, domainID string) error) *MockCache_RemoveStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SaveID provides a mock function for the type MockCache
func (_mock *MockCache) SaveID(ctx context.Context, route string, domainID string) error {
	ret := _mock.Called(ctx, route, domainID)

	if len(ret) == 0 {
		panic("no return value specified for SaveID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, route, domainID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SaveID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveID'
type MockCache_SaveID_Call struct {
	*mock.Call
}

// SaveID is a helper method to define mock.On call
//   - ctx
//   - route
//   - domainID
func (_e *MockCache_Expecter) SaveID(ctx interface{}, route interface{}, domainID interface{}) *MockCache_SaveID_Call {
	return &MockCache_SaveID_Call{Call: _e.mock.On("SaveID", ctx, route, domainID)}
}

func (_c *MockCache_SaveID_Call) Run(run func(ctx context.Context, route string, domainID string)) *MockCache_SaveID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCache_SaveID_Call) Return(err error) *MockCache_SaveID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SaveID_Call) RunAndReturn(run func(ctx context.Context, route string, domainID string) error) *MockCache_SaveID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveStatus provides a mock function for the type MockCache
func (_mock *MockCache) SaveStatus(ctx context.Context, domainID string, status domains.Status) error {
	ret := _mock.Called(ctx, domainID, status)

	if len(ret) == 0 {
		panic("no return value specified for SaveStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domains.Status) error); ok {
		r0 = returnFunc(ctx, domainID, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SaveStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveStatus'
type MockCache_SaveStatus_Call struct {
	*mock.Call
}

// SaveStatus is a helper method to define mock.On call
//   - ctx
//   - domainID
//   - status
func (_e *MockCache_Expecter) SaveStatus(ctx interface{}, domainID interface{}, status interface{}) *MockCache_SaveStatus_Call {
	return &MockCache_SaveStatus_Call{Call: _e.mock.On("SaveStatus", ctx, domainID, status)}
}

func (_c *MockCache_SaveStatus_Call) Run(run func(ctx context.Context, domainID string, status domains.Status)) *MockCache_SaveStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domains.Status))
	})
	return _c
}

func (_c *MockCache_SaveStatus_Call) Return(err error) *MockCache_SaveStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SaveStatus_Call) RunAndReturn(run func(ctx context.Context, domainID string, status domains.Status) error) *MockCache_SaveStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockCache
func (_mock *MockCache) Status(ctx context.Context, domainID string) (domains.Status, error) {
	ret := _mock.Called(ctx, domainID)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 domains.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domains.Status, error)); ok {
		return returnFunc(ctx, domainID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domains.Status); ok {
		r0 = returnFunc(ctx, domainID)
	} else {
		r0 = ret.Get(0).(domains.Status)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, domainID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockCache_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx
//   - domainID
func (_e *MockCache_Expecter) Status(ctx interface{}, domainID interface{}) *MockCache_Status_Call {
	return &MockCache_Status_Call{Call: _e.mock.On("Status", ctx, domainID)}
}

func (_c *MockCache_Status_Call) Run(run func(ctx context.Context, domainID string)) *MockCache_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCache_Status_Call) Return(status domains.Status, err error) *MockCache_Status_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockCache_Status_Call) RunAndReturn(run func(ctx context.Context, domainID string) (domains.Status, error)) *MockCache_Status_Call {
	_c.Call.Return(run)
	return _c
}
