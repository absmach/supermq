// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/domains"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// DeleteUserFromDomains provides a mock function for the type MockService
func (_mock *MockService) DeleteUserFromDomains(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserFromDomains")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteUserFromDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserFromDomains'
type MockService_DeleteUserFromDomains_Call struct {
	*mock.Call
}

// DeleteUserFromDomains is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockService_Expecter) DeleteUserFromDomains(ctx interface{}, id interface{}) *MockService_DeleteUserFromDomains_Call {
	return &MockService_DeleteUserFromDomains_Call{Call: _e.mock.On("DeleteUserFromDomains", ctx, id)}
}

func (_c *MockService_DeleteUserFromDomains_Call) Run(run func(ctx context.Context, id string)) *MockService_DeleteUserFromDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_DeleteUserFromDomains_Call) Return(err error) *MockService_DeleteUserFromDomains_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteUserFromDomains_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockService_DeleteUserFromDomains_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByRoute provides a mock function for the type MockService
func (_mock *MockService) RetrieveByRoute(ctx context.Context, route string) (domains.Domain, error) {
	ret := _mock.Called(ctx, route)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByRoute")
	}

	var r0 domains.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domains.Domain, error)); ok {
		return returnFunc(ctx, route)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domains.Domain); ok {
		r0 = returnFunc(ctx, route)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, route)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveByRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByRoute'
type MockService_RetrieveByRoute_Call struct {
	*mock.Call
}

// RetrieveByRoute is a helper method to define mock.On call
//   - ctx
//   - route
func (_e *MockService_Expecter) RetrieveByRoute(ctx interface{}, route interface{}) *MockService_RetrieveByRoute_Call {
	return &MockService_RetrieveByRoute_Call{Call: _e.mock.On("RetrieveByRoute", ctx, route)}
}

func (_c *MockService_RetrieveByRoute_Call) Run(run func(ctx context.Context, route string)) *MockService_RetrieveByRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_RetrieveByRoute_Call) Return(domain domains.Domain, err error) *MockService_RetrieveByRoute_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockService_RetrieveByRoute_Call) RunAndReturn(run func(ctx context.Context, route string) (domains.Domain, error)) *MockService_RetrieveByRoute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveEntity provides a mock function for the type MockService
func (_mock *MockService) RetrieveEntity(ctx context.Context, id string) (domains.Domain, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEntity")
	}

	var r0 domains.Domain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domains.Domain, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domains.Domain); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RetrieveEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveEntity'
type MockService_RetrieveEntity_Call struct {
	*mock.Call
}

// RetrieveEntity is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockService_Expecter) RetrieveEntity(ctx interface{}, id interface{}) *MockService_RetrieveEntity_Call {
	return &MockService_RetrieveEntity_Call{Call: _e.mock.On("RetrieveEntity", ctx, id)}
}

func (_c *MockService_RetrieveEntity_Call) Run(run func(ctx context.Context, id string)) *MockService_RetrieveEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_RetrieveEntity_Call) Return(domain domains.Domain, err error) *MockService_RetrieveEntity_Call {
	_c.Call.Return(domain, err)
	return _c
}

func (_c *MockService_RetrieveEntity_Call) RunAndReturn(run func(ctx context.Context, id string) (domains.Domain, error)) *MockService_RetrieveEntity_Call {
	_c.Call.Return(run)
	return _c
}
