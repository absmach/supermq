// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	readers "github.com/absmach/supermq/readers"
	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

type MessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageRepository) EXPECT() *MessageRepository_Expecter {
	return &MessageRepository_Expecter{mock: &_m.Mock}
}

// ReadAll provides a mock function with given fields: chanID, pm
func (_m *MessageRepository) ReadAll(chanID string, pm readers.PageMetadata) (readers.MessagesPage, error) {
	ret := _m.Called(chanID, pm)

	if len(ret) == 0 {
		panic("no return value specified for ReadAll")
	}

	var r0 readers.MessagesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, readers.PageMetadata) (readers.MessagesPage, error)); ok {
		return rf(chanID, pm)
	}
	if rf, ok := ret.Get(0).(func(string, readers.PageMetadata) readers.MessagesPage); ok {
		r0 = rf(chanID, pm)
	} else {
		r0 = ret.Get(0).(readers.MessagesPage)
	}

	if rf, ok := ret.Get(1).(func(string, readers.PageMetadata) error); ok {
		r1 = rf(chanID, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepository_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type MessageRepository_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
//   - chanID string
//   - pm readers.PageMetadata
func (_e *MessageRepository_Expecter) ReadAll(chanID interface{}, pm interface{}) *MessageRepository_ReadAll_Call {
	return &MessageRepository_ReadAll_Call{Call: _e.mock.On("ReadAll", chanID, pm)}
}

func (_c *MessageRepository_ReadAll_Call) Run(run func(chanID string, pm readers.PageMetadata)) *MessageRepository_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(readers.PageMetadata))
	})
	return _c
}

func (_c *MessageRepository_ReadAll_Call) Return(_a0 readers.MessagesPage, _a1 error) *MessageRepository_ReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageRepository_ReadAll_Call) RunAndReturn(run func(string, readers.PageMetadata) (readers.MessagesPage, error)) *MessageRepository_ReadAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
