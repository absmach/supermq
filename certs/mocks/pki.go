// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"github.com/absmach/certs/sdk"
	"github.com/absmach/supermq/certs/pki/amcerts"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAgent creates a new instance of MockAgent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgent {
	mock := &MockAgent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAgent is an autogenerated mock type for the Agent type
type MockAgent struct {
	mock.Mock
}

type MockAgent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgent) EXPECT() *MockAgent_Expecter {
	return &MockAgent_Expecter{mock: &_m.Mock}
}

// Issue provides a mock function for the type MockAgent
func (_mock *MockAgent) Issue(entityId string, ttl string, ipAddrs []string) (amcerts.Cert, error) {
	ret := _mock.Called(entityId, ttl, ipAddrs)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 amcerts.Cert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, []string) (amcerts.Cert, error)); ok {
		return returnFunc(entityId, ttl, ipAddrs)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, []string) amcerts.Cert); ok {
		r0 = returnFunc(entityId, ttl, ipAddrs)
	} else {
		r0 = ret.Get(0).(amcerts.Cert)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = returnFunc(entityId, ttl, ipAddrs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgent_Issue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issue'
type MockAgent_Issue_Call struct {
	*mock.Call
}

// Issue is a helper method to define mock.On call
//   - entityId
//   - ttl
//   - ipAddrs
func (_e *MockAgent_Expecter) Issue(entityId interface{}, ttl interface{}, ipAddrs interface{}) *MockAgent_Issue_Call {
	return &MockAgent_Issue_Call{Call: _e.mock.On("Issue", entityId, ttl, ipAddrs)}
}

func (_c *MockAgent_Issue_Call) Run(run func(entityId string, ttl string, ipAddrs []string)) *MockAgent_Issue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockAgent_Issue_Call) Return(cert amcerts.Cert, err error) *MockAgent_Issue_Call {
	_c.Call.Return(cert, err)
	return _c
}

func (_c *MockAgent_Issue_Call) RunAndReturn(run func(entityId string, ttl string, ipAddrs []string) (amcerts.Cert, error)) *MockAgent_Issue_Call {
	_c.Call.Return(run)
	return _c
}

// ListCerts provides a mock function for the type MockAgent
func (_mock *MockAgent) ListCerts(pm sdk.PageMetadata) (amcerts.CertPage, error) {
	ret := _mock.Called(pm)

	if len(ret) == 0 {
		panic("no return value specified for ListCerts")
	}

	var r0 amcerts.CertPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(sdk.PageMetadata) (amcerts.CertPage, error)); ok {
		return returnFunc(pm)
	}
	if returnFunc, ok := ret.Get(0).(func(sdk.PageMetadata) amcerts.CertPage); ok {
		r0 = returnFunc(pm)
	} else {
		r0 = ret.Get(0).(amcerts.CertPage)
	}
	if returnFunc, ok := ret.Get(1).(func(sdk.PageMetadata) error); ok {
		r1 = returnFunc(pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgent_ListCerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCerts'
type MockAgent_ListCerts_Call struct {
	*mock.Call
}

// ListCerts is a helper method to define mock.On call
//   - pm
func (_e *MockAgent_Expecter) ListCerts(pm interface{}) *MockAgent_ListCerts_Call {
	return &MockAgent_ListCerts_Call{Call: _e.mock.On("ListCerts", pm)}
}

func (_c *MockAgent_ListCerts_Call) Run(run func(pm sdk.PageMetadata)) *MockAgent_ListCerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sdk.PageMetadata))
	})
	return _c
}

func (_c *MockAgent_ListCerts_Call) Return(certPage amcerts.CertPage, err error) *MockAgent_ListCerts_Call {
	_c.Call.Return(certPage, err)
	return _c
}

func (_c *MockAgent_ListCerts_Call) RunAndReturn(run func(pm sdk.PageMetadata) (amcerts.CertPage, error)) *MockAgent_ListCerts_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function for the type MockAgent
func (_mock *MockAgent) Revoke(serialNumber string) error {
	ret := _mock.Called(serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(serialNumber)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAgent_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type MockAgent_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - serialNumber
func (_e *MockAgent_Expecter) Revoke(serialNumber interface{}) *MockAgent_Revoke_Call {
	return &MockAgent_Revoke_Call{Call: _e.mock.On("Revoke", serialNumber)}
}

func (_c *MockAgent_Revoke_Call) Run(run func(serialNumber string)) *MockAgent_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAgent_Revoke_Call) Return(err error) *MockAgent_Revoke_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAgent_Revoke_Call) RunAndReturn(run func(serialNumber string) error) *MockAgent_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function for the type MockAgent
func (_mock *MockAgent) View(serialNumber string) (amcerts.Cert, error) {
	ret := _mock.Called(serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 amcerts.Cert
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (amcerts.Cert, error)); ok {
		return returnFunc(serialNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(string) amcerts.Cert); ok {
		r0 = returnFunc(serialNumber)
	} else {
		r0 = ret.Get(0).(amcerts.Cert)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(serialNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgent_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockAgent_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
//   - serialNumber
func (_e *MockAgent_Expecter) View(serialNumber interface{}) *MockAgent_View_Call {
	return &MockAgent_View_Call{Call: _e.mock.On("View", serialNumber)}
}

func (_c *MockAgent_View_Call) Run(run func(serialNumber string)) *MockAgent_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAgent_View_Call) Return(cert amcerts.Cert, err error) *MockAgent_View_Call {
	_c.Call.Return(cert, err)
	return _c
}

func (_c *MockAgent_View_Call) RunAndReturn(run func(serialNumber string) (amcerts.Cert, error)) *MockAgent_View_Call {
	_c.Call.Return(run)
	return _c
}
