/*
 * SuperMQ Users Service
 *
 * This is the Users Server based on the OpenAPI 3.0 specification.  It is the HTTP API for managing platform users. You can now help us improve the API whether it's by making changes to the definition itself or to the code. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserReqObj {
    /// User's first name.
    #[serde(rename = "first_name")]
    pub first_name: String,
    /// User's last name.
    #[serde(rename = "last_name")]
    pub last_name: String,
    /// User's email address will be used as its unique identifier.
    #[serde(rename = "email")]
    pub email: String,
    /// User tags.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "credentials")]
    pub credentials: Box<models::UserReqObjCredentials>,
    /// Arbitrary, object-encoded user's data.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    /// User's profile picture URL that is represented as a string.
    #[serde(rename = "profile_picture", skip_serializing_if = "Option::is_none")]
    pub profile_picture: Option<String>,
    /// User Status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl UserReqObj {
    pub fn new(first_name: String, last_name: String, email: String, credentials: models::UserReqObjCredentials) -> UserReqObj {
        UserReqObj {
            first_name,
            last_name,
            email,
            tags: None,
            credentials: Box::new(credentials),
            metadata: None,
            profile_picture: None,
            status: None,
        }
    }
}
/// User Status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Enabled
    }
}

