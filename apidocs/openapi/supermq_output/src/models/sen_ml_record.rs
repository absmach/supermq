/*
 * SuperMQ http adapter
 *
 * HTTP API for sending messages through communication channels. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SenMlRecord {
    /// Base Name
    #[serde(rename = "bn", skip_serializing_if = "Option::is_none")]
    pub bn: Option<String>,
    /// Base Time
    #[serde(rename = "bt", skip_serializing_if = "Option::is_none")]
    pub bt: Option<f64>,
    /// Base Unit
    #[serde(rename = "bu", skip_serializing_if = "Option::is_none")]
    pub bu: Option<f64>,
    /// Base Value
    #[serde(rename = "bv", skip_serializing_if = "Option::is_none")]
    pub bv: Option<f64>,
    /// Base Sum
    #[serde(rename = "bs", skip_serializing_if = "Option::is_none")]
    pub bs: Option<f64>,
    /// Version
    #[serde(rename = "bver", skip_serializing_if = "Option::is_none")]
    pub bver: Option<f64>,
    /// Name
    #[serde(rename = "n", skip_serializing_if = "Option::is_none")]
    pub n: Option<String>,
    /// Unit
    #[serde(rename = "u", skip_serializing_if = "Option::is_none")]
    pub u: Option<String>,
    /// Value
    #[serde(rename = "v", skip_serializing_if = "Option::is_none")]
    pub v: Option<f64>,
    /// String Value
    #[serde(rename = "vs", skip_serializing_if = "Option::is_none")]
    pub vs: Option<String>,
    /// Boolean Value
    #[serde(rename = "vb", skip_serializing_if = "Option::is_none")]
    pub vb: Option<bool>,
    /// Data Value
    #[serde(rename = "vd", skip_serializing_if = "Option::is_none")]
    pub vd: Option<String>,
    /// Value Sum
    #[serde(rename = "s", skip_serializing_if = "Option::is_none")]
    pub s: Option<f64>,
    /// Time
    #[serde(rename = "t", skip_serializing_if = "Option::is_none")]
    pub t: Option<f64>,
    /// Update Time
    #[serde(rename = "ut", skip_serializing_if = "Option::is_none")]
    pub ut: Option<f64>,
}

impl SenMlRecord {
    pub fn new() -> SenMlRecord {
        SenMlRecord {
            bn: None,
            bt: None,
            bu: None,
            bv: None,
            bs: None,
            bver: None,
            n: None,
            u: None,
            v: None,
            vs: None,
            vb: None,
            vd: None,
            s: None,
            t: None,
            ut: None,
        }
    }
}

