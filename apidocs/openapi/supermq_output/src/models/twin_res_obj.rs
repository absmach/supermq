/*
 * SuperMQ twins service
 *
 * HTTP API for managing digital twins and their states. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TwinResObj {
    /// Email address of SuperMQ user that owns twin.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Unique twin identifier generated by the service.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Free-form twin name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Oridnal revision number of twin.
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<f64>,
    /// Twin creation date and time.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// Twin update date and time.
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "definitions", skip_serializing_if = "Option::is_none")]
    pub definitions: Option<Vec<models::Definition>>,
    /// Arbitrary, object-encoded twin's data.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}

impl TwinResObj {
    pub fn new() -> TwinResObj {
        TwinResObj {
            owner: None,
            id: None,
            name: None,
            revision: None,
            created: None,
            updated: None,
            definitions: None,
            metadata: None,
        }
    }
}

