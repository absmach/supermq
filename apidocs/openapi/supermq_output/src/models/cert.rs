/*
 * SuperMQ Certs service
 *
 * HTTP API for Certs service Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cert {
    /// Corresponding SuperMQ Client ID.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<uuid::Uuid>,
    /// Client Certificate.
    #[serde(rename = "client_cert", skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<String>,
    /// Key for the client_cert.
    #[serde(rename = "client_key", skip_serializing_if = "Option::is_none")]
    pub client_key: Option<String>,
    /// CA Certificate that is used to issue client certs, usually intermediate.
    #[serde(rename = "issuing_ca", skip_serializing_if = "Option::is_none")]
    pub issuing_ca: Option<String>,
    /// Certificate serial
    #[serde(rename = "serial", skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    /// Certificate expiry date
    #[serde(rename = "expire", skip_serializing_if = "Option::is_none")]
    pub expire: Option<String>,
}

impl Cert {
    pub fn new() -> Cert {
        Cert {
            client_id: None,
            client_cert: None,
            client_key: None,
            issuing_ca: None,
            serial: None,
            expire: None,
        }
    }
}

