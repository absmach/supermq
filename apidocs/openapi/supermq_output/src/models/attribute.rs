/*
 * SuperMQ twins service
 *
 * HTTP API for managing digital twins and their states. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attribute {
    /// Name of the attribute.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// SuperMQ channel used by attribute.
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    /// Subtopic used by attribute.
    #[serde(rename = "subtopic", skip_serializing_if = "Option::is_none")]
    pub subtopic: Option<String>,
    /// Trigger state creation based on the attribute.
    #[serde(rename = "persist_state", skip_serializing_if = "Option::is_none")]
    pub persist_state: Option<bool>,
}

impl Attribute {
    pub fn new() -> Attribute {
        Attribute {
            name: None,
            channel: None,
            subtopic: None,
            persist_state: None,
        }
    }
}

