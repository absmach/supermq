/*
 * SuperMQ Auth Service
 *
 * This is the Auth Server based on the OpenAPI 3.0 specification.  It is the HTTP API for managing platform users. You can now help us improve the API whether it's by making changes to the definition itself or to the code. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Scope {
    /// Scope unique identifier
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// PAT ID this scope belongs to
    #[serde(rename = "pat_id", skip_serializing_if = "Option::is_none")]
    pub pat_id: Option<uuid::Uuid>,
    /// Optional domain ID for the scope
    #[serde(rename = "optional_domain_id", skip_serializing_if = "Option::is_none")]
    pub optional_domain_id: Option<uuid::Uuid>,
    /// Type of entity the scope applies to
    #[serde(rename = "entity_type", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<EntityType>,
    /// ID of the entity the scope applies to. '*' means all entities of the specified type.
    #[serde(rename = "entity_id", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
    /// Operation allowed by this scope
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<Operation>,
}

impl Scope {
    pub fn new() -> Scope {
        Scope {
            id: None,
            pat_id: None,
            optional_domain_id: None,
            entity_type: None,
            entity_id: None,
            operation: None,
        }
    }
}
/// Type of entity the scope applies to
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntityType {
    #[serde(rename = "groups")]
    Groups,
    #[serde(rename = "channels")]
    Channels,
    #[serde(rename = "clients")]
    Clients,
    #[serde(rename = "domains")]
    Domains,
    #[serde(rename = "users")]
    Users,
    #[serde(rename = "dashboards")]
    Dashboards,
    #[serde(rename = "messages")]
    Messages,
}

impl Default for EntityType {
    fn default() -> EntityType {
        Self::Groups
    }
}
/// Operation allowed by this scope
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operation {
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "list")]
    List,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "share")]
    Share,
    #[serde(rename = "unshare")]
    Unshare,
    #[serde(rename = "publish")]
    Publish,
    #[serde(rename = "subscribe")]
    Subscribe,
}

impl Default for Operation {
    fn default() -> Operation {
        Self::Create
    }
}

