/*
 * SuperMQ Auth Service
 *
 * This is the Auth Server based on the OpenAPI 3.0 specification.  It is the HTTP API for managing platform users. You can now help us improve the API whether it's by making changes to the definition itself or to the code. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Pat {
    /// Personal Access Token unique identifier
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// User ID of the PAT owner
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<uuid::Uuid>,
    /// Name of the Personal Access Token
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the Personal Access Token
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Secret value of the Personal Access Token
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// Time when the PAT was issued
    #[serde(rename = "issued_at", skip_serializing_if = "Option::is_none")]
    pub issued_at: Option<String>,
    /// Time when the PAT expires
    #[serde(rename = "expires_at", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<String>,
    /// Time when the PAT was last updated
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Time when the PAT was last used
    #[serde(rename = "last_used_at", skip_serializing_if = "Option::is_none")]
    pub last_used_at: Option<String>,
    /// Whether the PAT is revoked
    #[serde(rename = "revoked", skip_serializing_if = "Option::is_none")]
    pub revoked: Option<bool>,
    /// Time when the PAT was revoked
    #[serde(rename = "revoked_at", skip_serializing_if = "Option::is_none")]
    pub revoked_at: Option<String>,
}

impl Pat {
    pub fn new() -> Pat {
        Pat {
            id: None,
            user_id: None,
            name: None,
            description: None,
            secret: None,
            issued_at: None,
            expires_at: None,
            updated_at: None,
            last_used_at: None,
            revoked: None,
            revoked_at: None,
        }
    }
}

