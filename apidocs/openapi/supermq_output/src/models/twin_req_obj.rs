/*
 * SuperMQ twins service
 *
 * HTTP API for managing digital twins and their states. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TwinReqObj {
    /// Free-form twin name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Arbitrary, object-encoded twin's data.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
    #[serde(rename = "definition", skip_serializing_if = "Option::is_none")]
    pub definition: Option<Box<models::Definition>>,
}

impl TwinReqObj {
    pub fn new() -> TwinReqObj {
        TwinReqObj {
            name: None,
            metadata: None,
            definition: None,
        }
    }
}

