/*
 * SuperMQ twins service
 *
 * HTTP API for managing digital twins and their states. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct State {
    /// ID of twin state belongs to.
    #[serde(rename = "twin_id", skip_serializing_if = "Option::is_none")]
    pub twin_id: Option<uuid::Uuid>,
    /// State position in a time row of states.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    /// State creation date.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// Object-encoded states's payload.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<serde_json::Value>,
}

impl State {
    pub fn new() -> State {
        State {
            twin_id: None,
            id: None,
            created: None,
            payload: None,
        }
    }
}

