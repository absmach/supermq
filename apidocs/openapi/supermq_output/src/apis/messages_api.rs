/*
 * SuperMQ http adapter
 *
 * HTTP API for sending messages through communication channels. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.18.0
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`m_domain_prefix_c_channel_prefix_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MDomainPrefixCChannelPrefixPostError {
    Status400(),
    Status401(),
    Status404(),
    Status415(),
    Status500(),
    UnknownValue(serde_json::Value),
}


/// Sends message to the communication channel. Messages can be sent as JSON formatted SenML or as blob. 
pub async fn m_domain_prefix_c_channel_prefix_post(configuration: &configuration::Configuration, domain_prefix: &str, channel_prefix: &str, sen_ml_record: Vec<models::SenMlRecord>) -> Result<(), Error<MDomainPrefixCChannelPrefixPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_domain_prefix = domain_prefix;
    let p_path_channel_prefix = channel_prefix;
    let p_body_sen_ml_record = sen_ml_record;

    let uri_str = format!("{}/m/{domainPrefix}/c/{channelPrefix}", configuration.base_path, domainPrefix=crate::apis::urlencode(p_path_domain_prefix), channelPrefix=crate::apis::urlencode(p_path_channel_prefix));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_body_sen_ml_record);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<MDomainPrefixCChannelPrefixPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

